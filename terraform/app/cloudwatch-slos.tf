locals {
  # Restrict our SLI to only URIs we're interested, that do real work. Ignore easily-cached, cheap-to-compute ones.
  idp_uri_denylist_filter = join(" && ",
    concat(
      # Only ignore "GET /", not "POST /", which is used for email/password submission
      ["$.request != \"GET / HTTP/1.1\""],
      formatlist("$.uri_path != \"%s\"", var.sli_uninteresting_uris)
    )
  )

  # `slis` represents all the rolling-window SLIs we want to calculate for this environment.
  # SLIs are implemented as (good_events / total_events)
  slis = {
    # SLI name. This will be the metric name's suffix
    all_availability = {
      # Numerator is the sum of 2XX, 3XX and 4XX responses from the LB's target group.
      numerator = [
        {
          # Metric type of the numerator. Metric types are defined as subclasses of MetricBase in windowed_slo.py
          namespace   = "AWS/ApplicationELB"
          metric_name = "HTTPCode_Target_2XX_Count"
          dimensions = [
            {
              Name  = "LoadBalancer"
              Value = aws_alb.idp.arn_suffix
            }
          ]
        },
        {
          namespace   = "AWS/ApplicationELB"
          metric_name = "HTTPCode_Target_3XX_Count"
          dimensions = [
            {
              Name  = "LoadBalancer"
              Value = aws_alb.idp.arn_suffix
            }
          ]
        },
        {
          namespace   = "AWS/ApplicationELB"
          metric_name = "HTTPCode_Target_4XX_Count"
          dimensions = [
            {
              Name  = "LoadBalancer"
              Value = aws_alb.idp.arn_suffix
            }
          ]
        }
      ]

      # Numerator is the sum of all responses from the LB's target group including 500s but
      # excluding 4xx generated by the load balancer
      denominator = [
        {
          namespace   = "AWS/ApplicationELB"
          metric_name = "RequestCount"
          dimensions = [
            {
              Name  = "LoadBalancer"
              Value = aws_alb.idp.arn_suffix
            }
          ]
        },
        {
          namespace   = "AWS/ApplicationELB"
          metric_name = "HTTPCode_Target_5XX_Count"
          dimensions = [
            {
              Name  = "LoadBalancer"
              Value = aws_alb.idp.arn_suffix
            }
          ]
        }
      ]
    }
    interesting_availability = {
      numerator = [{
        # Represents the sum of a single Cloudwatch metric.
        # Supported:
        #  statistic: Sum|SampleCount
        #  extended_statistic: TC(X)
        # statistic = "Sum"
        # extended_statistic = 'TC(90)'
        namespace   = "${var.env_name}/sli"
        metric_name = "InterestingUrisSuccess"
        dimensions = [
          {
            Name  = "Hostname"
            Value = var.env_name == "prod" ? "secure.${var.root_domain}" : "idp.${var.env_name}.${var.root_domain}"
          }
        ]
      }]
      denominator = [{
        namespace   = "${var.env_name}/sli"
        metric_name = "InterestingUrisTotal"
        dimensions = [
          {
            Name  = "Hostname"
            Value = var.env_name == "prod" ? "secure.${var.root_domain}" : "idp.${var.env_name}.${var.root_domain}"
          }
        ]
      }]
    }
    interesting_latency = {
      window_days = 30
      numerator = [{
        # Threshold count is the number of data points under a threshold.
        # https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/Statistics-definitions.html
        namespace          = "${var.env_name}/sli"
        metric_name        = "InterestingUrisSuccessLatency"
        extended_statistic = "TC(:${var.sli_interesting_latency_threshold})" # Trimmed count used for latency in seconds.
        dimensions = [
          {
            Name  = "Hostname"
            Value = var.env_name == "prod" ? "secure.${var.root_domain}" : "idp.${var.env_name}.${var.root_domain}"
          }
        ]
      }]
      denominator = [{
        # Count is the number of data points during the period.
        # https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/Statistics-definitions.html
        namespace   = "${var.env_name}/sli"
        metric_name = "InterestingUrisSuccessLatency"
        statistic   = "SampleCount"
        dimensions = [
          {
            Name  = "Hostname"
            Value = var.env_name == "prod" ? "secure.${var.root_domain}" : "idp.${var.env_name}.${var.root_domain}"
          }
        ]
      }]
    }
  }
}

resource "aws_cloudwatch_log_metric_filter" "idp_interesting_uris_success" {
  name           = "${var.env_name}-idp-interesting-uris-success"
  log_group_name = aws_cloudwatch_log_group.nginx_access_log.name
  pattern        = join("", ["{", local.idp_uri_denylist_filter, " && $.status != 5*}"])
  metric_transformation {
    name      = "InterestingUrisSuccess"
    namespace = "${var.env_name}/sli"
    value     = 1
    dimensions = {
      Hostname = "$.hostname"
    }
  }
  depends_on = [aws_cloudwatch_log_group.nginx_access_log]
}

resource "aws_cloudwatch_log_metric_filter" "idp_interesting_uris_total" {
  name           = "${var.env_name}-idp-interesting-uris-total"
  log_group_name = aws_cloudwatch_log_group.nginx_access_log.name
  pattern        = join("", ["{", local.idp_uri_denylist_filter, "}"])
  metric_transformation {
    name      = "InterestingUrisTotal"
    namespace = "${var.env_name}/sli"
    value     = 1
    dimensions = {
      Hostname = "$.hostname"
    }
  }
  depends_on = [aws_cloudwatch_log_group.nginx_access_log]
}

resource "aws_cloudwatch_log_metric_filter" "idp_interesting_uris_success_latency" {
  name           = "${var.env_name}-idp-interesting-uris-success-latency"
  log_group_name = aws_cloudwatch_log_group.nginx_access_log.name
  pattern        = join("", ["{", local.idp_uri_denylist_filter, " && $.status != 5*}"])
  metric_transformation {
    name      = "InterestingUrisSuccessLatency"
    namespace = "${var.env_name}/sli"
    value     = "$.request_time"
    dimensions = {
      Hostname = "$.hostname"
    }
  }
  depends_on = [aws_cloudwatch_log_group.nginx_access_log]
}

module "cloudwatch_sli" {
  source = "github.com/18F/identity-terraform//slo_lambda?ref=6cdd1037f2d1b14315cc8c59b889f4be557b9c17"
  #source = "../../../identity-terraform/slo_lambda"

  env_name          = var.env_name
  load_balancer_arn = aws_alb.idp.arn
  sli_prefix        = "idp"
  slis              = local.slis
}
