#!/usr/bin/env bash

# function to exit process with error message
die() { echo_red "$*" >&2 ; exit 1; }

# http://redsymbol.net/articles/unofficial-bash-strict-mode/
set -euo pipefail

if [ $# -lt 3 ] ; then
    echo "Usage: $0 <environment_name> <username> <terraform_dir> [<terraform_commands>]"
    echo "   Runs <terraform_commands> against <environment_name> using the"
    echo "   configuration in <terraform_dir>."
    echo "   <username> should be the username of an existing chef user that"
    echo "   Terraform can use to provision chef-client on new nodes."
    exit 1
fi

# shellcheck source=./bin/lib/common.sh
. "$(dirname "$0")/bin/lib/common.sh"

# Be sure ruby is working and bundler is setup since some terraform modules
# rely on erb templates and ruby to be working.
run bundle check

ENVIRONMENT=$1; shift
GSA_USERNAME=$1; shift
TF_DIR=$1; shift
TF_CMD=("$@")

TF_DIR="${TF_DIR%/}" # strip off trailing /

case "$TF_DIR" in
    terraform-dns|terraform-cloudtrail|terraform-common)
        # These configurations apply account wide, so set the environment to the
        # account ID.
        #
        # https://stackoverflow.com/a/33791322
        if [ "$ENVIRONMENT" != "global" ]; then
            echo_red >&2 "$TF_DIR applies to the whole AWS account!"
            echo_red >&2 "For safety, pass 'global' as the environment name"
            die "You provided '$ENVIRONMENT'"
        fi

        ENVIRONMENT="account_global_$(run aws sts get-caller-identity --output text --query 'Account')"
        echo >&2 "Forcing environment name to be $ENVIRONMENT since $TF_DIR is account wide configuration"
        ;;
    */?*)
        echo_red >&2 "\$TF_DIR cannot contain slashes, must be at top level"
        die "You provided '$TF_DIR'"
        ;;
esac

# We need to be in the root of the repo for all this to work.
cd "$(dirname "$0")"

echo "DEPLOY: Checking whether environment versioning is recommended...."
case "$ENVIRONMENT" in
    prod|staging|int|dm|qa|pt|dev)
    case "$TF_DIR" in
        terraform-app)
        if [[ ( "$(cat VERSION.txt)" =~ -pre ||
                ! "$(git log -n 1 --pretty=format:'%d')" =~ tag: ) ]]; then
                echo_yellow >&2 "



###############################################################################
#                             !!!WARNING!!!                                   #
###############################################################################

The $ENVIRONMENT environment should not be deployed from anything besides a
tagged, non prerelease version because it is one of the environments officially
supported by the devops team, either for clients or for other teams.

See https://github.com/18F/identity-devops/tree/master/doc/process/releases.md
for more details about our release tools.



"
        fi
        ;;
    esac
    ;;
esac

echo_blue "deploy environment: $ENVIRONMENT"

echo "DEPLOY: Loading environment variables...."
. bin/load-env.sh "$ENVIRONMENT" "$GSA_USERNAME"

# Check that current version of terraform is supported by our environment. This
# array should be set in the environment-specific variables.
check_terraform_version "${ID_SUPPORTED_TERRAFORM_VERSIONS[@]}"

# Check that the account ID is correct
real_account_id="$(run aws sts get-caller-identity --output text --query 'Account')"
# shellcheck disable=SC2154
if [ "$real_account_id" != "$TF_VAR_account_id" ]; then
    echo_red "Account ID from environment does not match actual account"
    echo_red "TF_VAR_account_id: $TF_VAR_account_id"
    echo_red "Actual account ID: $real_account_id"
    echo_red "Are you sure you set AWS_PROFILE / secret key right?"
    die "error: Account ID mismatch"
fi

case "$TF_DIR" in
    terraform-app)
        echo "DEPLOY: Checking for required files...."
        run bin/check-required-files.sh "$ENVIRONMENT"

        if [ -z "${TF_VAR_chef_id:=}" ] ; then
            die "You must specify an initial chef user.  \
        Make sure $ID_ENV_DIR/$ENVIRONMENT.sh contains all the necessary configuration."
        fi

        if [ -z "${TF_VAR_chef_id:=}" ] ; then
            die "You must specify an environment to terraform.  \
        Make sure $ID_ENV_DIR/$ENVIRONMENT.sh contains all the necessary configuration."
        fi
        ;;
esac

STATE=${TF_DIR}/terraform-${TF_VAR_env_name}.tfstate
case "$TF_DIR" in
    terraform-dns|terraform-cloudtrail|terraform-common)
        echo "Not using a region specific state file for dns remote config"
        STATE=${TF_DIR}/terraform.tfstate
        ;;
esac
echo "Using state file $STATE"

echo "Ensuring ${TF_DIR} is a terraform directory"
# NOTE: JJG remove trailing slash from $2 if it exists to ease use with auto completion
if [ ! -f "${TF_DIR}/main.tf" ] ; then
    echo_red "deploy: not found: '${TF_DIR}/main.tf'"
    echo_red "Are you sure '${TF_DIR}' is a terraform project folder?"
    echo_red "Known examples include terraform-app, etc."
    die "error: Could not find terraform files"
fi

echo "Configuring state bucket login_dot_gov_tf_state with state path ${STATE}"
if [ -z "${TERRAFORM_STATE_BUCKET:=}" ] ; then
    die "You must set the TERRAFORM_STATE_BUCKET environment variable.  \
This should contain the name of the s3 bucket used to store terraform state for this run."
fi

if [ -z "${TERRAFORM_STATE_BUCKET_REGION:=}" ] ; then
    die "You must set the TERRAFORM_STATE_BUCKET_REGION environment variable.  \
This should contain the region of the s3 bucket used to store terraform state for this run."
fi

if [ -z "${TF_VAR_state_lock_table-}" ]; then
    die "Must set TF_VAR_state_lock_table to dynamodb terraform state locking table"
fi

run bin/configure_state_bucket.sh "$TERRAFORM_STATE_BUCKET" "$STATE" \
    "$TF_DIR" "$TERRAFORM_STATE_BUCKET_REGION" "$TF_VAR_state_lock_table"

echo >&2 "+ cd $TF_DIR"
cd "$TF_DIR"

cat <<EOF
########################################
#
# Working in environment:
# $TF_VAR_env_name
#
########################################
EOF

echo_blue "Running terraform..."
echo

run terraform get
run terraform "${TF_CMD[@]}"
