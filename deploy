#!/usr/bin/env bash

# function to exit process with error message
die() { echo "$@" 1>&2 ; exit 1; }

# http://redsymbol.net/articles/unofficial-bash-strict-mode/
set -euo pipefail

if [ $# -lt 3 ] ; then
	echo "Usage: $0 <environment name> <username> <terraform_dir> [<terraform_commands>]"
	exit 1
fi

ENVIRONMENT=$1; shift
GSA_USERNAME=$1; shift
TF_DIR=$1; shift
TF_CMD="$@"
ENVIRONMENT_CONFIG=env/env.sh

echo "DEPLOY: Loading environment variables...."
. bin/load-env.sh $ENVIRONMENT $GSA_USERNAME $ENVIRONMENT_CONFIG

echo "DEPLOY: Checking for required files...."
./bin/check-required-files.sh $ENVIRONMENT

if [ -z "${TF_VAR_chef_id:=}" ] ; then
    die "You must specify an initial chef user.  \
Make sure $ENVIRONMENT_CONFIG contains all the necessary configuration."
fi

if [ -z "${TF_VAR_chef_id:=}" ] ; then
    die "You must specify an environment to terraform.  \
Make sure $ENVIRONMENT_CONFIG contains all the necessary configuration."
fi

STATE=${TF_DIR}/terraform-${TF_VAR_env_name}.tfstate
if [ "${TF_DIR}" == "terraform-dns" -o "${TF_DIR}" == "terraform-cloudtrail" ]; then
    echo "Not using a region specific state file for dns remote config"
    STATE=${TF_DIR}/terraform.tfstate
fi
echo "Using state file $STATE"

echo "Ensuring ${TF_DIR} is a terraform directory"
# NOTE: JJG remove trailing slash from $2 if it exists to ease use with auto completion
if [ ! -f "${TF_DIR}/main.tf" ] ; then
  die "you must specify a terraform project folder"
fi

echo "Creating an s3 bucket for terraform state"
# This command currently fails.
# See https://github.com/18F/identity-private/issues/1835
#aws s3 mb s3://login_dot_gov_tf_state

echo "Enabling versioning on the s3 bucket"
aws s3api put-bucket-versioning \
  --bucket login_dot_gov_tf_state \
  --versioning-configuration Status=Enabled

echo "Using terraform remote state server"
cd ${TF_DIR}
rm -rf .terraform
terraform remote config -backend=s3 \
  -backend-config="bucket=login_dot_gov_tf_state" \
  -backend-config="key=${STATE}" \
  -backend-config="region=us-east-1" \
  -state="${STATE}"

cat <<EOF
########################################
#
# Working in environment:
# $TF_VAR_env_name
#
########################################
EOF

terraform ${TF_CMD}
