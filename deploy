#!/usr/bin/env bash

# function to exit process with error message
die() { echo_red "$*" >&2 ; exit 1; }

# http://redsymbol.net/articles/unofficial-bash-strict-mode/
set -euo pipefail

if [ $# -lt 3 ] ; then
    echo "Usage: $0 <environment_name> <username> <terraform_dir> [<terraform_commands>]"
    echo "   Runs <terraform_commands> against <environment_name> using the"
    echo "   configuration in <terraform_dir>."
    echo "   <username> should be the username of an existing chef user that"
    echo "   Terraform can use to provision chef-client on new nodes."
    exit 1
fi

# shellcheck source=./bin/lib/common.sh
. "$(dirname "$0")/bin/lib/common.sh"

ENVIRONMENT=$1; shift
GSA_USERNAME=$1; shift
TF_DIR=$1; shift
TF_CMD=("$@")

# We need to be in the root of the repo for all this to work.
cd "$(dirname "$0")"

echo_blue "deploy environment: $ENVIRONMENT"

echo "DEPLOY: Loading environment variables...."
. bin/load-env.sh "$ENVIRONMENT" "$GSA_USERNAME"

# Check that current version of terraform is supported by our environment. This
# array should be set in the environment-specific variables.
check_terraform_version "${ID_SUPPORTED_TERRAFORM_VERSIONS[@]}"

echo "DEPLOY: Checking for required files...."
run bin/check-required-files.sh "$ENVIRONMENT"

if [ -z "${TF_VAR_chef_id:=}" ] ; then
    die "You must specify an initial chef user.  \
Make sure $ID_ENV_DIR/$ENVIRONMENT.sh contains all the necessary configuration."
fi

if [ -z "${TF_VAR_chef_id:=}" ] ; then
    die "You must specify an environment to terraform.  \
Make sure $ID_ENV_DIR/$ENVIRONMENT.sh contains all the necessary configuration."
fi

STATE=${TF_DIR}/terraform-${TF_VAR_env_name}.tfstate
case "$TF_DIR" in
    terraform-dns|terraform-cloudtrail)
        echo "Not using a region specific state file for dns remote config"
        STATE=${TF_DIR}/terraform.tfstate
        ;;
esac
echo "Using state file $STATE"

echo "Ensuring ${TF_DIR} is a terraform directory"
# NOTE: JJG remove trailing slash from $2 if it exists to ease use with auto completion
if [ ! -f "${TF_DIR}/main.tf" ] ; then
    echo_red "deploy: not found: '${TF_DIR}/main.tf'"
    echo_red "Are you sure '${TF_DIR}' is a terraform project folder?"
    echo_red "Known examples include terraform-app, etc."
    die "error: Could not find terraform files"
fi

echo "Configuring state bucket login_dot_gov_tf_state with state path ${STATE}"
run bin/configure_state_bucket.sh login_dot_gov_tf_state "$STATE" "$TF_DIR"

echo >&2 "+ cd $TF_DIR"
cd "$TF_DIR"

cat <<EOF
########################################
#
# Working in environment:
# $TF_VAR_env_name
#
########################################
EOF

echo_blue "Running terraform..."
echo

run terraform "${TF_CMD[@]}"
