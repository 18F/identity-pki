#!/bin/bash

# Create an IAM user's login profile in the login-master account!

set -eu

. "$(dirname "$0")/lib/common.sh"

usage() {
  cat >&2 <<EOM

usage: $(basename "$0") [AWS_IAM_USER]

Look up all AWS IAM roles that \`AWS_IAM_USER\` can Assume
via aws-vault. The value of \`AWS_IAM_USER\` can be:

- provided as an argument to this script (for yourself
  or to look up another user's available roles)
- set in one's shell as an environment variable,
  i.e. within an .rc file
- left blank, to use the value of \`.UserName\` returned
  when running \`aws iam get-user\`

If running yourself and/or without providing \`AWS_IAM_USER\`
as an argument, will prompt to add them to your
~/.aws/config file with the appropriate role_arn /
role_session_name / include_profile settings, as well
as the session_tags=SSMSessionRunAs configs if you have
an ec2_username set in terraform/master/global/users.yaml

Must be run in an aws-vault exec / session wrapper using
one's source/parent profile (usually \`master\`), e.g.:

$ aws-vault exec master -- $(basename "$0")
$ $(dirname "$0")/awsv -x master $(basename "$0")

EOM
}

[ $# -gt 1 ] && raise 'Must provide 0-1 arguments'
verify_root_repo
echo

IAM_USER=${1-}
ENV_USER=${AWS_IAM_USER-}
IAM_USER_DATA=$(aws iam get-user 2>/dev/null)
FOUND_USER=$(echo ${IAM_USER_DATA} | jq -r '.[].UserName')
EC2_USERNAME=$(echo ${IAM_USER_DATA} | jq -r '.[].Tags[]|
  select(.Key == "ec2_username").Value' 2>/dev/null || true) 
declare {FOUND_POLICIES,ROLE_ARNS,RUN_AS_CONFIG}=

if [[ -z "${IAM_USER}" ]] ; then
  if [[ -z "${ENV_USER}" ]] ; then
    if [[ -z "${FOUND_USER}" ]] ; then
      echo_red "Could not detect current IAM user; also:"
      echo_red "IAM_USER & AWS_IAM_USER not set;"
      raise "must set either to run with AssumedRole"
    else
      echo_yellow "AWS_IAM_USER not set in env."
      echo_yellow "Using ${FOUND_USER} as IAM_USER."
      IAM_USER="${FOUND_USER}"
    fi
  else
    IAM_USER="${AWS_IAM_USER}"
  fi
fi

verify_iam_user "${IAM_USER}"

echo_blue "Getting available roles(s) for user ${IAM_USER}..."
echo
# verify that we have permission to see the groups for $IAM_USER
for GROUP in $(aws iam list-groups-for-user \
                --user-name ${IAM_USER} \
                --query 'Groups[].{Group:GroupName}' \
                --output text) ; do
  FOUND_POLICIES+=$(aws iam list-attached-group-policies \
                    --group ${GROUP} \
                    --query 'AttachedPolicies[].{Arn:PolicyArn}' \
                    --output text)
done

ACCOUNT_TYPES=$(echo -e "{\n$(sed -E '1,/aws_account_types/d;/\}/,$d' terraform/master/global/main.tf)}" |
                sed -E 's/\]\}/\]\'$'\n\}/;s/ = /\: /g;s/ #.+$//g')
for POLICY in $(echo ${FOUND_POLICIES[@]} |
                tr -s '[:blank:]' '\n' | sort -u | tr '\n' ' ') ; do
  ACCOUNT=$(echo $POLICY | sed -E 's/.*policy\/([a-zA-z]+)Assume.*/\1/')
  ROLE=$(echo $POLICY | sed -E 's/.*Assume//')
  SHORT_ROLE=$(grep -wlr "${ROLE}" terraform/all/module/iam-role-*.tf |
               sed -E 's/.*\-([a-z]+)\.tf/\1/')
  for ACCOUNT_ID in $(echo $ACCOUNT_TYPES | jq -r --arg ACCOUNT "$ACCOUNT" '.[$ACCOUNT][]') ; do
    SHORT_ACCT=$(egrep "^\s+\"${ACCOUNT_ID}\"" terraform/master/global/main.tf | sed -E 's/.+login-//')
    ROLE_ARNS+=("${SHORT_ACCT}-${SHORT_ROLE}+arn:aws:iam::${ACCOUNT_ID}:role+${ROLE}")
  done
done

echo "${ROLE_ARNS[@]}" | tr ' ' '\n' | sed -E 's/\+/ /g' |
                sed -E 's/role /role\//' | column -t | sort -t: -k4 -u
echo

if [[ "${FOUND_USER}" == "${IAM_USER}" ]] ; then
  if prompt_yn "Add roles to ~/.aws/config file?" ; then
    if [[ -z ${EC2_USERNAME} ]]; then
      echo_yellow "EC2_USERNAME not set; will not configure SSMSessionRunAs user"
    else
      RUN_AS_CONFIG="session_tags      = SSMSessionRunAs=${EC2_USERNAME}\n"
    fi
    echo_blue "Generating config and adding to file..."
    echo
    MAIN_PROFILE=${AWS_VAULT:-$(echo $AWS_PROFILE)}
    MFA_ARN=$(aws iam list-mfa-devices \
              --user-name "${FOUND_USER}" |
              jq -r '.[][0].SerialNumber')
    for ROLE in $(echo "${ROLE_ARNS[@]}" | tr ' ' '\n' | sed -E 's/\+/ /g' |
                sed -E 's/role /role\//' | column -t | sort -t: -k4 | sed -E 's/ +/\+/g') ; do
      #echo $ROLE
      ROLE_NAME=$(echo $ROLE | awk -F'+' '{print $1}')
      ROLE_ARN=$(echo $ROLE | awk -F'+' '{print $2}')
      if [[ $(grep "${ROLE_ARN}" ~/.aws/config) ]] ; then
        echo_yellow "${ROLE_ARN} already in config file; skipping."
      elif [[ $(grep "profile ${ROLE_NAME}" ~/.aws/config) ]] ; then
        echo_yellow "${ROLE_NAME} already in config file; skipping."
      else
        define ROLE_BLOCK <<EOF
[profile ${ROLE_NAME}]
role_arn          = ${ROLE_ARN}
role_session_name = ${FOUND_USER}
${RUN_AS_CONFIG}include_profile   = ${MAIN_PROFILE}

EOF
        echo -e "${ROLE_BLOCK}\n" | tee -a ~/.aws/config
      fi
    done
    echo
    echo_blue "Role(s) added to config file."
  fi
fi