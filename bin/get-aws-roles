#!/bin/bash

# Create an IAM user's login profile in the login-master account!

set -eu

. "$(dirname "$0")/lib/common.sh"

usage() {
  cat >&2 <<EOM

Usage: $(basename "$0") [USER_NAME] (leave blank to get roles for your own user)

Look up AWS IAM roles that USER_NAME -- or one's self -- can Assume via aws-vault.
Verifies USER_NAME in \`aws iam list-users\` and terraform/master/global/users.yaml

If USER_NAME is provided:
- Must be run with an Assumed role from login-master, e.g. master-admin
- Will only print out list of roles available to USER_NAME

If not:
- Must be run using one's source/parent profile (usually \`master\`), e.g.:
  $ aws-vault exec master -- $(basename "$0")
  $ $(dirname "$0")/awsv -x master $(basename "$0")
- Will use value of \`AWS_IAM_USER\` env var, if set, for USER_NAME; otherwise,
  will look up the value of \`.UserName\` by running \`aws iam get-user\`
- Will prompt to add the listed role(s) to your ~/.aws/config file with the
  appropriate role_arn / role_session_name / include_profile settings, as well as
  the session_tags=SSMSessionRunAs configs if you have an ec2_username set
  in the terraform/master/global/users.yaml file.

EOM
}

[ $# -gt 1 ] && raise 'Must provide 0-1 arguments'
verify_root_repo
check_branch_age
echo

declare {FOUND_POLICIES,ROLE_ARNS,RUN_AS_CONFIG,VERIFIED_USER}=
IAM_USER=${1-}
verify_iam_user "${IAM_USER}"

echo_cyan "Getting available roles(s) for user ${VERIFIED_USER}..."
echo
# verify that we have permission to see the groups for $VERIFIED_USER
for GROUP in $(aws iam list-groups-for-user \
                --user-name "${VERIFIED_USER}" \
                --query 'Groups[].{Group:GroupName}' \
                --output text) ; do
  FOUND_POLICIES+=$(aws iam list-attached-group-policies \
                    --group "${GROUP}" \
                    --query 'AttachedPolicies[].{Arn:PolicyArn}' \
                    --output text)
  FOUND_POLICIES+=" "
done

MASTER_FILE='terraform/master/global/main.tf'
read -ra ALL_ACCOUNT_IDS <<< "$(echo -e "{\n$(sed -E '1,/aws_account_types/d;/\}/,$d' ${MASTER_FILE})}" | grep -Eo '[0-9]{12}' | tr '\n' ' ')"
for POLICY in $(echo "${FOUND_POLICIES[@]}" |
                tr -s '[:blank:]' '\n' | sort -u | tr '\n' ' ') ; do
  ROLE=$(echo "$POLICY" | sed -E 's/.*Assume//')
  SHORT_ROLE=$(grep -wlr "${ROLE}" terraform/all/module/iam-role-*.tf |
               grep -v "account-specific-permissions" |
               sed -E 's/.*\-([a-z]+)\.tf/\1/')
  for ACCOUNT_ID in "${ALL_ACCOUNT_IDS[@]}" ; do
    SHORT_ACCT=$(grep -E "^\s+\"${ACCOUNT_ID}\"" ${MASTER_FILE} |
      sed -E 's/.+login-([a-z-]+).*/\1/')
    ROLE_ARNS+=("${SHORT_ACCT}-${SHORT_ROLE}+arn:aws:iam::${ACCOUNT_ID}:role+${ROLE}")
  done
done

echo "${ROLE_ARNS[@]}" | tr ' ' '\n' | sed -E 's/\+/ /g' |
                sed -E 's/role /role\//' | column -t | sort -t: -k4 -u
echo

if [[ "${FOUND_USER}" == "${VERIFIED_USER}" ]] ; then
  if prompt_yn "Add roles to ~/.aws/config file?" ; then
    if [[ -z ${EC2_USERNAME} ]]; then
      echo_yellow "EC2_USERNAME not set; will not configure SSMSessionRunAs user"
    else
      RUN_AS_CONFIG="session_tags      = SSMSessionRunAs=${EC2_USERNAME}\n"
    fi
    echo_blue "Generating config and adding to file..."
    echo
    MAIN_PROFILE="${AWS_VAULT:-$AWS_PROFILE}"
    for ROLE in $(echo "${ROLE_ARNS[@]}" | tr ' ' '\n' | sed -E 's/\+/ /g' |
                sed -E 's/role /role\//' | column -t | sort -t: -k4 | sed -E 's/ +/\+/g') ; do
      #echo $ROLE
      ROLE_NAME=$(echo "$ROLE" | awk -F'+' '{print $1}')
      ROLE_ARN=$(echo "$ROLE" | awk -F'+' '{print $2}')
      if grep -q "${ROLE_ARN}" ~/.aws/config; then
        echo_yellow "${ROLE_ARN} already in config file; skipping."
      elif grep -q "profile ${ROLE_NAME}" ~/.aws/config; then
        echo_yellow "${ROLE_NAME} already in config file; skipping."
      else
        define ROLE_BLOCK <<EOF
[profile ${ROLE_NAME}]
role_arn          = ${ROLE_ARN}
role_session_name = ${FOUND_USER}
${RUN_AS_CONFIG}include_profile   = ${MAIN_PROFILE}

EOF
        echo -e "${ROLE_BLOCK}\n" | tee -a ~/.aws/config
      fi
    done
    echo
    echo_blue "Role(s) added to config file."
  fi
fi
