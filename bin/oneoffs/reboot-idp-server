#!/bin/bash
set -eux

# This is a hack and should be used with caution. This script can be used to
# facilitate rolling reboots of IDP servers, first gracefully removing the
# server from associated target groups.

instance_id="$1"

# ideally we might query AWS API for the target groups rather than forcing user to
# provide them
target_group_arn_http="$2" # e.g. arn:...:targetgroup/prod-target-group/...
target_group_arn_ssl="$3"  # e.g. arn:...:targetgroup/prod-ssl-target-group/...

cd "$(dirname "$0")"

# deregister and wait
aws elbv2 describe-target-health --target-group-arn "$target_group_arn_ssl" --targets "Id=$instance_id" --output text

aws elbv2 deregister-targets --target-group-arn "$target_group_arn_ssl" --targets "Id=$instance_id"
aws elbv2 deregister-targets --target-group-arn "$target_group_arn_http" --targets "Id=$instance_id"
sleep 1
aws elbv2 describe-target-health --target-group-arn "$target_group_arn_ssl" --targets "Id=$instance_id" --output text

sleep 300

# assert that state is now unused

aws elbv2 describe-target-health --target-group-arn "$target_group_arn_ssl" --targets "Id=$instance_id" --output text

if [ "$(aws elbv2 describe-target-health \
            --target-group-arn "$target_group_arn_ssl" \
            --targets "Id=$instance_id" --output text \
            --query 'TargetHealthDescriptions[*].TargetHealth.State'
       )" != "unused" ]; then
    echo "Unexpected target health state"
    exit 1
fi

# reboot and wait
../ssh-instance "$instance_id" sudo reboot
sleep 120

# re-register
aws elbv2 register-targets --target-group-arn "$target_group_arn_ssl" --targets "Id=$instance_id"
aws elbv2 register-targets --target-group-arn "$target_group_arn_http" --targets "Id=$instance_id"

sleep 1
aws elbv2 describe-target-health --target-group-arn "$target_group_arn_ssl" --targets "Id=$instance_id" --output text

../ssh-instance "$instance_id" uptime
