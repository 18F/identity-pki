#!/bin/bash

set -eu

. "$(dirname "$0")/../lib/common.sh"

usage() {
  cat >&2 <<EOM

Usage: $(basename "$0") [ flags ]

Adds various aliases, functions, and environment variables
used by/calling various tools within identity-devops. Steps:

1. Verify \$HOME/.login-functions and \$HOME/.githubrc and then
   prompt to recreate for each (ignored with -l / -g / -s / -a)
2. Verify AWS/GSA/KITCHEN env vars and prompt for any
   not yet set (force with -e)
3. Update \$PATH to include 'identity-devops/bin'
   and 'identity-devops/bin/lib'
4. Add \$HOME/.login-functions and \$HOME/.githubrc to
   your shell's rc file (skip if already present)

Flags:

  -a  : Run script and auto-confirm each prompt
        (can also be run with any additional flags below)
  -g  : Only verify/recreate .githubrc and its
        associated env vars
  -l  : Only verify/recreate .login-functions and its
        associated env vars
  -s  : Only verify/recreate .subfunctions and its
        associated env vars
  -r  : Sets env var USE_RUN to 0, which will disable
        printing of commands (via \`run()\`) to the
        console output
  -e  : Reset ALL environment variables (can limit
        scope with -g, -l, and/or -s)

EOM
}

append_with_rc() {
  local RC="${1}"
  local TEXT="source \$HOME/.${RC}"

  echo >> "$HOME/.${RC}"
  cat "$(dirname "$0")/../lib/dotfiles/${RC}" >> "$HOME/.${RC}"

  if ! grep -qs "^$TEXT$" "${SHELL_RC}"; then
    echo && echo "Adding \`${TEXT}\` to ${SHELL_RC}..."
    run printf "%s\n" "$TEXT" >> "${SHELL_RC}"
  fi
  echo
}

clear_env_vars () {
  if ! prompt_yn "Clear out ALL env vars?"; then
    echo "Not clearing env vars."
    echo
    return
  else
    echo "Clearing env vars..."
    for ENV_VAR in $(echo "${ENV_VARS[@]}" | tr '\n' ' ') ; do
      unset $ENV_VAR
      echo "$ENV_VAR unset."
    done
  fi
  ENV_VARS=()
}

verify_env_vars() {
  local VARS="$@"
  echo "Verifying env vars..."
  for ENV_VAR in $(echo "${VARS[@]}" | tr '\n' ' ') ; do
    VAR_VAL=$(env | grep $ENV_VAR | awk -F= '{print $NF}')
    if [[ -z "$VAR_VAL" ]]; then
      read -r -p "$ENV_VAR not set; enter desired value: " VAR_VAL
    else
      echo_yellow "$ENV_VAR already set: '$VAR_VAL'"
    fi
  
    local TEXT="export $ENV_VAR=\"$VAR_VAL\""
    if ! grep -qs "^${TEXT}$" "$HOME/.${FILE}"; then
      printf "%s\n" "$TEXT" >> "$HOME/.${FILE}"
    fi
  done
  echo "Env vars verified and added to ${HOME}/.${FILE} file."
  echo
}

create_rc_file() {
  if [[ ! -f "$HOME/.${FILE}" ]] ; then
    echo && echo "Creating new \$HOME/.${FILE}..."
    run touch "$HOME/.${FILE}"
  fi

  if [[ "${FILE}" == "login-functions" ]] ; then
    ID_DIR="$(cd $(dirname "${BASH_SOURCE[0]}") && pwd | sed 's/\/oneoffs//')"
    run echo ". ${ID_DIR}/lib/common.sh" >> "$HOME/.login-functions"
    if [[ ! $(echo ${PATH} | grep ${ID_DIR}) ]] ; then
      echo "Adding '${ID_DIR}' to \$PATH..."
      run echo "export PATH=${ID_DIR}:\$PATH" >> "$HOME/.login-functions"
    fi
  fi
  append_with_rc "${FILE}"
}

rebuild_rc_file() {
  local FILE=${1}
  echo_green "Ready to build local .${FILE} file..."
  if [[ -f "$HOME/.${FILE}" ]] ; then
    if [[ $AUTORUN = false ]] ; then
      if ! prompt_yn "\$HOME/.${FILE} already exists; recreate?"; then
        echo "Skipping recreation of \$HOME/.${FILE}."
        echo
        return
      fi
    fi
    echo && echo "Removing old \$HOME/.${FILE} file..."
    run rm -f "$HOME/.${FILE}"
  fi
  create_rc_file
}
######################### START OF SCRIPT #########################

AUTORUN=false
CLEAR_VARS=false
ENV_VARS=()
FILES=$(ls $(dirname "${BASH_SOURCE[0]}")/../lib/dotfiles)
echo

case "$SHELL" in
  */fish) SHELL_RC="$HOME/.config/fish/config.fish" ;;
  */zsh)
    if [ -w "$HOME/.zshrc.local" ]; then
      SHELL_RC="$HOME/.zshrc.local"
    else
      SHELL_RC="$HOME/.zshrc"
    fi
  ;;
  *) SHELL_RC="$HOME/.bash_profile" ;;
esac

while getopts aglser opt ; do
  case ${opt} in
    a) AUTORUN=true ;;
    g) AUTORUN=true ; FILES="githubrc" ;;
    l) AUTORUN=true ; FILES="login-functions" ;;
    s) AUTORUN=true ; FILES="subfunctions" ;;
    e) CLEAR_VARS=true ;;
    r)
      export USE_RUN=0
      sed -i '' -E "s/(USE_RUN=)1/\10/" "$HOME/.subfunctions"
      echo "Output of run() suppressed."
      [[ ${AUTORUN} = false ]] && exit 0
    ;;
    *) usage && exit 1 ;;
  esac
done

for FILE in $(echo "${FILES[@]}"  | tr '\n' ' ') ; do
  case ${FILE} in
    'githubrc')
      ENV_VARS=("GITHUB_PARENT_DIR")
    ;;
    'login-functions')
      ENV_VARS=("AWS_VAULT_PROMPT" \
                "GSA_USERNAME" \
                "KITCHEN_EC2_SSH_KEYPAIR_ID" \
                "KITCHEN_EC2_SSH_KEY" \
                "YKMAN_OATH_CREDENTIAL_NAME")
    ;;
    'subfunctions')
      ENV_VARS=("")
    ;;
  esac
  if [[ ${CLEAR_VARS} = true ]] ; then
    clear_env_vars "${ENV_VARS[@]}"
    [[ ${AUTORUN} = false ]] && exit 0
  fi
  rebuild_rc_file "${FILE}"
  verify_env_vars "${ENV_VARS[@]}"
done

echo_green "Done, run \`source ${SHELL_RC}\` to load the login.gov aliases/functions."
echo