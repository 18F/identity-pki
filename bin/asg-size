#!/bin/bash
set -euo pipefail

# shellcheck source=/dev/null
. "$(dirname "$0")/lib/common.sh"

# Given an auto-scaling group, set the desired count
usage () {
    cat >&2 <<EOM
usage: $(basename "$0") ENVIRONMENT ROLE [--min|--max|--desired] [COUNT]

If COUNT is not given, report the current counts and scheduled actions.

Set different target counts of an AWS Auto Scaling Group. By default, set the
desired count to COUNT. If --max or --min is given, set those counts instead.

For example:

    # get current counts
    $(basename "$0") qa jumphost

    # set desired count to 2
    $(basename "$0") qa jumphost 2

    # set max size to 4
    $(basename "$0") qa jumphost --max 2
EOM
}

# get_asg_info ASG_NAME
get_asg_info() {
    run aws autoscaling describe-auto-scaling-groups \
        --auto-scaling-group-names "$1" --output text \
        | grep "^AUTOSCALINGGROUPS"
}

# get_asg_schedule ASG_NAME
get_asg_schedule() {
    local output
    output="$(run aws autoscaling describe-scheduled-actions \
        --auto-scaling-group-name "$1" --output json)"

    # Only output JSON output if it contains at least one scheduled action
    if grep ScheduledActionName <<< "$output" >/dev/null; then
        echo "$output"
    fi
}

# print_schedule ASG_NAME
print_schedule() {
    local asg_scheduled asg_name
    asg_name="$1"
    asg_scheduled="$(get_asg_schedule "$asg_name")"

    if [ -n "$asg_scheduled" ]; then
        echo_yellow "Scheduled actions for $asg_name:"
        echo "$asg_scheduled"
    fi
}

# print_info ASG_NAME
print_info() {
    local asg_name="$1"
    local asg_info current_size max_size min_size new_size spindown_delay health_grace_period
    asg_info="$(get_asg_info "$asg_name")"

    current_size="$(cut -f 6 <<< "$asg_info")"
    max_size="$(cut -f 10 <<< "$asg_info")"
    min_size="$(cut -f 11 <<< "$asg_info")"
    health_grace_period="$(cut -f 7 <<< "$asg_info")"

    echo_blue "Current ASG capacity of $asg_name:"
    echo_blue "  desired: $current_size"
    echo_blue "  min:     $min_size"
    echo_blue "  max:     $max_size"
    echo_blue "Health check grace period: ${health_grace_period}s"
}

# set_count ASG_NAME MODE COUNT
set_count() {
    local asg_name="$1"
    local mode="$2"
    local count="$3"

    case "$mode" in
        min)
            set_min_size "$asg_name" "$count"
            ;;
        max)
            set_max_size "$asg_name" "$count"
            ;;
        desired)
            set_desired_capacity "$asg_name" "$count"
            ;;
        *)
            echo >&2 "Unknown mode $mode"
            return 3
            ;;
    esac

    echo_blue 'Done'

    echo_blue 'New size information:'

    print_schedule "$asg_name"
    print_info "$asg_name"
}

# set_desired_capacity ASG_NAME COUNT
set_desired_capacity() {
    local asg_name="$1"
    local count="$2"

    echo_blue "Setting desired capacity to $count"

    run aws autoscaling set-desired-capacity \
        --auto-scaling-group-name "$asg_name" \
        --desired-capacity "$count"
}

# set_min_size ASG_NAME COUNT
set_min_size() {
    local asg_name="$1"
    local count="$2"

    echo_blue "Setting min size to $count"

    run aws autoscaling update-auto-scaling-group \
        --auto-scaling-group-name "$asg_name" \
        --min-size "$count"
}

# set_max_size ASG_NAME COUNT
set_max_size() {
    local asg_name="$1"
    local count="$2"

    echo_blue "Setting max size to $count"

    run aws autoscaling update-auto-scaling-group \
        --auto-scaling-group-name "$asg_name" \
        --max-size "$count"
}

ASG_NAME=

if [ $# -lt 2 ]; then
    usage
    exit 1
fi

ENV="$1"
ROLE="$2"

ASG_NAME="$ENV-$ROLE"

shift 2

MODE=desired

if [ $# -eq 0 ]; then
    print_schedule "$ASG_NAME"
    print_info "$ASG_NAME"
    exit
fi

case "$1" in
    --min) MODE=min; shift ;;
    --max) MODE=max; shift ;;
    --desired) MODE=desired; shift ;;
esac

if [ $# -eq 0 ]; then
    usage
    exit 1
fi

COUNT="$1"

set_count "$ASG_NAME" "$MODE" "$COUNT"
