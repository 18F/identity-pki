// Code generated by MockGen. DO NOT EDIT.
// Source: client.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	go_gitlab "github.com/xanzy/go-gitlab"
)

// MockGitlabClientIface is a mock of GitlabClientIface interface.
type MockGitlabClientIface struct {
	ctrl     *gomock.Controller
	recorder *MockGitlabClientIfaceMockRecorder
}

// MockGitlabClientIfaceMockRecorder is the mock recorder for MockGitlabClientIface.
type MockGitlabClientIfaceMockRecorder struct {
	mock *MockGitlabClientIface
}

// NewMockGitlabClientIface creates a new mock instance.
func NewMockGitlabClientIface(ctrl *gomock.Controller) *MockGitlabClientIface {
	mock := &MockGitlabClientIface{ctrl: ctrl}
	mock.recorder = &MockGitlabClientIfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGitlabClientIface) EXPECT() *MockGitlabClientIfaceMockRecorder {
	return m.recorder
}

// AddGroupMember mocks base method.
func (m *MockGitlabClientIface) AddGroupMember(gid interface{}, opt *go_gitlab.AddGroupMemberOptions, options ...go_gitlab.RequestOptionFunc) (*go_gitlab.GroupMember, *go_gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{gid, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddGroupMember", varargs...)
	ret0, _ := ret[0].(*go_gitlab.GroupMember)
	ret1, _ := ret[1].(*go_gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// AddGroupMember indicates an expected call of AddGroupMember.
func (mr *MockGitlabClientIfaceMockRecorder) AddGroupMember(gid, opt interface{}, options ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{gid, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddGroupMember", reflect.TypeOf((*MockGitlabClientIface)(nil).AddGroupMember), varargs...)
}

// BlockUser mocks base method.
func (m *MockGitlabClientIface) BlockUser(user int, options ...go_gitlab.RequestOptionFunc) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{user}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BlockUser", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// BlockUser indicates an expected call of BlockUser.
func (mr *MockGitlabClientIfaceMockRecorder) BlockUser(user interface{}, options ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{user}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BlockUser", reflect.TypeOf((*MockGitlabClientIface)(nil).BlockUser), varargs...)
}

// CreateGroup mocks base method.
func (m *MockGitlabClientIface) CreateGroup(opt *go_gitlab.CreateGroupOptions, options ...go_gitlab.RequestOptionFunc) (*go_gitlab.Group, *go_gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateGroup", varargs...)
	ret0, _ := ret[0].(*go_gitlab.Group)
	ret1, _ := ret[1].(*go_gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateGroup indicates an expected call of CreateGroup.
func (mr *MockGitlabClientIfaceMockRecorder) CreateGroup(opt interface{}, options ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGroup", reflect.TypeOf((*MockGitlabClientIface)(nil).CreateGroup), varargs...)
}

// CreateUser mocks base method.
func (m *MockGitlabClientIface) CreateUser(opt *go_gitlab.CreateUserOptions, options ...go_gitlab.RequestOptionFunc) (*go_gitlab.User, *go_gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateUser", varargs...)
	ret0, _ := ret[0].(*go_gitlab.User)
	ret1, _ := ret[1].(*go_gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockGitlabClientIfaceMockRecorder) CreateUser(opt interface{}, options ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockGitlabClientIface)(nil).CreateUser), varargs...)
}

// DeleteGroup mocks base method.
func (m *MockGitlabClientIface) DeleteGroup(gid interface{}, options ...go_gitlab.RequestOptionFunc) (*go_gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{gid}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteGroup", varargs...)
	ret0, _ := ret[0].(*go_gitlab.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteGroup indicates an expected call of DeleteGroup.
func (mr *MockGitlabClientIfaceMockRecorder) DeleteGroup(gid interface{}, options ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{gid}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGroup", reflect.TypeOf((*MockGitlabClientIface)(nil).DeleteGroup), varargs...)
}

// DeleteSharedProjectFromGroup mocks base method.
func (m *MockGitlabClientIface) DeleteSharedProjectFromGroup(pid interface{}, groupID int, options ...go_gitlab.RequestOptionFunc) (*go_gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{pid, groupID}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteSharedProjectFromGroup", varargs...)
	ret0, _ := ret[0].(*go_gitlab.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSharedProjectFromGroup indicates an expected call of DeleteSharedProjectFromGroup.
func (mr *MockGitlabClientIfaceMockRecorder) DeleteSharedProjectFromGroup(pid, groupID interface{}, options ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{pid, groupID}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSharedProjectFromGroup", reflect.TypeOf((*MockGitlabClientIface)(nil).DeleteSharedProjectFromGroup), varargs...)
}

// ListGroupMembers mocks base method.
func (m *MockGitlabClientIface) ListGroupMembers(gid interface{}, opt *go_gitlab.ListGroupMembersOptions, options ...go_gitlab.RequestOptionFunc) ([]*go_gitlab.GroupMember, *go_gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{gid, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListGroupMembers", varargs...)
	ret0, _ := ret[0].([]*go_gitlab.GroupMember)
	ret1, _ := ret[1].(*go_gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListGroupMembers indicates an expected call of ListGroupMembers.
func (mr *MockGitlabClientIfaceMockRecorder) ListGroupMembers(gid, opt interface{}, options ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{gid, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGroupMembers", reflect.TypeOf((*MockGitlabClientIface)(nil).ListGroupMembers), varargs...)
}

// ListGroups mocks base method.
func (m *MockGitlabClientIface) ListGroups(opt *go_gitlab.ListGroupsOptions, options ...go_gitlab.RequestOptionFunc) ([]*go_gitlab.Group, *go_gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListGroups", varargs...)
	ret0, _ := ret[0].([]*go_gitlab.Group)
	ret1, _ := ret[1].(*go_gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListGroups indicates an expected call of ListGroups.
func (mr *MockGitlabClientIfaceMockRecorder) ListGroups(opt interface{}, options ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGroups", reflect.TypeOf((*MockGitlabClientIface)(nil).ListGroups), varargs...)
}

// ListProjects mocks base method.
func (m *MockGitlabClientIface) ListProjects(opt *go_gitlab.ListProjectsOptions, options ...go_gitlab.RequestOptionFunc) ([]*go_gitlab.Project, *go_gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListProjects", varargs...)
	ret0, _ := ret[0].([]*go_gitlab.Project)
	ret1, _ := ret[1].(*go_gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListProjects indicates an expected call of ListProjects.
func (mr *MockGitlabClientIfaceMockRecorder) ListProjects(opt interface{}, options ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProjects", reflect.TypeOf((*MockGitlabClientIface)(nil).ListProjects), varargs...)
}

// ListUsers mocks base method.
func (m *MockGitlabClientIface) ListUsers(opt *go_gitlab.ListUsersOptions, options ...go_gitlab.RequestOptionFunc) ([]*go_gitlab.User, *go_gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListUsers", varargs...)
	ret0, _ := ret[0].([]*go_gitlab.User)
	ret1, _ := ret[1].(*go_gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListUsers indicates an expected call of ListUsers.
func (mr *MockGitlabClientIfaceMockRecorder) ListUsers(opt interface{}, options ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUsers", reflect.TypeOf((*MockGitlabClientIface)(nil).ListUsers), varargs...)
}

// RemoveGroupMember mocks base method.
func (m *MockGitlabClientIface) RemoveGroupMember(gid interface{}, user int, options ...go_gitlab.RequestOptionFunc) (*go_gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{gid, user}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RemoveGroupMember", varargs...)
	ret0, _ := ret[0].(*go_gitlab.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveGroupMember indicates an expected call of RemoveGroupMember.
func (mr *MockGitlabClientIfaceMockRecorder) RemoveGroupMember(gid, user interface{}, options ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{gid, user}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveGroupMember", reflect.TypeOf((*MockGitlabClientIface)(nil).RemoveGroupMember), varargs...)
}

// ShareProjectWithGroup mocks base method.
func (m *MockGitlabClientIface) ShareProjectWithGroup(pid interface{}, opt *go_gitlab.ShareWithGroupOptions, options ...go_gitlab.RequestOptionFunc) (*go_gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{pid, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ShareProjectWithGroup", varargs...)
	ret0, _ := ret[0].(*go_gitlab.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ShareProjectWithGroup indicates an expected call of ShareProjectWithGroup.
func (mr *MockGitlabClientIfaceMockRecorder) ShareProjectWithGroup(pid, opt interface{}, options ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{pid, opt}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShareProjectWithGroup", reflect.TypeOf((*MockGitlabClientIface)(nil).ShareProjectWithGroup), varargs...)
}

// UnblockUser mocks base method.
func (m *MockGitlabClientIface) UnblockUser(user int, options ...go_gitlab.RequestOptionFunc) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{user}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UnblockUser", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnblockUser indicates an expected call of UnblockUser.
func (mr *MockGitlabClientIfaceMockRecorder) UnblockUser(user interface{}, options ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{user}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnblockUser", reflect.TypeOf((*MockGitlabClientIface)(nil).UnblockUser), varargs...)
}
