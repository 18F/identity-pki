#!/bin/bash

set -euo pipefail

basename="$(basename "$0")"

BASEPATH="$(dirname "$0")"
. "${BASEPATH}/lib/common.sh"
. "${BASEPATH}/lib/sandbox-lib.sh"

# Try really hard not to let anything accidentally write to stdout.
# Point stdout at stderr and open FD 3 to point to the original stdout.
# Use echo >&3 to write to stdout hereafter.

exec 3>&1 1>&2

usage() {
    cat >&2 << EOM

Usage: $basename ENV_NAME

Enables auto-tf execution for the specified sandbox environment (defaults to \$GSA_USERNAME if not specified)

-h: Show this usage information
-v: Verify the current status of the pipeline

Arguments:

    ENV_NAME:
    Environment name for the deployment, e.g. "dev", "prod", or "global".

EOM
}

man_page() {
    cat >&2 << EOM

Usage: $basename ENV_NAME

Disables auto-tf execution for the specified sandbox environment (defaults to \$GSA_USERNAME if not specified)

Arguments:

    ENV_NAME:
    Environment name for the deployment, e.g. "dev", "prod", or "global".

Options:

    -h              Display this message
    -v              Verify the current status of the pipeline
EOM
exit 0
}

1_verify_pipeline_status() {
    local isEnabled
    isEnabled=$(aws codepipeline get-pipeline-state \
        --name "auto_terraform_app_$TF_ENV" \
        | jq ".stageStates[1].inboundTransitionState.enabled")

    if ! $isEnabled
    then
        return
    else
        raise "Auto-tf is already enabled for envirnoment: $TF_ENV"
        exit 1
    fi
}

2_enable_pipeline() {
    aws codepipeline enable-stage-transition \
        --pipeline-name "auto_terraform_app_$TF_ENV" \
        --stage-name Plan --transition-type Inbound
}

TASKS=(
    "1_verify_pipeline_status"
    "2_enable_pipeline"
)

TODO=()
while getopts rvh opt; do
    case $opt in
        v) TODO+=("${TASKS[0]}") ;;
        r) TODO+=("${TASKS[1]}") ;;
        h) man_page ;;
        *) usage && exit 1 ;;
    esac
done
shift $((OPTIND-1))

verify_root_repo
verify_private_repo
verify_sandbox_env "${1:-}"

run_tasks

exit 0
