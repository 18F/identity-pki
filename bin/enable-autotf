#!/bin/bash

#### Enable auto_tf in a supported sandbox env ####

set -euo pipefail

. "$(dirname "$0")/lib/common.sh"
. "$(dirname "$0")/lib/sandbox-lib.sh"

# Try really hard not to let anything accidentally write to stdout.
# Point stdout at stderr and open FD 3 to point to the original stdout.
# Use echo >&3 to write to stdout hereafter.

exec 3>&1 1>&2

usage() {
  cat >&2 << EOM

Usage: ${0} [-ve] [ENV] (defaults to \$GSA_USERNAME if not specified)

Flags (will run all if no flags specified):
  -v : Verify inboundTransitionState.enabled of auto_tf_app_ENV in AWS CodePipeline
  -e : Enable auto_tf_app_ENV CodePipeline by enabling 'Plan' stage transition step
  -h : Display help

EOM
}

help_me() {
  cat >&2 << EOM

Enables auto-tf execution for the ENV sandbox app environment.
Defaults to \$GSA_USERNAME if not specified.
EOM
  usage
  exit 0
}

1_verify_pipeline_status() {
  local STATE
  if [[ $(STATE=$(aws codepipeline get-pipeline-state \
                  --name "auto_terraform_app_${TF_ENV}")) ]] ; then
  if [[ $(printf '%s\n' "${STATE}" | jq -r '.' |
        jq '.stageStates[1].inboundTransitionState.enabled') ]] ; then
    raise "auto-tf is already enabled for '$TF_ENV' environment"
  fi
  else
    raise "Pipeline auto_terraform_app_${TF_ENV} not found"
  fi
}

2_enable_pipeline() {
  aws codepipeline enable-stage-transition \
    --pipeline-name "auto_terraform_app_${TF_ENV}" \
    --stage-name Plan --transition-type Inbound
}

TASKS=(
  "1_verify_pipeline_status"
  "2_enable_pipeline"
)

TODO=()
while getopts veh opt; do
  case $opt in
    v) TODO+=("${TASKS[0]}") ;;
    e) TODO+=("${TASKS[1]}") ;;
    h) help_me               ;;
    *) usage && exit 1       ;;
  esac
done
shift $((OPTIND-1))

verify_root_repo
verify_private_repo
verify_sandbox_env "${1:-}"

run_tasks
