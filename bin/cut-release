#!/bin/bash

# Cut a new release, create a PR, and add the release to GitHub

set -eu

. "$(dirname "$0")/lib/common.sh"

usage() {
    cat >&2 << EOM

Usage: ${0} [NEW_VERSION] [OLD_VERSION]

Calculates the current, and next, releases, based on the contents of VERSION.txt,
and runs 'rake release' to cut a new release. Once the tags are pushed to origin,
creates both a pull request and a GitHub Release for the version update.

By default, should be run with no arguments. If a specific NEW_VERSION and/or
OLD_VERSION is desired for this script, those can be specified via the first
and second arguments, respectively. (Useful if building from a hotfix /
oddly-named version.)

EOM
}

[ $# -gt 2 ] && raise 'Must provide < 3 arguments'
verify_root_repo

if [[ ! $(brew list --formula | grep hub) ]] ; then
  brew install hub || raise "hub not installed!"
fi

#run git checkout master
#run git pull origin master

declare {MANUAL,NEW_RELEASE,NEW_VERSION_PR,BREAKING_PRS,REGULAR_PRS}=
if [[ $# -eq 0 ]] ; then
  NEW_RELEASE=$(cat VERSION.txt | sed -E 's/pre\-//')
else
  NEW_RELEASE=${1}
  MANUAL=true
fi
OLD_RELEASE=${2:-$(($(echo ${NEW_RELEASE} | sed -E 's/\..+//')-1))}

PR_LIST=$(hub pr list -b master -s merged -o updated -L 300 -f "- %i %t | %L%n" |
          sed -E 's/\| $//')

OLD_VERSION_PR=$(echo "${PR_LIST}" | grep v${OLD_RELEASE} | tr -d '\n')
[[ ${MANUAL} ]] && NEW_VERSION_PR=$(echo "${PR_LIST}" | grep v${NEW_RELEASE} | tr -d '\n')
if [[ -z ${NEW_VERSION_PR} ]] ; then
  RELEASE_PRS=$(echo "${PR_LIST}" |
    sed "/${OLD_RELEASE}/q" | sed '$d')
else
  RELEASE_PRS=$(echo "${PR_LIST}" |
     awk -v beg="$NEW_VERSION_PR" -v end="$OLD_VERSION_PR" '$0==beg{f=1} f{print; if ($0==end) exit}' |
     sed '1d;$d')
fi

if [[ $(echo "${RELEASE_PRS}" | grep BREAKING) ]] ; then
  define BREAKING_PRS <<EOM

BREAKING CHANGES:
$(echo "${RELEASE_PRS}" | grep BREAKING | sed -E 's/\(BREAKING\)| \| BREAKING//g')

REGULAR CHANGES:
EOM
fi
REGULAR_PRS=$(echo "${RELEASE_PRS}" | grep -v BREAKING)

run git checkout -b release/v${NEW_RELEASE}
run rake release
run git push origin release/v${NEW_RELEASE}
run git push origin v${NEW_RELEASE} # push w/remote tags

run ${GIT_DIR}/bin/github-pr -m "$(cat <<EOF
Release v${NEW_RELEASE}

${BREAKING_PRS}
${REGULAR_PRS}
EOF
)"

run hub release create v${NEW_RELEASE} -m "$(cat <<EOF
Release v${NEW_RELEASE}

${BREAKING_PRS}
${REGULAR_PRS}
EOF
)"
