#!/bin/bash

set -euo pipefail

declare {TF_ENV,TEST,DESTINATION,USERS,NUMUSERS,RUNTIME,SPAWNRATE}=

usage() {
    cat >&2 << EOM

Usage: ${0} [-e TF_ENV] [-d DESTINATION ] -t TEST [-u USERS] [-n NUMUSERS] [-r RUNTIME] [-s SPAWNRATE]

Directory/environment flags (optional):
  -e TF_ENV : Environment to launch the tests (defaults to \$GSA_USERNAME if not specified)
  -d DESTINATION : Environment to test against (defaults to TF_ENV if not specified)

Flags (optional):
  -t TEST      : The test you would like to run. Found under identity-loadtest.
  -u USER      : Peak number of concurrent Locust Users
  -n NUMUSERS  : Total available Locust Users
  -r RUNTIME   : Stop after the specified amount of time. (300s, 20m, 3h, 1h30m, etc.)
  -s SPAWNRATE : Rate to spawn users at (users per second.)

  -h           : Display help menu

EOM
}

while getopts e:d:t:u:n:r:s:h opt; do
    case $opt in
        e) TF_ENV="${OPTARG}"      ;;
        d) DESTINATION="${OPTARG}" ;;
        t) TEST="${OPTARG}"        ;;
        u) USERS="${OPTARG}"       ;;
        n) NUMUSERS="${OPTARG}"    ;;
        r) RUNTIME="${OPTARG}"     ;;
        s) SPAWNRATE="${OPTARG}"   ;;
        *) usage && exit 1         ;;
    esac
done
shift $((OPTIND-1))

if [[ -z ${TF_ENV} ]] ; then
    TF_ENV=${GSA_USERNAME}
fi

if [[ -z ${DESTINATION} ]] ; then
    DESTINATION=${TF_ENV}
fi

if [ -z "${DESTINATION}" ] || [ -z "${TF_ENV}" ] ; then
    echo "ERROR: Environment Variable GSA_USERNAME has not been defined."
    echo "Have you setup your local environment?"
    echo "https://github.com/18F/identity-devops/wiki/Setting-Up-your-Login.gov-Infrastructure-Configuration"
    exit 1
fi

if [[ -z ${TEST} ]] ; then
    echo "You need to select a test."
    exit 1
fi

MASTER_ASG=$(\
    aws autoscaling describe-auto-scaling-groups \
    --auto-scaling-group-name "$TF_ENV-locust-leader" \
)
WORKER_ASG=$(\
    aws autoscaling describe-auto-scaling-groups \
    --auto-scaling-group-name "$TF_ENV-locust-worker" \
)
MasterInstanceCount=$(\
    echo "$MASTER_ASG" | jq '.AutoScalingGroups[].Instances | length' \
)
WorkerInstanceCount=$(\
    echo "$WORKER_ASG" | jq '.AutoScalingGroups[].Instances | length' \
)

if [ "$MasterInstanceCount" != "1" ] ; then
    echo "You have an incorrect number of locust-leader. Try resizing the ASG"
    exit 1
fi

MASTER_INSTANCE=$(\
    echo "$MASTER_ASG" | jq -r '.AutoScalingGroups[].Instances[].InstanceId' \
)

MASTER_IP=$(\
    aws ec2 describe-instances --instance-ids "$MASTER_INSTANCE" |
    jq .Reservations[].Instances[].NetworkInterfaces[].PrivateIpAddress \
)

echo "Launching $TEST against $DESTINATION in $TF_ENV"
echo "    Worker Count: $WorkerInstanceCount"

aws ssm send-command \
    --targets Key=tag:Name,Values="asg-$TF_ENV-locust-leader" \
    --document-name "$TF_ENV-ssm-cmd-locust-leader" \
    --parameters "ENV=$DESTINATION,TEST=$TEST,USERS=${USERS:="10"},NUMUSERS=${NUMUSERS:="100"},RUNTIME=${RUNTIME:="60s"},SPAWNRATE=${SPAWNRATE:="10"}"

aws ssm send-command \
    --targets Key=tag:Name,Values="asg-$TF_ENV-locust-worker" \
    --document-name "$TF_ENV-ssm-cmd-locust-worker" \
    --parameters "MASTERIP=$MASTER_IP,ENV=$DESTINATION,TEST=$TEST,NUMUSERS=$NUMUSERS"
