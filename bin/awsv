#!/bin/bash

#### Run complex aws-vault commands with only a few flags and args ####

set -euo pipefail

. "$(dirname "$0")/lib/common.sh"

usage() {
  cat >&2 <<EOM

Usage: ${0} ACCOUNT|[-x PROFILE] CMD|[-v DUR]|[-[i]l|c SERVICE]
  - Will prompt to set \$LOGIN_IAM_PROFILE in env, if not already configured
  - Uses Google Chrome for \`login\` commands

Flags:
  -x PROFILE : Use specific profile instead of \$ACCOUNT-\$LOGIN_IAM_PROFILE
  -v [DUR]   : \`exec --no-session --duration \${DUR}h\` (defaults to 1h)
  -i         : Opens an incognito window when used with -l / -c (e.g. -il / -ic SERVICE)
  -l         : \`login\` instead of \`exec\`
  -c SERVICE : -l but redirects to https://console.aws.amazon.com/\${SERVICE}
  -h         : Display help

EOM
}

help_me() {
  cat >&2 << EOM

Execute aws-vault commands with far less typing. Automatically determines the correct
profile in your ~/.aws/config to use based on the presence of an env var,
\$LOGIN_IAM_PROFILE, which it will prompt you to set if it isn't already set in your
current shell/env.

Examples:
  ${0} sandbox CMD       -> aws-vault exec sandbox-\$LOGIN_IAM_PROFILE -- CMD
  ${0} -v 2 sms-sandbox  -> aws-vault exec sms-sandbox-\$LOGIN_IAM_PROFILE --no-session --duration 2h
  ${0} -l -x alpha-admin -> aws-vault login alpha-admin
  ${0} -ic ec2 prod      -> aws-vault login prod-\$LOGIN_IAM_PROFILE --stdout |
                            sed -E "s/%2Fconsole%2F/%2F\$SERVICE%2F/" |
                            xargs -t /Applications/Google\ Chrome.app/Contents/MacOS/Google\ Chrome -incognito
EOM
  usage
  exit 0
}

verify_profile () {
  AV_ROLE="${1}"
  if [[ ! $(grep "profile ${AV_ROLE}" ~/.aws/config) ]] ; then
    raise "Profile ${AV_ROLE} not found in ~/.aws/config ; verify the name and try again!"
  fi
}

if [[ -z $(aws-vault list --sessions) ]] || [[ $(aws-vault list --sessions |
                                                 awk -F: '{print $NF}' |
                                                 cut -c1-1) == '-' ]] ; then
  if [[ ! -z ${YKMAN_OATH_CREDENTIAL_NAME} ]] ; then
    for TEST in 'which ykman' 'ykman oath accounts list' 'echo $AWS_VAULT_PROMPT' ; do
      if [[ ! $(eval "${TEST}") ]] ; then
        raise "\`${TEST}\` failed ; verify ykman config and try again"
      fi
    done
  fi
fi

declare {AV_ROLE,SET_ROLE,SERVICE,INCOGNITO}=
DUR=1
VAULT_CMD='exec'

[ $# -eq 0 ] && raise 'Cannot be run without arguments!'

while getopts x:lc:v:ih opt
do
  case "${opt}" in
    x) SET_ROLE="${OPTARG}"                     ;;
    l) VAULT_CMD="login" && SERVICE='console'   ;;
    c) VAULT_CMD="login" && SERVICE="${OPTARG}" ;;
    v) VAULT_CMD="session" && DUR="${OPTARG}"   ;;
    i) INCOGNITO="-incognito"                   ;;
    h) help_me                                  ;;
    *) usage && exit 1                          ;;
  esac
done
shift $((OPTIND-1))

if [[ -z "${SET_ROLE}" ]] ; then
  ACCOUNT="${1}"
  shift
  [[ -z "${LOGIN_IAM_PROFILE-}" ]] && set_iam_profile
  SET_ROLE="${ACCOUNT}-${LOGIN_IAM_PROFILE}"
fi
verify_profile "${SET_ROLE}"

case "${VAULT_CMD}" in
  exec)
    run aws-vault exec ${AV_ROLE} -- "$@"
  ;;
  login)
    run aws-vault login ${AV_ROLE} --stdout |
        sed -E "s/%2Fconsole%2F/%2F${SERVICE}%2F/" |
        xargs -t /Applications/Google\ Chrome.app/Contents/MacOS/Google\ Chrome ${INCOGNITO} 2>/dev/null
  ;;
  session)
    run aws-vault exec ${AV_ROLE} --no-session --duration ${DUR}h
  ;;
esac
