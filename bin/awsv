#!/bin/bash

# Quickly run aws-vault commands

set -eu

. "$(dirname "$0")/lib/common.sh"

usage() {
  cat >&2 <<EOM

usage: $(basename "$0") [ACCOUNT]|[-x PROFILE] CMD|-v DUR|-l SERVICE

Execute aws-vault commands with far less typing. Automatically
determines the correct profile in your ~/.aws/config to use
based on the presence of an env var, \$LOGIN_IAM_PROFILE,
which it will prompt you to set if it isn't already set in your
current shell/env.

Examples:
  $(basename "$0") sandbox CMD  ==>  aws-vault exec sandbox-\$LOGIN_IAM_PROFILE -- CMD
  $(basename "$0") -v 2 prod    ==>  aws-vault exec prod-\$LOGIN_IAM_PROFILE --no-session --duration 2h
  $(basename "$0") -l sms-prod  ==>  aws-vault login sms-prod-\$LOGIN_IAM_PROFILE

Flags:
  -x PROFILE : Use a specific profile name, rather than \$ACCOUNT-\$LOGIN_IAM_PROFILE
  -v [DUR]   : Equivalent to \`--no-session --duration \${DUR}h\`.
               If DUR is not set, defaults to 1h.
  -l         : Runs \`login\` instead of \`exec\`, opening the console in a browser window.
  -c SERVICE : Same as -l but redirects to https://console.aws.amazon.com/\${SERVICE}
  -h         : Display this help

EOM
}

verify_profile () {
  AV_ROLE="${1}"
  if [[ ! $(grep "profile ${AV_ROLE}" ~/.aws/config) ]] ; then
    raise "Profile ${AV_ROLE} not found in ~/.aws/config ; verify the name and try again!"
  fi
}

if [[ -z $(aws-vault list --sessions) ]] || [[ $(aws-vault list --sessions |
                                                 awk -F: '{print $NF}' |
                                                 cut -c1-1) == '-' ]] ; then
  if [[ ! -z ${YKMAN_OATH_CREDENTIAL_NAME} ]] ; then
    for TEST in 'which ykman' 'ykman oath list' 'echo $AWS_VAULT_PROMPT' ; do
      if [[ ! $(eval "${TEST}") ]] ; then
        raise "\`${TEST}\` failed ; verify ykman config and try again"
      fi
    done
  fi
fi

declare {AV_ROLE,SET_ROLE,SERVICE,INCOGNITO}=
DUR=1
VAULT_CMD='exec'

while getopts x:lc:v:ih opt
do
  case "${opt}" in
    x)
       SET_ROLE="${OPTARG}"
    ;;
    l) 
       SERVICE='console'
       VAULT_CMD="login"
    ;;
    c)
       SERVICE="${OPTARG}"
       VAULT_CMD="login"
    ;;
    v)
      DUR="${OPTARG}"
      VAULT_CMD="session"
    ;;
    i)
      INCOGNITO="-incognito"
    ;;
    h)
      usage
      exit 0
    ;;
    *)
      usage
      exit 1
    ;;
  esac
done
shift $((OPTIND-1))

if [[ -z "${SET_ROLE}" ]] ; then
  ACCOUNT="${1}"
  shift
  [[ -z "${LOGIN_IAM_PROFILE-}" ]] && set_iam_profile
  SET_ROLE="${ACCOUNT}-${LOGIN_IAM_PROFILE}"
fi
verify_profile "${SET_ROLE}"

case "${VAULT_CMD}" in
  exec)
    run aws-vault exec ${AV_ROLE} -- "$@"
  ;;
  login)
    run aws-vault login ${AV_ROLE} --stdout |
        sed -E "s/%2Fconsole%2F/%2F${SERVICE}%2F/" |
        xargs -t /Applications/Google\ Chrome.app/Contents/MacOS/Google\ Chrome ${INCOGNITO} 2>/dev/null
  ;;
  session)
    run aws-vault exec ${AV_ROLE} --no-session --duration ${DUR}h
  ;;
esac
