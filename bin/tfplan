#!/bin/bash

#### Output a streamlined, truncated terraform plan ####

trap "PASTE=" EXIT

set -euo pipefail

. "$(dirname "$0")/lib/common.sh"

usage() {
    cat >&2 << EOM

Usage: ${0} [-m|-b|-p|-h] TF_DIR TF_ENV

Flags:
  -m : Only list specific resource(s) being changed (no additional output)
  -b : Both the full and resource-only outputs will be printed out
  -p : If using Sublime Text, pastes the command output to a new tab/window in
       Sublime Text using the subl binary; can be combined with -m / -p flags
  -h : Display help

Arguments:
  TF_DIR : Which directory under terraform/ to use (app/all/core/etc.)
           Will default to 'app' if not declared.
  TF_ENV : Which environment to use, whether account-specific or env-specific.
           Will default to 'sandbox' if not declared, or to \$GSA_USERNAME
           if TF_DIR is 'app'.

EOM
}

help_me() {
    cat >&2 << EOM

Runs 'terraform plan' via tf-deploy & processes output for easier change visibility:

1. Removes all color codes (plan -no-color & grep --color=never)
2. Extracts only the lines beginning with change symbols (- # + ~ > ->)
3. Replaces any user_data changes (normally large hashes) with a single '*' character
4. Trims off note at the end about the plan not being saved to an outfile

Examples:

${0}            -> tf-deploy GSA_USERNAME app plan
${0} core       -> tf-deploy core/sandbox plan
${0} master     -> tf-deploy master/global plan | grep -E '^ +# [a-z]'
${0} all alpha  -> tf-deploy all/alpha plan
${0} -p app int -> tf-deploy int app plan |
                                 pbcopy ; subl -b --command new_file --command paste
EOM
  usage
  exit 0
}

full_plan () {
  echo
  echo "${PLAN}" | head -n+1
  echo "${PLAN}" | grep -E '^ *[-\+\~\#]' --color=never | grep -v 'unchanged' |
  sed -E 's/^( +\# )/\n\1/;s/ +\= +/ \= /;s/ {2}/ /g'
  echo
  echo "${PLAN}" | tail -n1
}

print_plan () {
  local COMMIT_ID=$(git rev-parse --short HEAD)
  local REPO_VER=$(cat VERSION.txt)
  echo -e "##### ${TF_DIR}/${TF_ENV} | ${COMMIT_ID} | ${REPO_VER} #####"
  if [[ "${MODULES_ONLY}" == true ]] ; then
    echo -e "\nPLAN SUMMARY:\n"
    echo "${PLAN}" | grep -E '^ +# [a-z]' --color=never
    if [[ "${DUAL_OUTPUT}" == true ]] ; then
      echo
      echo "------------------------------------------------------------"
      full_plan
    fi
  else
    full_plan
  fi
}

verify_root_repo
declare {MODULES_ONLY,PASTE,DUAL_OUTPUT}=
while getopts mpbh opt
do
    case "${opt}" in
        m) MODULES_ONLY=true                     ;;
        p) PASTE=true                            ;;
        b) DUAL_OUTPUT=true && MODULES_ONLY=true ;;
        h) help_me                               ;;
        *) usage && exit 1                       ;;
    esac
done
shift $((OPTIND-1))

[ $# -gt 2 ] && raise 'Must provide <2 arguments'

TF_DIR="${1:-app}"
TF_ENV="${2:-$(echo ${GSA_USERNAME})}"

if [[ ! "${TF_DIR}" == 'app' ]] && [[ -z ${2} ]] ; then
  TF_ENV='sandbox'
fi

TF_PATH="${TF_DIR}/${TF_ENV}"
[[ "${TF_DIR}" == 'app' ]] && TF_PATH="${TF_ENV} ${TF_DIR}"

PLAN=$($(dirname "$0")/tf-deploy ${TF_PATH} plan -no-color)
[[ $? == 0 ]] || raise "Plan command unsuccessful; verify and try again"
if [[ $(echo "${PLAN}" | grep 'No changes') ]] ; then
  echo -e "\nNo changes in Terraform plan for ${TF_DIR}/${TF_ENV}.\n"
  exit 0
else
  PLAN=$(echo "${PLAN}" |
      sed -n '/^Terraform will perform the following actions\:$/,/^Plan\:/p' |
      sed -E 's/(user_data += ").*"/\1\*"/')
fi

if [[ "${PASTE}" == true ]] ; then
  echo
  if [[ $(which subl) ]] ; then
    print_plan | pbcopy ; subl -b --command new_file --command paste
  else
    echo_yellow 'subl binary not found, printing to STDOUT.'
  fi
else
  echo -e "\n $(print_plan) \n"
fi
