#!/bin/bash

#### tear down/destroy a sandbox environment ####

trap replace_db_files EXIT
set -euo pipefail

BASEPATH="$(dirname "$0")"
. "${BASEPATH}/lib/common.sh"
. "${BASEPATH}/lib/sandbox-lib.sh"

usage() {
    cat >&2 << EOM

Usage: ${0} [-ldebkxh] [ENV] (defaults to \$GSA_USERNAME if not specified)

Flags (will run all if no flags specified):
  -d : Remove deletion/prevent_destroy/final snapshot from RDS dbs via apply
  -s : Stop and delete the CloudWatch-to-S3 Kinesis Firehose stream
  -z : Zero out all \${TF_ENV} Auto Scaling Groups
  -b : Empties all S3 buckets with ENV in the bucket name
  -x : terraform-destroy + reset db .tf files
  -k : Delete all ENV-named S3 keys in secrets/app-secrets buckets
  -h : Detailed help

EOM
}

man_page() {
    cat >&2 << EOM

Usage: ${0} [-ldebkxh] [ENV]

Runs all necessary commands to prep and destroy an existing
sandbox environment, \${TF_ENV}. Designed to run with no
specified flags/arguments.

The tasks in this script can also be individually executed
using the following flags:

  -d : Remove deletion protection/prevent_destroy from RDS databases,
       and set skip_final_snapshot to true, via terraform apply
  -s : Stop and force-delete the cw-kinesis-s3 Firehose stream,
       allowing its corresponding bucket to be emptied and deleted
  -z : Set Minimum, Desired, and Maximum numbers for all
       Auto Scaling Groups in \${TF_ENV} to 0
  -b : Empties all S3 buckets with \${TF_ENV} in the bucket name,
       and deletes all object versions as well.
  -x : Run \`terraform destroy -auto-approve\` against the
       environment, skipping the attempt to send a message to Slack.
  -k : Delete all S3 keys in the secrets/app-secrets buckets that
       have \${TF_ENV} in their name.
  -h : Displays this help

This script will default to using \${GSA_USERNAME} for the
value of \${TF_ENV}, unless a different one is specified
as a final argument.

EOM
  exit 0
}

replace_db_files() {
  for DB in idp app worker; do
    FILE="${APP_DIR}/${DB}.tf"
    [[ -f "${FILE}.bak" ]] && run mv ${FILE}.bak ${FILE}
  done
}

1_allow_db_destroy() {
  for DB in idp app worker ; do
    cp ${APP_DIR}/${DB}.tf ${APP_DIR}/${DB}.tf.bak
    for TASK in prevent_destroy deletion_protection ; do
      sed -i '' -E "s/(${TASK} = )true/\1false/g" ${APP_DIR}/${DB}.tf
    done
    sed -i '' -E 's/#(skip_final_snapshot = true)/\1/g' ${APP_DIR}/${DB}.tf
  done

  ave ${BASEPATH}/tf-deploy -t ${TF_ENV} app apply -auto-approve
}

2_stop_kinesis_stream() {
  local CW_S3_STREAM="cw-kinesis-s3-${TF_ENV}-us-west-2"

  if [[ $(ave aws firehose describe-delivery-stream \
          --delivery-stream-name "${CW_S3_STREAM}" \
          --query 'DeliveryStreamDescription.DeliveryStreamStatus' \
          --output text) == "ACTIVE" ]] ; then
    ave aws firehose delete-delivery-stream \
     --delivery-stream-name "${CW_S3_STREAM}" \
     --allow-force-delete
  fi
  sleep 5
  while [[ $(ave aws firehose describe-delivery-stream \
          --delivery-stream-name "${CW_S3_STREAM}" \
          --query 'DeliveryStreamDescription.DeliveryStreamStatus' \
          --output text) == "DELETING" ]] ; do
    sleep 5
  done
}

3_zero_out_asgs() {
  for ASG in $(ave aws autoscaling describe-auto-scaling-groups \
    --query 'AutoScalingGroups[*].AutoScalingGroupName' |
    jq -r '.[]' | grep ${TF_ENV}) ; do
    ave aws autoscaling update-auto-scaling-group \
      --auto-scaling-group-name ${ASG} \
      --min-size 0 --desired-capacity 0 --max-size 0 
  done
}

4_empty_buckets() {
  boto3_check
  for BUCKET in $(ave aws s3 ls |grep ${TF_ENV} | awk '{print $NF}' | sort -r); do
    ave aws s3 rm s3://${BUCKET} --recursive
    ave python -c "import boto3 ;\
      session = boto3.Session() ;\
      s3 = session.resource(service_name='s3') ;\
      bucket = s3.Bucket('${BUCKET}') ;\
      bucket.object_versions.delete()"
  done
}

5_tf_destroy() {
  ave ${BASEPATH}/tf-deploy -t ${TF_ENV} app destroy -auto-approve
  replace_db_files
}

6_delete_env_keys() {
  for BUCKET in $(ave aws s3 ls | grep 'secrets.' | awk '{print $NF}') ; do
    ave aws s3api delete-objects \
        --bucket ${BUCKET} \
        --delete "$(ave aws s3api list-object-versions \
        --bucket ${BUCKET} \
        --output=json \
        --query='{Objects: Versions[].{Key:Key,VersionId:VersionId}}' |
    jq --arg name "${TF_ENV}" '{Objects:[.[][]|
      select(.Key|contains($name))|{Key, VersionId}],Quiet: false}')"
  done
}

TASKS=(
  "1_allow_db_destroy"
  "2_stop_kinesis_stream"
  "3_zero_out_asgs"
  "4_empty_buckets"
  "5_tf_destroy"
  "6_delete_env_keys"
)

TODO=()
while getopts dszbxkh opt
do
  case $opt in
    d) TODO+=("${TASKS[0]}") ;;
    s) TODO+=("${TASKS[1]}") ;;
    z) TODO+=("${TASKS[2]}") ;;
    b) TODO+=("${TASKS[3]}") ;;
    x) TODO+=("${TASKS[4]}") ;;
    k) TODO+=("${TASKS[5]}") ;;
    h) man_page              ;;
    *) usage && exit 1       ;;
  esac
done
shift $((OPTIND-1))
initialize ${1:-}

run_tasks
