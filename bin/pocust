#!/bin/bash

# Gather Locust data and information about the running environment to
# allow later analysis of logs, versions, etc.

# TODO - Implement pipeline load testing with much better automatic
#        data collection!  This is primitive.

# Strictish mode
set -euo pipefail

. "$(dirname "$0")/lib/common.sh"

# Collect loadtest repo info for identifying version of test suite

usage () {
    cat >&2 <<EOM
usage: $0 RUN_NAME ENVIRONMENT

RUN_NAME      - Slugified (no spaces!) name for test run.  Example:
                sign_in-w1-c500-n1000
ENVIRONMENT   - pt, pt2, etc

This script will save data into ~/<ENVIRONMENT>-<RUN_NAME>-<TIMESTAMP> on on your
local machine.

Example:  $0 sign_in-w14-c1000 pt

Gathers:
* List of instances
* Deployed Terraform version
* Git SHAs for repos on the oldest and newest IdP
* SHA256 of application.yml and the S3 sourced application.yml
* Locust CSV output (*The most recent 3 CSVs are selected, so
  ensure you run this BEFORE a new test is started on the Locust master)

NOTE - Requires an active AWS STS session with access to the requested
environment
EOM
}

if [ $# -lt 2 ]; then
    usage
    exit 1
fi

TS=$(date -u +%Y%m%d%H%M%S)
RUN_NAME=${1}
ENV=${2}
ODIR="${HOME}/${RUN_NAME}-${ENV}-${TS}"

echo "Creating ${ODIR}"
mkdir "${ODIR}"

echo "Getting full instance list"
bin/ls-servers -q -b -e "${ENV}" > "${ODIR}/running-instances.tab"

echo "Getting running IdP instance list with health status"
bin/ls-servers -q -b -e "${ENV}" -r idp > "${ODIR}/running-idp-health.tab"

IDPTOP=$(cat "${ODIR}/running-idp-health.tab" | egrep '^i-' | head -1 | awk '{ print $1 }')

if [ -z "${IDPTOP}" ]; then
    # Thought - Could cleanup directory here, but don't want to presume
    # it is unwanted.  Left to the user.
    raise "Failed to find IdP instance - Aborting"
fi

echo "Footprinting IDP Instance ${IDPTOP}"
IDP_FOOTPRINT=$(
aws ssm send-command \
    --instance-ids "${IDPTOP}" \
    --document-name "${ENV}-ssm-cmd-idp-footprint" |
    jq -r '.Command.CommandId')

LEADER_ID=$(\
    aws autoscaling describe-auto-scaling-groups \
    --auto-scaling-group-name "$ENV-locust-leader" |
    jq -r '.AutoScalingGroups[].Instances[].InstanceId'
)

echo "Footprinting Locust Leader ${LEADER_ID}"
LEADER_FOOTPRINT=$(
aws ssm send-command \
    --targets "Key=tag:Name,Values=asg-${ENV}-locust-leader" \
    --document-name "${ENV}-ssm-cmd-locust-leader-footprint" |
    jq -r '.Command.CommandId'
)

echo "Getting applied terraform/app version"
bin/deploy/get-version-info.sh ${ENV} > "${ODIR}/terraform-app-version.txt"

aws ssm wait command-executed \
    --command-id "$IDP_FOOTPRINT" \
    --instance-id "$IDPTOP"

aws ssm wait command-executed \
    --command-id "$LEADER_FOOTPRINT" \
    --instance-id "$LEADER_ID"

echo "Gathering data from Transfer Utility"
#aws s3 cp \
#    s3://login-gov.transfer-utility.$(aws sts get-caller-identity | jq -r '.Account')-us-west-2/${ENV}/out/pocust/ \
#    "${ODIR}/ --recursive"

aws s3 cp \
    "s3://login-gov.transfer-utility.$(\
    aws sts get-caller-identity |
    jq -r '.Account')-us-west-2/$ENV/out/pocust/" \
    "${ODIR}/" --recursive

echo "Done!  Now send ${ODIR} to a good place"
