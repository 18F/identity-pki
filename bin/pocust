#!/bin/bash

# Gather Locust data and information about the running environment to
# allow later analysis of logs, versions, etc.

# TODO - Implement pipeline load testing with much better automatic
#        data collection!  This is primitive.

# Strictish mode
set -euo pipefail

# List of Git repos to check SHAs in for each IdP instance
IDPREPOS="identity-devops identity-devops-private identity-idp"

# Files to fingerprint
IDPFILES="/srv/idp/current/config/application_s3_env.yml /srv/idp/current/config/application.yml"

# Collect loadtest repo info for identifying version of test suite
LMREPOS="identity-loadtest"

raise() {
  echo -e "\nERROR: $* \n" >&2
  usage
  exit 1
}

usage () {
  cat >&2 <<EOM
usage: $0 [RUN_NAME] [ENVIRONMENT] [LOCUST_MASTER]

RUN_NAME      - Slugified (no spaces!) name for test run.  Example:
                sign_up-14worker-10client
ENVIRONMENT   - pt, pt2, etc
LOCUST_MASTER - Instance name of where Locust master was during the
                test.
                
This script will save data into ~/<ENVIRONMENT>-<RUN_NAME>-<TIMESTAMP> on on your
local machine.

Example:  $0 sign_in-14w-1000c pt i-0eeb2eb0e831795fe

Gathers:
* List of instances
* Deployed Terraform version
* Git SHAs for repos on the oldest and newest IdP
* SHA256 of application.yml and the S3 sourced application.yml
* Locust CSV output (*The most recent 3 CSVs are selected, so
  ensure you run this BEFORE a new test is started on the Locust master)

NOTE - Requires an active AWS STS session with access to the requested
environment
EOM
}

# Yoinked from https://stackoverflow.com/a/8088167
define(){ IFS='\n' read -r -d '' ${1} || true; }

if [ $# -ne 3 ]; then
  usage
  exit 1
fi

TS=`date +%Y%m%d%H%M%S`
RUN_NAME=${1}
ENV=${2}
LOCUST_MASTER=${3}
ODIR="${HOME}/${ENV}-${RUN_NAME}-${TS}"


define IDPSCRIPT <<EOM
echo "# Repositories" > ~/\${HOSTNAME}-pocust.txt
for r in ${IDPREPOS}; do
  cd /etc/login.gov/repos/\$r
  echo -n "\${r}: " >> ~/\${HOSTNAME}-pocust.txt
  git describe --always --tags >> ~/\${HOSTNAME}-pocust.txt
done
echo "# Configurations" >> ~/\${HOSTNAME}-pocust.txt
for f in ${IDPFILES}; do
  sudo sha256sum --tag "\$f" >> ~/\${HOSTNAME}-pocust.txt
done
EOM

define LMSCRIPT <<EOM
rm -rf ~/pocust
mkdir ~/pocust
echo "# Repositories" > ~/pocust/\${HOSTNAME}-pocust.txt
for r in ${LMREPOS}; do
  cd /etc/login.gov/repos/\$r
  echo -n "\${r}: " >> ~/pocust/\${HOSTNAME}-pocust.txt
  git describe --always --tags >> ~/pocust/\${HOSTNAME}-pocust.txt
done
# Collect last three locust output files
for i in \`find /var/log/loadtest/ -name "*.csv" | tail -3\`; do cp "\${i}" ~/pocust/; done
EOM

echo "Creating ${ODIR}"
mkdir "${ODIR}"

echo "Getting full instance list"
bin/ls-servers -q -b -e ${ENV} > "${ODIR}/running-instances.tab"

grep -q ${LOCUST_MASTER} "${ODIR}/running-instances.tab" || \
  raise "${LOCUST_MASTER} not found in running instances"

echo "Getting running IdP instance list with health status"
bin/ls-servers -q -b -e ${ENV} -r idp > "${ODIR}/running-idp-health.tab"

IDPTOP=$(cat "${ODIR}/running-idp-health.tab" | egrep '^i-' | head -1 | awk '{ print $1 }')

if [ -x "${IDPTOP}" ]; then
  # Thought - Could cleanup directory here, but don't want to presume
  # it is unwanted.  Left to the user.
  raise "Failed to find IdP instance - Aborting"
fi

echo "Footprinting ${IDPTOP}"
bin/ssh-instance ${IDPTOP} "${IDPSCRIPT}"

echo "Gathering data from ${IDPTOP}"
bin/scp-instance ${IDPTOP}:~/*-pocust.txt "${ODIR}/"

echo "Footprinting ${LOCUST_MASTER}"
bin/ssh-instance ${LOCUST_MASTER} "${LMSCRIPT}"

echo "Gatherning data from ${LOCUST_MASTER}"
bin/scp-instance ${LOCUST_MASTER}:~/pocust/* "${ODIR}/"

echo "Cleaning up ${LOCUST_MASTER}"
bin/ssh-instance ${LOCUST_MASTER} "rm -rf ~/pocust"

echo "Getting applied terraform-app version"
bin/get-version-info.sh ${ENV} > "${ODIR}/terraform-app-version.txt"

echo "Done!  Now send ${ODIR} to a good place"
