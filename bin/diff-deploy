#!/bin/bash

set -euo pipefail

# shellcheck source=/dev/null
. "$(dirname "$0")/lib/common.sh"

usage() {
    cat >&2 <<EOM
usage: $(basename "$0") [OPTIONS] ENVIRONMENT TERRAFORM_DIR [PLAN_OPTIONS...]

Run deploy to show a terraform plan. Interactively prompt the user whether this
plan looks good, and if it does, run the plan exactly as shown.

Any PLAN_OPTIONS will be passed directly to terraform plan.

OPTIONS:
    -h, --help        Print this help message
    -l, --landscape   Use the landscape gem to print a pretty diff
EOM
}

echo_basename() {
    echo_blue >&2 "$BASENAME: $*"
}

landscape_plan=

while [ $# -gt 0 ] && [[ $1 == -* ]]; do
    case "$1" in
        -h|--help)
            usage
            exit
            ;;
        -l|--landscape)
            landscape_plan=1
            ;;
        *)
            echo_red "error: unknown option '$1'"
            exit 1
            ;;
    esac
    shift
done

if [ $# -lt 2 ]; then
    usage
    exit 1
fi

environment="$1"
terraform_dir="$2"

shift 2

repo_root_before_cd="$(git rev-parse --show-toplevel 2>/dev/null || true)"

BASENAME="$(basename "$0")"
cd "$(dirname "$0")"

# Since we just changed directory to where diff-deploy is, the user can be
# surprised when diff-deploy from their path is different from the
# identity-devops checkout from their cwd. Prompt to confirm if the git repo
# after cd is different because this is probably not what they intended.
repo_root_after_cd="$(git rev-parse --show-toplevel)"
if [ -n "$repo_root_before_cd" ] \
    && [ -e "$repo_root_before_cd/bin/$BASENAME" ] \
    && [ "$repo_root_before_cd" != "$repo_root_after_cd" ]
then
    echo_yellow >&2 "WARNING: your cwd is in a different directory than $BASENAME.
Are you sure you didn't mean to run ./bin/$BASENAME instead?
Repo root from your cwd:   $repo_root_before_cd
Repo root for $BASENAME: $repo_root_after_cd"
    prompt_yn
fi

run bundle check

cleanup() {
    run rm -r -- "$tmpdir"
}

run_deploy() {
    run ../deploy "$environment" "$terraform_dir" "$@"
}

diff_deploy_with_landscape() {
    tmpdir="$(mktemp -d)"
    trap cleanup EXIT

    echo_basename "Running terraform plan"

    plan_path="$tmpdir/$environment.tfplan"
    run_deploy plan -out "$plan_path" "$@"

    echo >&2

    plan_text="$(run terraform show "$plan_path")"
    if [[ "$plan_text" == "This plan does nothing." ]]; then
        echo "$plan_text"
        echo_basename "Nothing to do!"
        exit
    fi

    echo >&2
    echo_color_horizontal_rule blue >&2
    echo >&2
    echo_blue >&2 "Pretty diff with terraform_landscape:"
    echo >&2

    run bundle exec landscape <<< "$plan_text"

    echo >&2
    echo_blue >&2 "Terraform plan complete. Check whether the above plan looks good."

    if ! prompt_yn "Proceed to run terraform apply?"; then
        echo_blue "OK, aborting"
        exit 1
    fi

    echo_basename "Running terraform apply"

    ID_SKIP_LOADING_VARS=1 run_deploy apply "$plan_path"
}

diff_deploy_with_interactive_apply() {
    echo_basename "Running interactive terraform apply"

    run_deploy apply -auto-approve=false "$@"
}

if [ -n "$landscape_plan" ]; then
    diff_deploy_with_landscape "$@"
else
    diff_deploy_with_interactive_apply "$@"
fi

echo >&2
echo_basename "All done!"
