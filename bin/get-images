#!/bin/bash

# Power tool set for AMI data

set -euo pipefail

. "$(dirname "$0")/lib/common.sh"

usage() {
  cat >&2 << EOM

Usage: ${0} [-uospbr]

Flags (will run all if no flags specified):
  -u : Update \`ami_id\` values in \`terraform/app/variables.tf\`
  -o : Create \`ami/DATE\` branch + open a PR with \`ami_id\` changes
  -s : Update \`login-sandbox\` AMIs
  -p : Update \`login-prod\` AMIs
  -b : update \`base\` AMIs
  -r : update \`rails\` AMIs
  -h : Detailed help

EOM
}

man_page() {
    cat >&2 << EOM
Usage: ${0} [-uospbr]

Obtains information (ID / date / type / description) on
the most recent AMIs in each account (\`sandbox\` / \`prod\`)
that were generated via the terraform/imagebuild deployment
infrastructure (i.e. CodeBuild / CodePipeline), then updates
the corresponding values in \`terraform/app/variables.tf\`,
and creates a branch/pull request with the new AMI IDs.

Designed to run with no specified flags/arguments; however,
individual commands/parameters for the script can be specified
with the following flags:

  -u : Update \`ami_id\` values in \`terraform/app/variables.tf\`
  -o : Create a new branch, \`ami/DATE\` branch, commit the
       changes to \`terraform/app/variables.tf\`, and open a
       PR with the generated table data for the body
  -s : Only update the \`login-sandbox\` AMI IDs
  -p : Only update the \`login-prod\` AMI IDs
  -b : Only update the \`base\` AMI IDs
  -r : Only update the \`rails\` AMI IDs
  -h : Display this help

The script will error out if:
- there is an active \`\$AWS_VAULT\` session running (as it needs access
  to multiple AWS profiles to get the AMI IDs)
- the \`hub\` cask is not installed (for creating a PR)
- if, when attempting to create a PR, there are other local changes besides
  the updates to \`terraform/app/variables.tf\`

Example output:

| AMI                    | Date                 | Account  | Description       | 
| -----                  | -----                | -----    | -----             | 
| ami-06caaf2dfa83c916a  | 2020-07-26 07:34:42  | sandbox  | rails-1595747102  | 
| ami-0d7fa0b06192e40be  | 2020-07-26 07:26:07  | sandbox  | base-1595747084   | 
| ami-08f2f56c85f56615f  | 2020-07-21 18:25:58  | prod     | rails-1595344038  | 
| ami-0a37be06240f1d943  | 2020-07-21 18:20:19  | prod     | rails-1595344038  | 

EOM
}

# parse space/tab-separated column output and space with pipe marks
mdout() {
  echo -e "|$@|" | column -t | tr -s ' ' '|' |
  sed 's/ *| */@| /g' | column -s '@' -t
}

get_ami_info() {
  for PROFILE in ${PROFILE_LIST} ; do
    echo -e "\nGetting \`login-${PROFILE}\` AMI data..."
    PIPELINE_AMIS=()
    AV_PROFILE=$(get_profile_name $(get_acct_num ${PROFILE}))

    for TYPE in ${TYPE_LIST} ; do
      BUILD=$(ave aws codebuild list-builds-for-project \
              --project login-image-${TYPE} | jq -r '.ids[0]' | awk -F: '{print $NF}')
      PIPELINE_AMIS+=($(aws-vault exec ${AV_PROFILE} -- aws cloudtrail lookup-events \
                        --lookup-attributes AttributeKey=EventName,AttributeValue=CreateImage |
                        jq -r --arg build "$BUILD" '.Events[].CloudTrailEvent|
                          fromjson|
                          select(.userIdentity.arn|
                          contains($build)).responseElements.imageId'))
    done
    DATA+=$(echo -e "\n$(ave aws ec2 describe-images \
                --image-ids $(echo "${PIPELINE_AMIS[*]}") \
                --query 'Images[*].[ImageId,CreationDate,Name]' \
                --output text | sort -rk2 | head -n 2 |
                sed -E "s/login\.gov (base|rails) (role )?hardened (base )?image Ubuntu 18\.04 /$PROFILE \1\-/g" |
                sed -E "s/([0-9\:]+)\.000Z/\1/g" |
                sed -E 's/^/\|/g;s/$/\|/g')\n")
  done
  NUM_COLS=$(echo "${DATA[@]}" | awk '{print NF}' | sort -nu | tail -n 1)
  echo
  echo_green "AMI data generated:"
  echo
  mdout "${HEADERS}\n$(echo "|$(printf "%${NUM_COLS}s" |
         sed 's/ /----- |/g')")\n${DATA}" | tr 'T' ' '
}

update_vars() {
  echo -e "\nUpdating values in \`terraform/app/variables.tf\`..."
  [[ ${#DATA[@]} -eq 0 ]] && get_ami_info
  for LINE in $(echo "${DATA[@]}" | tail -n +2 | tr -d '|' |
                awk '{print $1"+"$2"+"$3"+"$4}') ; do
    AMI_ID=$(echo ${LINE} | awk -F+ '{print $1}')
    AMI_DATE=$(echo ${LINE} | awk -F+ '{print $2}' | sed -E 's/([0-9-]+)T.+/\1/')
    AMI_ACCT=$(echo ${LINE} | awk -F+ '{print $3}')
    AMI_TYPE=$(echo ${LINE} | awk -F+ '{print $4}' | sed -E 's/([a-z]+).+/\1/')
    [[ ${AMI_TYPE} == "base" ]] && AMI_TYPE='default'
    sed -i '' -E "/\"${AMI_TYPE}_ami_id_${AMI_ACCT}\"/{n;s/ami-[0-9a-f]{17}\" \# [0-9-]{10}/${AMI_ID}\" \# ${AMI_DATE}/;}" terraform/app/variables.tf
    [[ $(git diff -U0 | grep ${AMI_ID}) ]] && echo_green "Updated \`${AMI_TYPE}_ami_id_${AMI_ACCT}\` to \`${AMI_ID}\`."
  done
  echo
}

open_pr() {
  DIFF_COUNT=$(git diff --numstat | awk '{print $1}')
  if [[ ${DIFF_COUNT} != 4 ]] ; then
    raise "4 lines should be changed for an AMI update PR; ${DIFF_COUNT} lines changed instead. Verify and try again."
  fi
  
  [[ ${#DATA[@]} -eq 0 ]] && get_ami_info
  if [[ ! $(brew list --formula | grep hub) ]] ; then
    brew install hub || raise "hub not installed!"
  fi
  AMI_BRANCH="ami/$(date -j '+%Y%m%d')"
  echo -e "\nCreating \`${AMI_BRANCH}\` branch + opening pull request..."
  PR_TITLE="AMI update, $(date -j '+%Y-%m-%d')"
  gh_revs
  run git checkout main
  run git pull origin main
  run git checkout -b ${AMI_BRANCH}
  run git add --all
  run git commit -m \"'${PR_TITLE}'\"
  run git push --set-upstream origin ${AMI_BRANCH}
  hub pull-request -p -r "${GH_REVS}" -e -m "$(cat <<EOF
${PR_TITLE}

$(mdout "${HEADERS}\n$(echo "|$(printf "%${NUM_COLS}s" | sed 's/ /----- |/g')")\n${DATA}" | tr 'T' ' ')


EOF
)"
}

##### main script

if [[ $(env | grep 'AWS_VAULT=') ]] ; then
  raise "Cannot run with an active AWS_VAULT session; clear the session and try again!"
fi

verify_root_repo

PROFILE_LIST='sandbox prod'
TYPE_LIST='base rails'
TASK_LIST='update open'
HEADERS="|AMI Date Account Description|"
BUILD_BRANCH=
DATA=()

while getopts uospbrh opt
do
  case $opt in
    u) TASK_LIST='update'     ;;
    o) TASK_LIST='open'       ;;
    s) PROFILE_LIST='sandbox' ;;
    p) PROFILE_LIST='prod'    ;;
    b) TYPE_LIST='base'       ;;
    r) TYPE_LIST='rails'      ;;
    h) man_page               ;;
    *) usage && exit 1        ;;
  esac
done
shift $((OPTIND-1))

if [[ "${TASK_LIST}" =~ (open) ]] ; then
  if ! [[ -z $(git diff --name-only | grep -v 'terraform/app/variables.tf') ]] ; then
    raise "Cannot create PR; additional changes found outside of terraform/app/variables.tf file."
  fi
fi

get_ami_info
for TASK in ${TASK_LIST} ; do
  case "${TASK}" in
    update) update_vars  ;;
    open)   open_pr      ;;
  esac
done
