#!/bin/bash

# Power tool set for AMI data

set -eu

. "$(dirname "$0")/lib/common.sh"

PROFILE_LIST='sandbox prod'
HEADERS="|AMI Date Account Description|"
DATA=()

usage() {
    cat >&2 << EOM
Usage: ${0} [-c|-u|-o]

Runs \`aws ec2 describe-images\` in both the sandbox and prod
accounts, and outputs a Markdown-formatted table containing
information about the last-created AMIs for each type
in each account. If the \`prod\` AMIs are older than the most
recent \`sandbox\` AMIs, will prompt to create new \`prod\` AMIs
using \`copy-image.sh\` and \`share-image.sh\`, and then will
regenerate the table.

After (re)generating the table, it will prompt to:

1. Update the \`ami_id\` values in \`terraform/app/variables.tf\`
2. Create a PR with the newly-updated PR values (after checking
out \`master\` first)

To run only 1 of the specified options, use one of the
following flags:

  -c | --create-amis : Create new \`prod\` AMIs
  -u | --update-amis : Update \`ami_id\` values in \`terraform/app/variables.tf\`
  -o | --open-pr     : Open a PR with the new \`ami_id\` values
  -h | --help)       : Display this usage info

The script will error out if:
- there is an active \`\$AWS_VAULT\` session running (as it needs access
  to multiple AWS profiles to get the AMI IDs)
- the \`hub\` cask is not installed
- if, when attempting to create a PR, there are other local changes besides
  the updates to \`terraform/app/variables.tf\`

Example output:

| AMI                    | Date                 | Account  | Description       | 
| -----                  | -----                | -----    | -----             | 
| ami-06caaf2dfa83c916a  | 2020-07-26 07:34:42  | sandbox  | rails-1595747102  | 
| ami-0d7fa0b06192e40be  | 2020-07-26 07:26:07  | sandbox  | base-1595747084   | 
| ami-08f2f56c85f56615f  | 2020-07-21 18:25:58  | prod     | rails-1595344038  | 
| ami-0a37be06240f1d943  | 2020-07-21 18:20:19  | prod     | rails-1595344038  | 

EOM
}
# parse space/tab-separated column output and space with pipe marks
mdout() {
  echo -e "|$@|" | column -t | tr -s ' ' '|' |
  sed 's/ *| */@| /g' | column -s '@' -t
}

get_ami_info() {
  echo -e "\nLooking up current AMIs in \`login-sandbox\` and \`login-prod\`...\n"
  for PROFILE in $PROFILE_LIST ; do
    ACCOUNT=$(grep "# login-${PROFILE}" "${GIT_DIR}/terraform/master/global/main.tf" | sed -E 's/^.*\"([0-9]+)\".*$/\1/')
    AV_PROFILE=$(get_profile_name ${ACCOUNT})
    DATA+=$(echo -e "\n$(run_av aws ec2 describe-images \
                --owners self \
                --query 'Images[*].[ImageId,CreationDate,Name]' \
                --output text | sort -rk2 | head -n 2 |
                sed -E "s/login\.gov (base|rails) (role )?hardened (base )?image Ubuntu 18\.04 /$PROFILE \1\-/g" |
                sed -E "s/([0-9\:]+)\.000Z/\1/g" |
                sed -E 's/^/\|/g;s/$/\|/g')\n")
  done
  NUM_COLS=$(echo "${DATA[@]}" | awk '{print NF}' | sort -nu | tail -n 1)
  echo
  mdout "${HEADERS}\n$(echo "|$(printf "%${NUM_COLS}s" |
         sed 's/ /----- |/g')")\n${DATA}" | tr 'T' ' '
  echo
}

get_ami_dates() {
  echo "$DATA[@]" | tail -n+2 | awk '{print $3,$2}' | awk -F'T' '{print $1}' | uniq
}

create_prod_amis() {
 if prompt_yn "Create new \`prod\` AMIs using \`copy-image\` and \`share-image\` ?" ; then
   for ROLE in base rails ; do
     for PROFILE in prod sandbox ; do
       ACCOUNT=$(grep "# login-${PROFILE}" "${GIT_DIR}/terraform/master/global/main.tf" | sed -E 's/^.*\"([0-9]+)\".*$/\1/')
       AV_PROFILE=$(get_profile_name ${ACCOUNT})
       if [[ ${PROFILE} == "prod" ]] ; then
         run_av ${GIT_DIR}/bin/copy-image.sh --role ${ROLE}
       elif [[ ${PROFILE} == "sandbox" ]] ; then
         run_av ${GIT_DIR}/bin/share-image.sh --role ${ROLE}
       fi
     done
   done
   echo -e "\nNew \`prod\` AMIs created! Updating current AMI table...\n"
   DATA=()
   get_ami_info
 fi
}

update_ami_ids() {
  if prompt_yn "Update AMI values in terraform/app/variables.tf ?" ; then
    echo
    [[ ${#DATA[@]} -eq 0 ]] && get_ami_info
    for LINE in $(echo "${DATA[@]}" | tail -n +2 | tr -d '|' |
                  awk '{print $1"+"$2"+"$3"+"$4}') ; do
      AMI_ID=$(echo ${LINE} | awk -F+ '{print $1}')
      AMI_DATE=$(echo ${LINE} | awk -F+ '{print $2}' | sed -E 's/([0-9-]+)T.+/\1/')
      AMI_ACCT=$(echo ${LINE} | awk -F+ '{print $3}')
      AMI_TYPE=$(echo ${LINE} | awk -F+ '{print $4}' | sed -E 's/([a-z]+).+/\1/')
      [[ ${AMI_TYPE} == "base" ]] && AMI_TYPE='default'
      sed -i '' -E "/\"${AMI_TYPE}_ami_id_${AMI_ACCT}\"/{n;s/ami-[0-9a-f]{17}\" \# [0-9-]{10}/${AMI_ID}\" \# ${AMI_DATE}/;}" terraform/app/variables.tf
      [[ $(git diff -U0 | grep ${AMI_ID}) ]] && echo "Updated \`${AMI_TYPE}_ami_id_${AMI_ACCT}\` to \`${AMI_ID}\`."
    done
    echo
  fi
}

open_ami_pr() {
  if prompt_yn "Create a PR for the AMI updates?" ; then
    echo
    [[ ${#DATA[@]} -eq 0 ]] && get_ami_info
    DIFF_COUNT=$(git diff --numstat | awk '{print $1}')
    if [[ ${DIFF_COUNT} != 4 ]] ; then
      echo "4 lines should be changed for an AMI update; found ${DIFF_COUNT} changed lines instead. Verify and try again."
      exit 0
    fi
    if [[ ! $(brew list | grep hub) ]] ; then
      brew install hub || raise "hub not installed!"
    fi
  
    run git checkout master
    run git pull origin master
    run git checkout -b "ami/$(date -j '+%Y%m%d')" && \
    run ${GIT_DIR}/bin/github-pr -pm "$(cat <<EOF
AMI update, $(date -j '+%Y-%m-%d')

$(mdout "${HEADERS}\n$(echo "|$(printf "%${NUM_COLS}s" | sed 's/ /----- |/g')")\n${DATA}" | tr 'T' ' ')


EOF
)"
  fi
  echo
}

[ $# -gt 1 ] && raise 'Must provide 1 argument only'
verify_root_repo

if [[ $(env | grep 'AWS_VAULT=') ]] ; then
  raise "Cannot run with an active AWS_VAULT session; clear the session and try again!"
fi

while [[ "$#" -gt 0 ]]; do
  case "${1}" in
    -c|--create-amis) create_prod_amis && exit 0 ;;
    -u|--update-amis) update_ami_ids && exit 0   ;;
    -o|--open-pr)     open_ami_pr && exit 0      ;;
    -h|--help)        usage && exit 0            ;;
    *) raise "Unknown parameter passed: ${1}"    ;;
  esac
  shift
done

get_ami_info

if [[ $(get_ami_dates | wc -l | tr -d ' ') == 2 ]] ; then
  SANDBOX_DATE="$(get_ami_dates | head -n 1 | awk '{print $2}')-00:00:00"
  PROD_DATE="$(get_ami_dates | tail -n 1 | awk '{print $2}')-00:00:00"
  if [[ $(date -jf "%Y-%m-%d-%T" $SANDBOX_DATE +%s) > $(date -jf "%Y-%m-%d-%T" $PROD_DATE +%s) ]] ; then
    echo -e "\nDetected \`prod\` AMIs are older than detected \`sandbox\` AMIs:\n"
    get_ami_dates
    echo
    create_prod_amis
  fi
fi

update_ami_ids

open_ami_pr

echo
