#!/bin/bash

#### Grab AMI data and build a PR with it! ####

set -euo pipefail

. "$(dirname "$0")/lib/common.sh"

usage() {
  cat >&2 << EOM

Usage: ${0} [-luogh]
Requires access to FullAdministrator role for account(s) polled for image changes!

Flags (will run all if no flags specified):
  -l : Show AMI data output table only
  -u : Update ami_id Terraform vars in appropriate .tf files
  -o : Create ami/DATE branch + open a PR with ami_id changes
  -h : Detailed help

Limit AMI selection via:
  -t TYPE    : Only look up \$TYPE AMIs ('base' or 'rails')
  -r REGION  : Only look up AMIs in \$REGION ('us-west-2' or 'us-east-1')
  -a ACCOUNT : Only look up AMIs in \$ACCOUNT ('sandbox', 'prod',  or 'tooling-prod')

EOM
}

help_me() {
  cat >&2 << EOM

Looks up the most recent base / rails AMIs built from the 'main' branch, in each
account and each region where Terraform variables are used to set AMI IDs
(sandbox/prod/tooling-prod), then:

1. Prints a table showing account/ID/date/type/OS version/region for all AMIs
2. Updates the corresponding values in the appropriate .tf file(s), i.e.
   terraform/app/variables.tf and terraform/gitlab/production/main.tf
3. Creates a branch/pull request with the new AMI IDs

While designed to be run without arguments, flags can be used to specify which of
the above steps to perform, and/or to limit the lookup and/or update operations to
a specific account, region, and/or AMI type.

The script will error out if:
- there is an active \$AWS_VAULT session running
- the person running the script does not have FullAdministrator access
- the \`hub\` cask is not installed (for creating a PR)
- when attempting to create a PR, there are other local changes besides the updates
  to terraform/app/variables.tf and terraform/gitlab/*/main.tf

Example output:

| ACCOUNT      | ID                    | DATE       | ROLE  | VERSION      | REGION    | 
| -----        | -----                 | -----      | ----- | -----        | -----     | 
| sandbox      | ami-0a67129cb56cc10d2 | 2023-07-27 | base  | Ubuntu 20.04 | us-west-2 | 
| sandbox      | ami-08feaa1be7d8d01c7 | 2023-07-27 | rails | Ubuntu 20.04 | us-west-2 | 
| sandbox      | ami-080d1de6e34256a5a | 2023-07-27 | base  | Ubuntu 20.04 | us-east-1 | 
| sandbox      | ami-0f64a6e871baf482f | 2023-07-27 | rails | Ubuntu 20.04 | us-east-1 | 
| prod         | ami-058ca41a84ae6f822 | 2023-07-27 | base  | Ubuntu 20.04 | us-west-2 | 
| prod         | ami-0c29ceb2e5e0317cb | 2023-07-28 | rails | Ubuntu 20.04 | us-west-2 | 
| tooling-prod | ami-0b9e84d755f061467 | 2023-07-28 | base  | Ubuntu 20.04 | us-west-2 | 

EOM
  usage
  exit 0
}

get_ami_info() {
  for TF_ACCT in "${TF_ACCTS[@]}" ; do
    echo "Getting login-${TF_ACCT} AMI data..."
    get_iam 'imagebuild' "${TF_ACCT}" 'FullAdministrator'

    if [[ "${TF_ACCT}" == "tooling-prod" ]] ; then
      AV_REGIONS=('us-west-2')
      AMI_TYPES=('base')
    fi

    for AV_REGION in "${AV_REGIONS[@]}" ; do

      AMI_DATA=$(ave -r aws ec2 describe-images --region ${AV_REGION} \
        --filters "Name=tag:Branch_Name,Values=main" --owners self |
        jq --arg REGION "${AV_REGION}" --arg ACCT "${TF_ACCT}" '[.Images[]|
        select(.Tags != null)|{Account:$ACCT,ID:.ImageId,Date:.CreationDate|
        sub("T.+$";""),Role:.Tags[]|select(.Key == "Role").Value,Version:.Tags[]|
        select(.Key == "OS_Version").Value|sub(" ";"-"),Region:$REGION}]|sort_by(.Date)')

      for AMI_TYPE in "${AMI_TYPES[@]}" ; do
        if [[ $(echo $AMI_DATA | jq '.[]') != "" ]] ; then
          AMI_INFO=$(echo ${AMI_DATA} | jq -r --arg ROLE "${AMI_TYPE}" \
          '[.[]|select(.Role == $ROLE)]|.[-1:][]|[.Account,.ID,.Date,.Role,.Version,.Region]|@tsv' |
          sed -E 's/^/\|/g;s/$/\|/g')
          DATA+=$(echo -e "\n${AMI_INFO}\n")
          
          AMI_CREATE_DATE=$(echo "${AMI_INFO}" | awk '{print $3}' | tr -d '-')
          DATE_DIFF=$((${TODAY_DATE} - ${AMI_CREATE_DATE}))
          if [[ ${DATE_DIFF} -gt 0 ]] ; then
            BAD_IMAGE_DATA+=("${TF_ACCT}/${AMI_TYPE}/${DATE_DIFF}")
          fi
        fi
      done
    done
  done
}

data_table() {
  NUM_COLS=$(echo "${DATA[@]}" | sed -E 's/\| \|/\|\n\|/g' | awk '{print NF}' | sort -nu | tail -n 1)
  HEADERS="|ACCOUNT ID DATE ROLE VERSION REGION|"
  echo
  echo_cyan "$(mdout "${HEADERS}\n$(echo "|$(printf "%${NUM_COLS}s" |
           sed 's/ /----- |/g')")\n$(echo "${DATA[@]}" | sed -E 's/\| +\|/\|\n\|/g')" |
      sed -E 's/(Ubuntu)-/\1 /g')"
  echo
  
  if [[ ${#BAD_IMAGE_DATA[@]} -gt 0 ]] ; then
    echo_yellow "One or more AMIs built from 'main' is >1 day old:"
    echo
    for BAD_ACCT in "${BAD_IMAGE_DATA[@]}" ; do
      ACCT_INFO=($(echo ${BAD_ACCT} | tr '/' ' '))
      echo "login-${ACCT_INFO[0]} : ${ACCT_INFO[1]} : ${ACCT_INFO[2]} day(s)"
    done
    echo
    echo_yellow "This suggests that one or more pipelines may be failing to build correctly."
    echo_yellow "Verify status of the associated pipeline(s) before creating an AMI PR!"
    echo
    if [[ "${TASK_LIST[@]}" =~ 'open' ]] ; then exit 0 ; fi
  fi
}

update_vars() {
  echo -e "\nUpdating values in .tf file(s)...\n"
  local UPDATES=('FILE:TERRAFORM@VAR:NEW@VALUE' '-----:-----:-----')
  [[ ${#DATA[@]} -eq 0 ]] && get_ami_info
  for LINE in $(echo "${DATA[@]}" | tr -d '|' | sed -E 's/\t+/\+/g') ; do
    AMI_ACCT=$(echo ${LINE} | awk -F+ '{print $1}')
    AMI_ID=$(echo ${LINE} | awk -F+ '{print $2}')
    AMI_DATE=$(echo ${LINE} | awk -F+ '{print $3}')
    AMI_TYPE=$(echo ${LINE} | awk -F+ '{print $4}')
    UBUNTU_VERSION=$(echo ${LINE} | awk -F+ '{print $5}' | sed -E 's/(Ubuntu)-/\1 /g')
    AMI_REGION=$(echo ${LINE} | awk -F+ '{print $6}' | sed -E 's/([a-z0-9])[a-z0-9]+\-/\1/g')

    if [[ "${AMI_ACCT}" =~ 'tooling' ]]; then
      AMI_VAR="default_ami_id"
    else
      AMI_VAR="${AMI_TYPE}_ami_${AMI_ACCT}_${AMI_REGION}"
    fi
    AMI_STRING="${AMI_ID}\" # ${AMI_DATE} ${UBUNTU_VERSION}"

    TF_VARS_PATHS=()
    if [[ "${AMI_ACCT}" == "tooling-prod" ]] ; then
      TF_VARS_PATHS+=('terraform/gitlab/production/main.tf')
    else
      TF_VARS_PATHS+=('terraform/app/variables.tf')
    fi

    for VAR_PATH in "${TF_VARS_PATHS[@]:-}" ; do
      if [[ "${VAR_PATH}" =~ 'app' ]] ; then
        sed -i '' -E "/\"${AMI_VAR}\"/{n;s/\ami.+/${AMI_STRING}/;}" \
        "${GIT_DIR}/${VAR_PATH}"
      else
        sed -i '' -E "s/ami-.+/${AMI_STRING}/" "${GIT_DIR}/${VAR_PATH}"
      fi
      if [[ $(git diff -U0 | grep ${AMI_ID}) ]] && [[ $(git diff --name-only | grep "${VAR_PATH}" ) ]]; then
        UPDATES+=("${VAR_PATH}:${AMI_VAR%-*}:${AMI_ID}")
        ((UPDATED_VARS++))
      fi
      if [[ ! "${AMI_FILES[@]:-}" =~ ${VAR_PATH} ]] ; then
        AMI_FILES+=(${VAR_PATH})
      fi
    done
  done
  if [[ ${UPDATED_VARS} == 0 ]] ; then
    echo_yellow "All values in file(s) are up to date; no changes necessary."
  else
    echo_green "$(echo ${UPDATES[@]} | tr ' ' '\n' | column -t -s ':' | tr '@' ' ')"
  fi
  echo
}

open_pr() {
  local DIFF=($(git diff --name-only))
  local UNSCOPED=$(echo "${DIFF[@]}" "${AMI_FILES[@]:-}" | tr ' ' '\n' | sort | uniq -u)
  if [[ ! -z "${UNSCOPED}" ]] ; then
    echo_red "Additional files found in diff:"
    for FILE in "${UNSCOPED}" ; do
      echo_red "- ${FILE}"
    done
    echo
    raise "Verify changed files and try again."
  fi
  
  [[ ${#DATA[@]} -eq 0 ]] && get_ami_info
  if [[ ! $(brew list --formula | grep hub) ]] ; then
    brew install hub || raise "hub not installed!"
  fi
  AMI_BRANCH="ami/$(date -j '+%Y%m%d')"
  echo -e "\nCreating ${AMI_BRANCH} branch + opening pull request..."
  PR_TITLE="AMI update, $(date -j '+%Y-%m-%d')"
  gh_revs
  run git checkout main
  run git pull origin main
  run git checkout -b ${AMI_BRANCH}
  run git add --all
  run git commit -m "${PR_TITLE}"
  run git push --set-upstream origin ${AMI_BRANCH}
  run hub pull-request -p -r "${GH_REVS}" -e -m "$(cat <<EOF
${PR_TITLE}

$(mdout "${HEADERS}\n$(echo "|$(printf "%${NUM_COLS}s" |
           sed 's/ /----- |/g')")\n$(echo "${DATA[@]}" | sed -E 's/\| +\|/\|\n\|/g')" |
      sed -E 's/(Ubuntu)-/\1 /g')


EOF
)"
}

verify_day() {
  local DATE_MATH="-v-0d"
  if [[ $(date -uj '+%d') -gt $(date -j '+%d') ]] ; then
    DATE_MATH="-v-1d"
  fi
  TODAY_DATE=$(date -uj "${DATE_MATH}" '+%Y%m%d')
}

##### main script

if [[ $(env | grep 'AWS_VAULT=') ]] ; then
  raise "Cannot run with an active AWS_VAULT session; clear the session and try again!"
fi

verify_root_repo

declare {AWS_PROFILE,AV_PROFILE,TODAY_DATE}=
DATA=()
BAD_IMAGE_DATA=()
AMI_FILES=()
UPDATED_VARS=0
HEADERS="|ACCOUNT ID DATE ROLE VERSION REGION|"

TASK_LIST=('list' 'update' 'open')
TF_ACCTS=('sandbox' 'prod' 'tooling-prod')
AV_REGIONS=('us-west-2' 'us-east-1')
AMI_TYPES=('base' 'rails')

while getopts t:r:a:luoh OPT ; do
  case "$OPT" in
    t) AMI_TYPES=("${OPTARG}")     ;;
    r) AV_REGIONS=("${OPTARG}")    ;;
    a) TF_ACCTS=("${OPTARG}")      ;;
    l) TASK_LIST=('list')          ;;
    u) TASK_LIST=('list' 'update') ;;
    o) TASK_LIST=('list' 'open')   ;;
    h) help_me                     ;;
    *) usage && exit 1 ;;
  esac
done
shift $((OPTIND-1))

echo
verify_day
get_ami_info

for TASK in "${TASK_LIST[@]}" ; do
  case "${TASK}" in
    list)   data_table  ;;
    update) update_vars ;;
    open)   open_pr     ;;
  esac
done
echo
