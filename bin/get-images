#!/bin/bash

# Power tool set for AMI data

set -eu

. "$(dirname "$0")/lib/common.sh"

usage() {
    cat >&2 << EOM
Usage: ${0} [-c|-u|-o|-b BASE_SANDBOX_AMI|-r RAILS_SANDBOX_AMI]

1. Runs \`aws ec2 describe-images\` in both the sandbox and prod
accounts, and outputs a Markdown-formatted table containing
information about the last-created AMIs for each type
in each account.
2. For the \`sandbox\` account, will look up the
most recently-completed login-image CodeBuild jobs and will
grab the IDs of the generated AMIs from those.
3. If the \`prod\` AMIs are older than the most
recent \`sandbox\` AMIs, will prompt to create new \`prod\` AMIs
using \`copy-image.sh\` and \`share-image.sh\`, and then will
regenerate the table.

After (re)generating the table, it will prompt to:

1. Update the \`ami_id\` values in \`terraform/app/variables.tf\`
2. Create a PR with the newly-updated PR values (after checking
out \`main\` first)

To run only 1 of the specified options, use one of the
following flags:

  -c | --create-amis : Create new \`prod\` AMIs
  -u | --update-amis : Update \`ami_id\` values in \`terraform/app/variables.tf\`
  -o | --open-pr     : Open a PR with the new \`ami_id\` values
  -h | --help)       : Display this usage info

If you have custom \`sandbox\` AMI IDs you want this script to use as
the basis for, those can be specified thusly:

  -b | --base-ami BASE_AMI_ID
  -r | --rails-ami RAILS_AMI_ID

(If only one is specified, the script will look up the other in CodeBuild
as per its original operation.)

The script will error out if:
- there is an active \`\$AWS_VAULT\` session running (as it needs access
  to multiple AWS profiles to get the AMI IDs)
- the \`hub\` cask is not installed
- if, when attempting to create a PR, there are other local changes besides
  the updates to \`terraform/app/variables.tf\`

Example output:

| AMI                    | Date                 | Account  | Description       | 
| -----                  | -----                | -----    | -----             | 
| ami-06caaf2dfa83c916a  | 2020-07-26 07:34:42  | sandbox  | rails-1595747102  | 
| ami-0d7fa0b06192e40be  | 2020-07-26 07:26:07  | sandbox  | base-1595747084   | 
| ami-08f2f56c85f56615f  | 2020-07-21 18:25:58  | prod     | rails-1595344038  | 
| ami-0a37be06240f1d943  | 2020-07-21 18:20:19  | prod     | rails-1595344038  | 

EOM
}

# parse space/tab-separated column output and space with pipe marks
mdout() {
  echo -e "|$@|" | column -t | tr -s ' ' '|' |
  sed 's/ *| */@| /g' | column -s '@' -t
}

get_ami_info() {
  for PROFILE in ${PROFILE_LIST} ; do
    echo "Generating \`login-${PROFILE}\` AMI data..."
    PIPELINE_AMIS=()
    ACCOUNT=$(get_acct_num ${PROFILE})
    AV_PROFILE=$(get_profile_name ${ACCOUNT})
    
    for TYPE in ${TYPE_LIST} ; do
      BUILD=$(run_av aws codebuild list-builds-for-project \
              --project login-image-${TYPE} | jq -r '.ids[0]' | awk -F: '{print $NF}')
      PIPELINE_AMIS+=($(run_av aws cloudtrail lookup-events --lookup-attributes AttributeKey=EventName,AttributeValue=CreateImage |
                jq -r --arg build "$BUILD" '.Events[].CloudTrailEvent|
                  fromjson|
                  select(.userIdentity.arn|
                  contains($build)).responseElements.imageId'))
    done
    DATA+=$(echo -e "\n$(run_av aws ec2 describe-images \
                --image-ids $(echo "${PIPELINE_AMIS[*]}") \
                --query 'Images[*].[ImageId,CreationDate,Name]' \
                --output text | sort -rk2 | head -n 2 |
                sed -E "s/login\.gov (base|rails) (role )?hardened (base )?image Ubuntu 18\.04 /$PROFILE \1\-/g" |
                sed -E "s/([0-9\:]+)\.000Z/\1/g" |
                sed -E 's/^/\|/g;s/$/\|/g')\n")
  done
  NUM_COLS=$(echo "${DATA[@]}" | awk '{print NF}' | sort -nu | tail -n 1)
  echo
  mdout "${HEADERS}\n$(echo "|$(printf "%${NUM_COLS}s" |
         sed 's/ /----- |/g')")\n${DATA}" | tr 'T' ' '
  echo
}

create_amis() {
  echo "Ready to build new AMI(s) for:"
  for PROFILE in ${PROFILE_LIST} ; do
    for TYPE in ${TYPE_LIST} ; do
      echo_cyan "- ${PROFILE}-${TYPE}"
    done
  done
  if prompt_yn "Continue ?" ; then
    for PROFILE in ${PROFILE_LIST} ; do
      ACCOUNT=$(get_acct_num ${PROFILE})
      AV_PROFILE=$(get_profile_name ${ACCOUNT})
      for TYPE in ${TYPE_LIST} ; do
        PIPELINE=$(run_av aws codepipeline list-pipelines |
                        jq -r '.pipelines[].name' | grep -i ${TYPE})
        if [[ -z ${PIPELINE} ]] ; then
          echo_yellow "No pipeline found for \`${TYPE}\`-role AMIs in \`login-${PROFILE}\`; skipping."
        else
          run_av aws codepipeline start-pipeline-execution --name ${PIPELINE}
          echo_green "${PIPELINE} execution started in \`login-${PROFILE}\`!"
          echo "Check the AWS CodePipeline/CodeBuild console for build progress."
        fi
      done
    done
  fi
  exit 0
}

build_branch() {
  for PROFILE in ${PROFILE_LIST} ; do
    echo "Updating the source branch for CodeBuild/CodePipeline in \`login-${PROFILE}\` to \`${BUILD_BRANCH}\`."
    if prompt_yn "Continue?" ; then
      $(dirname "$0")/td -d imagebuild -e ${PROFILE} -at "var 'code_branch=jp/${BUILD_BRANCH}'"
    fi
  done
  create_amis
}

update_vars() {
  echo
  [[ ${#DATA[@]} -eq 0 ]] && get_ami_info
  for LINE in $(echo "${DATA[@]}" | tail -n +2 | tr -d '|' |
                awk '{print $1"+"$2"+"$3"+"$4}') ; do
    AMI_ID=$(echo ${LINE} | awk -F+ '{print $1}')
    AMI_DATE=$(echo ${LINE} | awk -F+ '{print $2}' | sed -E 's/([0-9-]+)T.+/\1/')
    AMI_ACCT=$(echo ${LINE} | awk -F+ '{print $3}')
    AMI_TYPE=$(echo ${LINE} | awk -F+ '{print $4}' | sed -E 's/([a-z]+).+/\1/')
    [[ ${AMI_TYPE} == "base" ]] && AMI_TYPE='default'
    sed -i '' -E "/\"${AMI_TYPE}_ami_id_${AMI_ACCT}\"/{n;s/ami-[0-9a-f]{17}\" \# [0-9-]{10}/${AMI_ID}\" \# ${AMI_DATE}/;}" terraform/app/variables.tf
    [[ $(git diff -U0 | grep ${AMI_ID}) ]] && echo "Updated \`${AMI_TYPE}_ami_id_${AMI_ACCT}\` to \`${AMI_ID}\`."
  done
  echo
}

open_pr() {
  [[ ${#DATA[@]} -eq 0 ]] && get_ami_info
  DIFF_COUNT=$(git diff --numstat | awk '{print $1}')
  if [[ ${DIFF_COUNT} != 4 ]] ; then
    echo "4 lines should be changed for an AMI update; found ${DIFF_COUNT} changed lines instead. Verify and try again."
    exit 0
  fi
  if [[ ! $(brew list --formula | grep hub) ]] ; then
    brew install hub || raise "hub not installed!"
  fi
 
  run git checkout main
  run git pull origin main
  run git checkout -b "ami/$(date -j '+%Y%m%d')" && \
  run ${GIT_DIR}/bin/github-pr -pm "$(cat <<EOF
AMI update, $(date -j '+%Y-%m-%d')

$(mdout "${HEADERS}\n$(echo "|$(printf "%${NUM_COLS}s" | sed 's/ /----- |/g')")\n${DATA}" | tr 'T' ' ')


EOF
)"
}

##### main script

verify_root_repo

PROFILE_LIST='sandbox prod'
TYPE_LIST='base rails'
TASK_LIST='update open'
HEADERS="|AMI Date Account Description|"
BUILD_BRANCH='main'
DATA=()

while getopts b:cuoa:t:h opt
do
  case $opt in
    b) 
       BUILD_BRANCH="${OPTARG}"
       build_branch
    ;;
    c) create_amis              ;;
    u) TASK_LIST='update'       ;;
    o) TASK_LIST='open'         ;;
    a) PROFILE_LIST="${OPTARG}" ;;
    t) TYPE_LIST="${OPTARG}"    ;;
    h) man_page                 ;;
    *) usage && exit 1          ;;
  esac
done
shift $((OPTIND-1))

if ! [[ "${PROFILE_LIST}" =~ (sandbox|prod) ]] ; then
  raise "Cannot update vars/open a PR for new AMI IDs in non-core accounts!"
fi

get_ami_info
for TASK in ${TASK_LIST} ; do
  case "${TASK}" in
    update) update_vars  ;;
    open)   open_pr      ;;
  esac
done
