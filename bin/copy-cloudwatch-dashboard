#!/usr/bin/env ruby

require 'aws-sdk-cloudwatch'
require 'json'
require 'optparse'

BASENAME = File.basename($0)
BANNER_TEXT = <<-EOM
usage: #{BASENAME} [OPTIONS]

Copy an expiremental dashboard source into a terraform file

For example:
  #{BASENAME} -in jmhooper-sample-dashbaord

  #{BASENAME} -in jmhooper-sample-dashbaord -out sample-dashboard.tf

  #{BASENAME} -in jmhooper-sample-dashbaord -out sample-dashboard.tf -name sample-dashboard

EOM

options = {}
optparse = OptionParser.new do |opts|
  opts.banner = BANNER_TEXT

  opts.on('-h', '--help', 'Display this message') do
    STDERR.puts opts
    exit
  end

  opts.on('-i', '--in INPUT_DASHBOARD', 'Input dashboard name') do |value|
    options[:input_dashboard] = value
  end

  opts.on('-o', '--out OUTPUT_FILE', 'Output terraform file') do |value|
    options[:output_file] = value
  end

  opts.on('-n', '--name DASHBOARD_NAME', 'Override dashboard name') do |value|
    options[:dashboard_name] = value
  end
end
optparse.parse!

input_dashboard = options[:input_dashboard]
if input_dashboard.nil?
  warn optparse.help
  raise OptionParser::MissingArgument, 'no input dashboard provided'
end

def output_file_from_input(input_dashboard)
  'cloudwatch-' + input_dashboard.gsub(/^[A-Za-z]+-/, '') + '.tf'
end

def dashboard_name_from_input(input_dashboard)
  input_dashboard.gsub(/^[A-Za-z]+-/, '')
end

output_file = options[:output_file] || output_file_from_input(input_dashboard)
dashboard_name = options[:dashboard_name] || dashboard_name_from_input(input_dashboard)

sandbox_dashboard = Aws::CloudWatch::Client.new.get_dashboard(dashboard_name: input_dashboard)
dashboard_source = JSON.parse(sandbox_dashboard.dashboard_body)

terraform_output = <<-TERRAFORM_OUTPUT
module "dashboard" {
  source = "../modules/cloudwatch_dashboard"

  dashboard_name = #{JSON.generate(dashboard_name)}

  region = var.region

  env_name = var.env_name

  # Uncomment this to add an "SP" filter to the dashboard.
  # For this to work, you need to add the following filter to _all_ relevant queries in your dashboard:
  #
  #   | filter ispresent(properties.service_provider) or not ispresent(properties.service_provider)")
  #
  # filter_sps = var.idp_dashboard_filter_sps

  # dashboard_definition contains the _RAW_ JSON exported from the Cloudwatch UI.
  # The AWS region and environment names will be replaced with the correct values during terraform apply.
  dashboard_definition = #{JSON.pretty_generate(dashboard_source)}
}
TERRAFORM_OUTPUT

output_path = "terraform/app/#{output_file}"

File.write(output_path, terraform_output)

system("terraform", "fmt", output_path)

puts "#{output_path} written and formatted"
