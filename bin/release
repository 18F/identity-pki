#!/usr/bin/env ruby
require 'active_support/all'
require 'optparse'
require 'pathname'


options = {}
OptionParser.new do |opts|
  opts.banner = "Usage: #{$0} [options]"

  opts.on("-v", "--[no-]verbose", "Run verbosely") do |f|
    options[:verbose] = f
  end

  opts.on("-n", "--dry-run", "Do a dry run") do |f|
    options[:dry_run] = f
  end

  opts.on("-e", "--env ENVIRONMENT", "Environment") do |env|
    options[:env] = env
  end
end.parse!

# path to your application root.
APP_ROOT = Pathname.new File.expand_path("../../",  __FILE__)

date = Date.parse("Thursday")
delta = date > Date.today ? 0 : 7
RELEASE_DATE = (date + delta).strftime('%Y-%m-%d')
RC_BRANCH = "stages/rc-#{RELEASE_DATE}"

DRY_RUN = options[:dry_run]

def run(command)
  if DRY_RUN
    puts "* #{command}"
  else
    abort "command failed (#{$?}): #{command}" unless system command
  end
end

def safe_to_run(command)
  abort "command failed (#{$?}): #{command}" unless system command
end
  

def create_new_rc_branch_and_push_to_github
  puts "==> This script will perform all of the following:"
  puts "1. Checkout a new RC branch based on stages/int"
  puts "2. Merge master into the RC branch"
  puts "3. Push the RC branch to stages/int on GitHub"
  puts "4. Publish the wiki page for the RC"

  print "Are you sure you want to proceed? (Type 'yes' to proceed, or anything else to abort) "
  answer = gets
  abort "==> You have chosen to abort the script." unless answer == "yes\n"

  puts "==> Checking out master and pulling latest changes"
  run "git checkout master && git pull"

  if `git branch`.include?('stages/int')
    puts "==> Checking out stages/int and pulling latest changes"
    run "git checkout stages/int && git pull"
  else
    puts "==> Checking out new stages/int branch and pulling down origin/stages/int"
    run "git checkout -b stages/int origin/stages/int"
  end

  unless `git branch`.include?(RC_BRANCH)
    puts "==> Checking out RC branch for release to prod 3 days from today"
    run "git checkout -b #{RC_BRANCH}"

    puts "==> Merging master into RC branch"
    run "git merge master"

    puts "==> Pushing RC branch to GitHub"
    run "git push origin #{RC_BRANCH}"
  end
end

def remove_login_dot_gov_dir
  Dir.chdir ENV['HOME'] do
    puts "===> Removing ~/login-dot-gov"
    safe_to_run "rm -rf login-dot-gov"
  end
end

def publish_wiki_page_for_new_rc
  Dir.chdir ENV['HOME'] do
    puts "==> Cloning identity-private.wiki repo into ~/login-dot-gov/identity-private.wiki"
    safe_to_run "mkdir login-dot-gov"
    Dir.chdir "#{ENV['HOME']}/login-dot-gov" do
      safe_to_run "git clone git@github.com:18F/identity-private.wiki"
    end
  end

  Dir.chdir "#{ENV['HOME']}/login-dot-gov/identity-private.wiki" do
    rc_commit = `git log --grep="#{RC_BRANCH}" --oneline`
    unless rc_commit.include?(RC_BRANCH)
      puts "==> Generating the wiki page for the RC"
      run "./scripts/generate-release --release-date=#{RELEASE_DATE}"
      puts "==> Pushing the wiki page to GitHub"
      run "git add ."
      run "git commit -m \"Add page for #{RC_BRANCH}\""
      run "git push origin master"
    end
  end

  remove_login_dot_gov_dir
end

def clone_identity_devops_repo
  Dir.chdir ENV['HOME'] do
    puts "==> Cloning identity-devops repo into ~/login-dot-gov/identity-devops"
    safe_to_run "mkdir login-dot-gov"
    Dir.chdir "#{ENV['HOME']}/login-dot-gov" do
      safe_to_run "git clone git@github.com:18F/identity-devops.git"
      Dir.chdir "identity-devops" do
        safe_to_run "bundle install"
      end
    end
  end
end

def deploy_to_int
  clone_identity_devops_repo

  Dir.chdir "#{ENV['HOME']}/login-dot-gov/identity-devops" do
    puts "Deploying the `stages/int` branch to the `int` environment"
    ENV['AWS_PROFILE'] = 'identitysandbox.gov'
    run "bin/asg-recycle int pivcac"
  end

  remove_login_dot_gov_dir
end

def deploy_to_staging
  clone_identity_devops_repo

  Dir.chdir "#{ENV['HOME']}/login-dot-gov/identity-devops" do
    puts "Deploying the `stages/staging` branch to the `staging` environment"
    ENV['AWS_PROFILE'] = 'login.gov'
    run "bin/asg-recycle staging pivcac"
  end

  remove_login_dot_gov_dir
end

def deploy_to_prod
  clone_identity_devops_repo

  Dir.chdir "#{ENV['HOME']}/login-dot-gov/identity-devops" do
    puts "Deploying the `stages/prod` branch to the `prod` environment"
    ENV['AWS_PROFILE'] = 'login.gov'
    run "bin/asg-recycle prod pivcac"
  end

  remove_login_dot_gov_dir
end

def open_pr_for_int
  run "brew install hub" if `brew list -1 | grep -Fx hub`.empty?
  run "hub pull-request -m \"Deploy #{RC_BRANCH} to int\" -b stages/int"
end

Dir.chdir APP_ROOT do
  puts %q[
   _             _
  | |           (_)
  | | ___   __ _ _ _ __    __ _  _____   __
  | |/ _ \ / _` | | '_ \  / _` |/ _ \ \ / /
  | | (_) | (_| | | | | || (_| | (_) \ V /
  |_|\___/ \__, |_|_| |_(_)__, |\___/ \_/
            __/ |          __/ |
           |___/          |___/
  ]

  case options[:env]
    when 'int'
      deploy_to_int
    when 'staging'
      deploy_to_staging
    when 'prod'
      deploy_to_prod
    else
      create_new_rc_branch_and_push_to_github
      publish_wiki_page_for_new_rc
      open_pr_for_int
  end
end
