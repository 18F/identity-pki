#!/usr/bin/env ruby
# frozen_string_literal: true

require 'optparse'
require 'yaml'
require 'terminal-table'
require 'colorized_string'

Dir.chdir(File.dirname(__FILE__)) { require 'bundler/setup' }
require_relative '../cloudlib/lib/cloudlib'

class DriftAppS3Secret
  Config = Struct.new(
    :remote_file,
    :app,
    :envs,
    keyword_init: true,
  )

  def run(argv)
    config = parse!(argv)

    bucket = Cloudlib::S3::load_bucket!

    contents = config.envs.map do |env|
      YAML.load(
        s3_client.get_object(
          bucket: bucket,
          key: Cloudlib::S3.app_secret_path(
            env: env,
            app: config.app,
            remote_file: config.remote_file,
          )
        ).body.read
      )['production']
    end

    all_keys = contents.flat_map(&:keys).uniq.sort
    rows = []
    rows << ['key', *config.envs]
    rows << :separator

    all_keys.each do |key|
      values = contents.map do |content|
        color_code(
          first_value: contents.first[key],
          current_value: content[key],
          display_value: redact(content[key]),
        )
      end

      rows << [key, *values]
    end

    puts Terminal::Table.new(rows: rows)
  end

  def color_code(first_value:, current_value:, display_value:)
    color = if first_value && current_value.nil?
      :red
    elsif first_value.nil? && current_value
      :green
    elsif first_value != current_value
      :yellow
    else
      :default
    end

    ColorizedString[display_value].colorize(color)
  end

  def redact(value)
    case value
    when true, false, 'true', 'false', Numeric, /\A\d+(\.\d+)?\Z/
      value.to_s
    when String
      if value.length > 6
        num_dots = [(value.length - 6), 3].min
        "#{value[0..2]}#{'.' * num_dots}#{value[-3..-1]}"
      else
        value # TODO: is there anything actually secret shorter than 6 chars?
      end
    when nil
      '(null)'
    else
      "UNKNOWN VALUE #{value.class}"
    end
  end

  # @return [Config]
  def parse!(argv)
    config = Config.new(envs: [])

    optparse = OptionParser.new do |opts|
      opts.banner = <<-EOM
usage: #{basename} [OPTIONS]

Compare values in secrets in S3 across environments

Colors (compared to first environment)
  * default/black: same value
  * red: removed value
  * green: added value
  * yellow: changed value

Example:

    #{basename} --app idp --env int,dev

      EOM

      opts.on('-h', '--help', 'Display this message') do
        STDERR.puts opts
        exit
      end

      opts.on('--remote-file REMOTE_FILE', 'Specify remote filename, defaults to application.yml') do |val|
        config.remote_file = val
      end

      opts.on('-a', '--app APP', 'Specify APP (required)') do |val|
        config.app = val
      end

      opts.on('-e', '--env', '--environments ENV1,ENV2', Array, 'Specify environments to compare (required)') do |val|
        config.envs += Array(val)
      end
    end

    command = optparse.order(argv)

    # Default arguments
    config.remote_file ||= 'application.yml'

    if config.envs.empty?
      STDERR.puts optparse
      STDERR.puts "\n#{basename}: missing environments"
      exit 1
    end

    if !config.app
      STDERR.puts optparse
      STDERR.puts "\n#{basename}: missing app"
      exit 1
    end

    config
  end

  def basename
    File.basename($PROGRAM_NAME)
  end

  def s3_client
    @s3_client ||= Aws::S3::Client.new
  end
end

if __FILE__ == $PROGRAM_NAME
  DriftAppS3Secret.new.run(ARGV)
end
