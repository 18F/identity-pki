#!/bin/bash

#### Update Terraform provider plugins (and Terraform itself, if desired) ####

trap revert_versions EXIT

set -euo pipefail

. "$(dirname "$0")/lib/common.sh"

usage() {
    cat >&2 << EOM

Usage: ${0} [-t|-h] [PROVIDER1 PROVIDER2 ...]
  - If provided, will only update the providers whose names are specified
    as arguments (e.g. 'aws', 'github', etc.) rather than the full list.

Flags:
  -t : Skip checking to see if an update to Terraform is available
  -h : Display help

EOM
}

help_me() {
    cat >&2 << EOM

Updates all providers found in versions.tf via 'terraform providers lock', updating
that file and .terraform.lock.hcl for the full repo. Creates a new lockfile within
terraform/master/global and replaces the repo-wide lockfile with the newly-created one.

Will also check to see if the currently-running version of Terraform is the most
up-to-date, and (upon approval) will run terraform-switch.sh, update the
required_version in versions.tf, and add the new version to the KNOWN_TF_VERSIONS
variable in bin/lib/common.sh as well.
EOM
  usage
  exit 0
}

# revert versions.tf.bak if it exists
revert_versions() {
  if [[ -f "${GIT_DIR}/versions.tf.bak" ]] ; then
    mv "${GIT_DIR}/versions.tf.bak" "${GIT_DIR}/versions.tf"
  fi
}

# echo and remove escaping slash(es)
dsl() {
  echo ${1} | tr -d '\'
}

# check, verify and update TF variables
check_tf_versions() {
  TF_VERSION_INFO=$(terraform --version)
  CURRENT_TF_VERSION=$(echo "${TF_VERSION_INFO}" | head -n 1 |
    awk '{print $2}' | sed -E 's/\.$//;s/\./\\\./g' | tr -d 'v')
  if [[ $(echo "${TF_VERSION_INFO}" | grep 'out of date!') ]] ; then
    NEW_TF_VERSION=$(echo "${TF_VERSION_INFO}" |
      tail -n-1 | awk '{print $2}' | sed -E 's/\.$//;s/\./\\\./g')
  fi
  REQUIRED_TF_VERSION=$(cat "${GIT_DIR}/versions.tf" | grep 'required_version' |
    awk -F'"' '{print $2}' | sed -E 's/\.$//;s/\./\\\./g')
}

verify_root_repo
declare {SKIP_TF_UPDATE,NEW_TF_VERSION,OLD_VERSION,NEW_VERSION}=
PROVIDER_LIST=()
LOCKFILE_DIR="${GIT_DIR}/terraform/master/global"
LOCKFILE="${LOCKFILE_DIR}/.terraform.lock.hcl"

while getopts th opt
do
  case $opt in
    t) SKIP_TF_UPDATE=true ;;
    h) help_me             ;;
    *) usage && exit 1     ;;
  esac
done
shift $((OPTIND-1))

if ! [[ -z "$@" ]] ; then
  for PROVIDER in "$@" ; do
    if [[ ! $(grep -s "${PROVIDER}" "${GIT_DIR}/.terraform.lock.hcl") ]] ; then
      echo_yellow "Provider '${PROVIDER}' not found in .terraform.lock.hcl; skipping."
    else
      PROVIDER_LIST+=($(grep -s "${PROVIDER}" "${GIT_DIR}/.terraform.lock.hcl" |
                  awk -F'/|"' '{print $(NF-2)"\\/"$(NF-1)}'))
    fi
  done
else
  PROVIDER_LIST=($(grep 'provider' "${GIT_DIR}/.terraform.lock.hcl" |
                  awk -F'/|"' '{print $(NF-2)"\\/"$(NF-1)}'))
fi

echo
cp "${GIT_DIR}/versions.tf" "${GIT_DIR}/versions.tf.bak"
echo_blue "Checking for updates to the following providers:"
for PROVIDER in "${PROVIDER_LIST[@]}" ; do
  echo "- $(dsl ${PROVIDER})"
  sed -i '' -E "/$PROVIDER/{n;s/( version = \")/\1\>\= /;}" "${GIT_DIR}/versions.tf"
done
echo
[[ -f "${LOCKFILE}" ]] && rm "${LOCKFILE}"

check_tf_versions
if [[ "$(dsl $CURRENT_TF_VERSION)" != "$(dsl $REQUIRED_TF_VERSION)" ]] ; then
  echo_yellow "Current Terraform version is $(dsl ${CURRENT_TF_VERSION});"
  echo_yellow "however, versions.tf requires $(dsl ${REQUIRED_TF_VERSION}) instead."
  if prompt_yn "Change current version via terraform-switch?" ; then
    run $(dirname "$0")/terraform-switch.sh $(dsl ${REQUIRED_TF_VERSION})
  else
    raise "Change currently-running Terraform version and try again!"
  fi
fi
$(dirname "$0")/td -l -d master -v lock

UPDATED_PROVIDERS=0
for PROVIDER in "${PROVIDER_LIST[@]}" ; do
  OLD_VERSION=$(grep -A1 "source  = \"${PROVIDER}\"" "${GIT_DIR}/versions.tf" |
    tail -n+2 | sed -E 's/.+\"\>\= ([0-9\.]+)\"/\1/;s/\./\\\./g')
  NEW_VERSION=$(grep -A1 "registry\.terraform\.io/$PROVIDER" "${LOCKFILE}" |
                tail -n+2 | sed -E 's/.+\"([0-9\.]+)\"/\1/;s/\./\\\./g')
  sed -i '' -E "/$PROVIDER/{n;s/>= [0-9\.]+/$NEW_VERSION/;}" "${GIT_DIR}/versions.tf"
  if [[ "${OLD_VERSION}" == "${NEW_VERSION}" ]] ; then
    echo_yellow "$(dsl ${PROVIDER}) is already at $(dsl ${NEW_VERSION}); skipping."
  else
    echo_green "Updated $(dsl ${PROVIDER}) from $(dsl ${OLD_VERSION}) to $(dsl ${NEW_VERSION})"
    ((UPDATED_PROVIDERS++))
  fi
done
rm "${GIT_DIR}/versions.tf.bak"

rm "${LOCKFILE}"
if [[ ${UPDATED_PROVIDERS} -gt 0 ]] && \
  [[ ! $(comm -3 "${GIT_DIR}/.terraform.lock.hcl" "${LOCKFILE}" |
    grep -v 'constraints') ]]; then
  echo_blue "Regenerating and copying lockfile..."
  $(dirname "$0")/td -l -d master -v lock
  mv "${LOCKFILE}" .terraform.lock.hcl
  echo_green "Repo-level .terraform.lock.hcl updated."
fi
cd "${LOCKFILE_DIR}"
ln -s ../../../.terraform.lock.hcl .terraform.lock.hcl
cd - >/dev/null
echo

check_tf_versions
if [[ -z ${SKIP_TF_UPDATE} ]] && [[ ! -z ${NEW_TF_VERSION} ]]; then
  if prompt_yn "New Terraform version $(dsl ${NEW_TF_VERSION}) available; update?" ; then
    cp "${GIT_DIR}/versions.tf" "${GIT_DIR}/versions.tf.bak"
    run $(dirname "$0")/terraform-switch.sh $(dsl ${NEW_TF_VERSION})
    sed -i '' -E "s/(required_version = \")[0-9\.]+/\1${NEW_TF_VERSION}/" \
      "${GIT_DIR}/versions.tf"
    rm "${GIT_DIR}/versions.tf.bak"
    echo_green "Updated required_version in versions.tf to $(dsl ${NEW_TF_VERSION})"
    if ! [[ $(echo ${KNOWN_TF_VERSIONS[@]} | grep $(dsl ${NEW_TF_VERSION})) ]] ; then
      sed -i '' -E "s/(KNOWN_TF_VERSIONS=\()/\1\n  \"v${NEW_TF_VERSION}\"/" \
        $(dirname "$0")/lib/common.sh
      echo_green "Added v$(dsl ${NEW_TF_VERSION}) to KNOWN_TF_VERSIONS in common.sh"
    fi
  fi
fi
