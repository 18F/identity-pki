#!/bin/bash

#### Disables/Enables KMS Matching Pipeline in selected environment  ####

set -euo pipefail

. "$(dirname "$0")/lib/common.sh" 

usage() {
  cat >&2 << EOM

Usage: ${0} [-h] -e ENVIRONMENT -t TOGGLE

Flags:
  -e : Environment to enable/disable KMS Matching in
  -t : Toggle KMS matching
         "enable"  - Enables KMS matching
         "disable" - Disables KMS Matching     
  -h : Detailed help

Must be run with \`aws-vault\`, whether in a session or with \`exec\`

EOM
}

help_text() {
  cat >&2 << EOM

Usage: ${0} [-h] -e ENVIRONMENT -t TOGGLE

Runs all necessary commands to enable or disable the KMS Matching Pipeline
for the selected environment. Designed to run with no specified flags/arguments.

Flags:
  -e : Environment to enable/disable KMS Matching in
  -t : Toggle KMS matching
         "enable"  - Enables KMS matching
         "disable" - Disables KMS Matching
  -h : Displays this help
  
Must be run with \`aws-vault\`, whether in a session or with \`exec\`

EOM
  exit 0
}

# Runs an AWS CLI command to toggle the Subscription filter on the KMS Log Group of the 
# selected environment. 'disable' will delete the Subscription filter. 'enable' will
# re-create the Subscription filter. This prevents CloudWatch from pushing Application 
# KMS logs through Kinesis, thus breaking the KMS Matching pipeline.
toggle_cloudwatch_subscription_filter() {
  echo "In CW Sub Filter toggle"
  local log_group_name filter_name filter_pattern destination_arn role_arn distribution

  log_group_name="${ENV}_/srv/idp/shared/log/kms.log"
  filter_name="${ENV}-kms-app-log"
  filter_pattern=''
  destination_arn=''
  role_arn=''
  distribution=''

  if [[ "${TOGGLE}" == "disable" ]]; then
    aws logs delete-subscription-filter --log-group-name ${log_group_name} --filter-name ${filter_name}
  elif [[ "${TOGGLE}" == "enable" ]]; then
    filter_pattern='[type, datetime, info, whitespace, (json = *decrypt* && json = *pii-encryption*) || (json = *decrypt* && json = *password-digest*)]'
    destination_arn="arn:aws:kinesis:${TERRAFORM_STATE_BUCKET_REGION}:${TF_VAR_account_id}:stream/${ENV}-kms-app-events"
    role_arn="arn:aws:iam::${TF_VAR_account_id}:role/${ENV}-kms-app-events"
    distribution="ByLogStream"

    aws logs put-subscription-filter --log-group-name "${log_group_name}" --filter-name "${filter_name}" --filter-pattern "${filter_pattern}" --destination-arn "${destination_arn}" --role-arn "${role_arn}" --distribution "${distribution}"
  fi
}

# Runs an AWS CLI command to toggle the '<env>-decryption-events' Event Bus rule.
# This prevents CloudWatch from pushing KMS Decryption events to SNS, thus breaking
# the KMS Matching pipeline.
toggle_eventbus_rule() {
  aws events "${TOGGLE}"-rule --name "${ENV}-decryption-events"
}

# Load Environment Variables specific to the selected environment.
# Gives access to use the STRICT_ENVIRONMENT environment variable
load_environment_variables() {
  local return_dir env_var_dir
  return_dir="$(pwd)"
  env_var_dir="${return_dir}/../../identity-devops-private/env/"
  cd "${env_var_dir}"
  . "${env_var_dir}${ENV}".sh
  cd "${return_dir}"
}

# Check if the environment is considered Strict and require an extra step
# to purposefully disable KMS Matching in the environment
strict_environment_restriction() {
  local strict_check
  strict_check="${STRICT_ENVIRONMENT-}"
  [ -z "$strict_check" ] && return

  if [ "$strict_check" == 1 ] && [ -z "${KMS_ENVIRONMENT_OVERRIDE-}" ]; then
    echo_red >&2 "Error: Strict environment. Cannot toggle KMS Matching in this environment by default"
    echo_red >&2 "(set KMS_ENVIRONMENT_OVERRIDE=1 to skip this check and force toggle of KMS Matching in current environment)"
    return 2        
  fi
}

while getopts e:t:h opt
do
  case $opt in
    e) ENV="${OPTARG}"           ;;
    t) TOGGLE="${OPTARG}"        ;;
    h) help_text                 ;;
   \?) exit 1                    ;;
  esac
done
shift $((OPTIND-1))

if [[ -z "${ENV:-}" ]] || [[ -z "${TOGGLE:-}" ]]; then
  raise "Must specify ENVIRONMENT (-e) and TOGGLE (-t)"
fi


ROLES=(app idp pivcac worker)
cd "$(dirname "$0")"

if [[ "${TOGGLE}" != "enable" ]] && [[ "${TOGGLE}" != "disable" ]]; then
  raise "Invalid TOGGLE option. Must be \"enable\" or \"disable\""
fi

# Clear previous environment variables that could impact usage
unset STRICT_ENVIRONMENT

echo "Utility will ${TOGGLE} the KMS Matching Pipeline in the ${ENV} environment"

# Determine if strict environment and require additional step if so
load_environment_variables
strict_environment_restriction

# Toggle the KMS Matching Pipeline
#toggle_cloudwatch_logging
toggle_cloudwatch_subscription_filter
toggle_eventbus_rule
