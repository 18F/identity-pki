#!/usr/bin/env ruby
# frozen_string_literal: true

require 'tempfile'
require 'optparse'

Dir.chdir(File.dirname(__FILE__)) { require 'bundler/setup' }
require_relative '../cloudlib/lib/cloudlib'

def basename
  File.basename($PROGRAM_NAME)
end

def main(args)
  config = {}

  optparse = OptionParser.new do |opts|
    opts.banner = <<-EOM
usage: #{basename} [OPTIONS]

Compare diffs of secret files from S3

Examples:
    # RECOMMENDED: print the latest diff of idp's application.yml from int environment
    #{basename} --env int --app idp --last

    # Print out the current diff of idp's application.yml from int environment
    #{basename} --env int --app idp

    # Print out the current diff of idp's application.yml from int environment
    #{basename} --env int --app idp --log
    EOM

    opts.on('--remote-file REMOTE_FILE', 'Specify remote filename, defaults to application.yml') do |val|
      config[:remote_file] = val
    end

    opts.on('-h', '--help', 'Display this message') do
      STDERR.puts opts
      exit
    end

    opts.on('-a', '--app APP', 'Specify APP (required)') do |val|
      config[:app] = val
    end

    opts.on('-e', '--env ENVIRONMENT', 'Specify ENVIRONMENT (required)') do |val|
      config[:env] = val
    end

    opts.on('--log', 'Stream a log of changes, like "git log"') do
      config[:log] = true
    end

    opts.on('--last [COUNT]', Integer, 'Show the last N diffs, defaults to 1') do |count|
      config[:last] = count || 1
    end
  end

  command = optparse.order(args)

  if command.any?
    STDERR.puts optparse
    exit 1
  end

  # Default arguments
  config[:remote_file] ||= 'application.yml'

  if !config[:env]
    STDERR.puts optparse
    STDERR.puts "\n#{basename}: missing environment"
    exit 1
  end

  if !config[:app]
    STDERR.puts optparse
    STDERR.puts "\n#{basename}: missing app"
    exit 1
  end

  DiffAppS3Secret.new(config).run
rescue Errno::EPIPE => e
  # pipe errors OK to ignore
end

class DiffAppS3Secret
  attr_reader :config

  def initialize(config)
    @config = config
  end

  def versions
    @versions ||= Aws::S3::Client.new.list_object_versions(
      bucket: bucket,
      prefix: prefix
    ).versions
  end

  def run
    if (last = config[:last])
      count = 0
      versions.each_cons(2) do |newer, older|
        has_diff = output_diff(
          older: older,
          newer: newer,
          print_only_if_diff: true
        )
        count += 1 if has_diff
        return if count >= last
      end
    elsif config[:log]
      # TODO: add some sort of pager behavior like "git log"
      versions.each_cons(2) do |newer, older|
        output_diff(older: older, newer: newer)
      end
    else
      # show the current diff
      current, older, *rest = versions
      output_diff(older: older, newer: current)
    end
  rescue Interrupt
    exit 1
  end

  def s3_client
    @s3_client ||= Aws::S3::Client.new
  end

  def bucket
    @bucket ||= Cloudlib::S3.load_bucket!
  end

  def prefix
    @prefix ||= Cloudlib::S3.app_secret_path(
      env: config[:env],
      app: config[:app],
      remote_file: config[:remote_file]
    )
  end

  # @param [Aws::S3::Types::ObjectVersion] older
  # @param [Aws::S3::Types::ObjectVersion] newer
  # @return [Boolean] true if the versions differ
  def output_diff(older:, newer:, out: STDOUT, print_only_if_diff: false)
    Tempfile.create do |newer_file|
      Tempfile.create do |older_file|
        s3_client.get_object(
          bucket: bucket,
          key: prefix,
          version_id: newer.version_id,
          response_target: newer_file,
        )

        s3_client.get_object(
          bucket: bucket,
          key: prefix,
          version_id: older.version_id,
          response_target: older_file,
        )

        no_diff = system('cmp', '-s', older_file.path, newer_file.path)

        if print_only_if_diff && no_diff
          return false
        end

        out.puts "Comparing: #{newer.last_modified} (#{newer.version_id})"
        out.puts "       to: #{older.last_modified} (#{older.version_id})"

        success = system(differ, older_file.path, newer_file.path, out: STDOUT)

        out.puts "(no diff)" if no_diff

        !no_diff
      end
    end
  end

  def differ
    @differ ||= begin
      cmd = `which colordiff`.chomp
      if !$?.success?
        cmd = `which diff`.chomp
      end
      cmd
    end
  end
end

if __FILE__ == $0
  main(ARGV)
end
