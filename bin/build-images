#!/bin/bash

# Activate imagebuild pipelines + switch base-image branch if desired

set -euo pipefail

. "$(dirname "$0")/lib/common.sh"

usage() {
  cat >&2 << EOM

Usage: ${0} -a AWS_ACCOUNT [-u|-b BRANCH|-t TYPE]

Runs \`aws codepipeline start-pipeline-execution\` for
each type of AMI in the login-\$AWS_ACCOUNT account.

Flags:

  -u        : Updates terraform/imagebuild for the
              specified account via tf-deploy
  -b BRANCH : Update the identity-base-image branch
              used for builds to \$BRANCH, via tf-deploy
              and aws cloudformation (implies -u)
  -t TYPE   : Only update the stacks/build project/
              pipeline for \$TYPE AMIs (base/rails)
  -h        : Display this help

EOM
}

get_build_branch() {
  echo -e "\nVerifying current imagebuild branch in \`login-${ACCOUNT}\`..."
  CURRENT_BRANCH=$(ave -r aws ssm get-parameter \
    --name ImageCreationSourceFile --output text --with-decryption --query 'Parameter.Value' |
    sed -E 's/18F\/identity-base-image\/([A-Za-z0-9\/-]+)\/18F_identity-base-image\.zip/\1/')
}

run_terraform() {
  $(dirname "$0")/td -d imagebuild -e ${ACCOUNT} -at ${TF_APPLY_CMD}
  if ! [[ ${?} == 0 ]] ; then
    raise "Terraform deploy failed; investigate!"
  fi
}

update_build_branch() {
  local STACKS=()
  echo
  if [[ ${CURRENT_BRANCH} == ${BUILD_BRANCH} ]] ; then
    echo_yellow "NOTE: \`ImageCreationSourceFile\` already set to \`${BUILD_BRANCH}\`;"
    echo_yellow "will NOT run update-stack operations after apply is complete."
  else
    echo_cyan "- Current branch: ${CURRENT_BRANCH}"
    echo_cyan "- Desired branch: ${BUILD_BRANCH}"
  fi
  echo -e "\nReady to update imagebuild/${ACCOUNT} via tf-deploy."
  if prompt_yn "Continue?" ; then
    TF_APPLY_CMD="var 'code_branch=${BUILD_BRANCH}'"
    run_terraform
    if ! [[ ${CURRENT_BRANCH} == ${BUILD_BRANCH} ]] ; then
      echo
      echo_green "\`ImageCreationSourceFile\` parameter in \`login-${ACCOUNT}\` updated to \`${BUILD_BRANCH}\`."
      echo "Updating CloudFormation stacks to pull in new parameter value; StackIDs specified below."
      for TYPE in ${TYPE_LIST} ; do
        STACKS+=$(ave -r aws cloudformation list-stacks |
                        jq -r '.StackSummaries[]|select(.StackStatus == "DELETE_COMPLETE"|not).StackName' |
                        grep -i ${TYPE}Role | tr '\n' ' ')
      done
      for STACK in ${STACKS} ; do
        STACK_PARAMS=$(ave -r aws cloudformation describe-stacks \
                        --stack-name ${STACK} \
                        --query 'Stacks[].Parameters[].ParameterKey' \
                        --output text)                 
        PARAM_ARG=$(for PARAM in $(echo "${STACK_PARAMS}" | tr -s '\t' ' '); do
                      echo "ParameterKey=$PARAM,UsePreviousValue=true"
                    done | tr '\n' ' ')
        ave -r aws cloudformation update-stack \
          --stack-name ${STACK} \
          --use-previous-template \
          --capabilities CAPABILITY_IAM \
          --parameters ${PARAM_ARG} --output text
      done
      echo -e "\nWaiting for stack updates to complete..."
      for STACK in ${STACKS} ; do
        ave aws cloudformation wait stack-update-complete --stack-name ${STACK}
      done
      echo_green "CloudFormation stacks updated."
    fi
  fi
}

declare {ACCOUNT,BUILD_BRANCH,RUN_TF,TF_APPLY_CMD,CURRENT_BRANCH}=
TYPE_LIST='base rails'
RUN_TF=false

verify_root_repo
while getopts :a:t:ub:h opt
do
  case $opt in
    a) ACCOUNT="${OPTARG}"            ;;
    t) TYPE_LIST="${OPTARG}"          ;;
    u) RUN_TF=true                    ;;
    b)
       BUILD_BRANCH="${OPTARG}"
       RUN_TF=true
    ;;
    h) usage && exit 0                ;;
    *) raise 'Invalid option'         ;;
  esac
done
shift $((OPTIND-1))

if [[ -z ${ACCOUNT} ]] ; then
  raise 'AWS account must be specified with -a flag'
elif ! [[ "${TYPE_LIST}" =~ (base|rails) ]] ; then
  raise "TYPE must be \`base\` or \`rails\`; remove -t flag to use both"
fi

AV_PROFILE=$(get_profile_name $(get_acct_num ${ACCOUNT}))

if [[ ${RUN_TF} == true ]] ; then
  get_build_branch
  if [[ -z ${BUILD_BRANCH} ]] ; then
    if [[ ${CURRENT_BRANCH} == 'main' ]] ; then
      run_terraform
    else
      echo
      echo_yellow "Current imagebuild branch is \`${CURRENT_BRANCH}\`, not \`main\`;" 
      echo_yellow "however, no custom branch was specified via -b flag."
      echo
      if prompt_yn "Continue updating imagebuild/${ACCOUNT} with \`${CURRENT_BRANCH}\` branch?" ; then
        TF_APPLY_CMD="var 'code_branch=${CURRENT_BRANCH}'"
        run_terraform
      else
        echo_yellow "Update of imagebuild/${ACCOUNT} canceled."
      fi
    fi
  else
    update_build_branch
  fi
fi

echo -e "\nReady to build new AMI(s) for:"
for TYPE in ${TYPE_LIST} ; do
  echo_cyan "- ${ACCOUNT}-${TYPE}"
done
echo
if prompt_yn "Continue?" ; then
  for TYPE in ${TYPE_LIST} ; do
    PIPELINE=$(ave -r aws codepipeline list-pipelines |
                    jq -r '.pipelines[].name' | grep -i ${TYPE})
    ave aws codepipeline start-pipeline-execution --name ${PIPELINE} >/dev/null
  done
  echo_green "Pipeline execution(s) started in \`login-${ACCOUNT}\`!"
  echo "Check the AWS CodePipeline/CodeBuild console for build progress."
  echo
fi
