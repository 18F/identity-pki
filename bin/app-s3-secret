#!/usr/bin/env ruby

require 'optparse'

AWS_PROFILE_TO_S3_BUCKETS = {
  'identitysandbox.gov' => 'login-gov.app-secrets.894947205914-us-west-2',
  'login.gov'           => 'login-gov.app-secrets.555546682965-us-west-2', 
}

def bucket_from_aws_profile!(basename, aws_profile)
  if aws_profile.nil? || aws_profile.empty?
    STDERR.puts "#{basename}: missing AWS_PROFILE"
    exit 1
  end

  bucket = AWS_PROFILE_TO_S3_BUCKETS[aws_profile]

  if !bucket
    STDERR.puts "#{basename}: unknown AWS_PROFILE (#{aws_profile})"
    exit 1
  end

  bucket
end

def main(args)
  config = {}

  basename = File.basename($PROGRAM_NAME)

  optparse = OptionParser.new do |opts|
    opts.banner = <<-EOM
usage: #{basename} [OPTIONS]

Download or upload secret files from S3

Examples:
    # RECOMMENDED: Print out idp's application.yml from int environment
    #{basename} --env int --app idp

    # RECOMMENDED: Save idp's application.yml in int to a file with a default name (int.idp.application.yml)
    #{basename} --env int --app idp --download

    # Save idp's application.yml in int to a file named custom.yml
    #{basename} --env int --app idp --download custom.yml

    # RECOMMENDED: Upload a local file to s3 for idp in int from a default name (int.idp.application.yml)
    #{basename} --env int --app idp --upload

    # Upload a local file to s3 for idp in int from custom filename
    #{basename} --env int --app idp --upload custom.yml

    # Upload from STDIN to s3 for idp in int
    cat int.idp.application.yml | #{basename} --env int --app idp --upload -

Options:
    EOM

    opts.on('-h', '--help', 'Display this message') do
      STDERR.puts opts
      exit
    end

    opts.on('--dry-run', 'Dry run only') do
      config[:dry_run] = true
    end

    opts.on('--remote-file REMOTE_FILE', 'Specify remote filename, defaults to application.yml') do |val|
      config[:remote_file] = val
    end

    opts.on('-a', '--app APP', 'Specify APP (required)') do |val|
      config[:app] = val
    end

    opts.on('-e', '--env ENVIRONMENT', 'Specify ENVIRONMENT (required)') do |val|
      config[:env] = val
    end

    opts.on('--aws-profile PROFILE', 'Set AWS_PROFILE env variable') do |val|
      ENV['AWS_PROFILE'] = val
    end

    opts.on('--download [LOCAL_FILE]', 'Downloads file from S3 (defaults to local file named with environment and app, ex: int.idp.application.yml)') do |val|
      if config[:direction]
        STDERR.puts "#{basename}: can't specify both --download and --upload"
        exit 1
      end
      config[:direction] = :down
      config[:download_file] = val
    end

    opts.on('--upload [LOCAL_FILE]', 'Uploads file to S3 (defaults to local file named with environment and app, ex: int.idp.application.yml)') do |val|
      if config[:direction]
        STDERR.puts "#{basename}: can't specify both --download and --upload"
        exit 1
      end

      config[:direction] = :up
      config[:upload_file] = val
    end
  end

  command = optparse.order(args)

  if command.any?
    STDERR.puts optparse
    exit 1
  end

  # Default arguments
  config[:remote_file] ||= 'application.yml'

  if !config[:env]
    STDERR.puts optparse
    STDERR.puts "\n#{basename}: missing environment"
    exit 1
  end

  if !config[:app]
    STDERR.puts optparse
    STDERR.puts "\n#{basename}: missing app"
    exit 1
  end

  default_local_filename = "#{config[:env]}.#{config[:app]}.#{config[:remote_file]}"
  config[:upload_file] ||= default_local_filename

  # Upload/download arguments
  # 1. No argument: download to stdout
  if !config[:direction]
    config[:direction] = :down
    config[:download_file] = '-'
  elsif config[:direction] == :down
    # 2. Download, no path specific
    # 3. Download with path
    config[:download_file] ||= default_local_filename
  end

  if config[:direction] == :up
    if config[:upload_file] == '-'
      if STDIN.tty?
        STDERR.puts "\n#{basename}: missing file to upload. Specified '-'but didn't pipe through STDIN"
        exit 1
      end
    elsif !File.exist?(config[:upload_file])
      STDERR.puts "\n#{basename}: missing file to upload, file named '#{config[:upload_file]}' does not exist"
      exit 1
    end
  end

  bucket = bucket_from_aws_profile!(basename, ENV['AWS_PROFILE'])

  # Example: s3://login-gov.app-secrets.894947205914-us-west-2/int/pivcac/v1/application.yml
  s3_path = "s3://#{bucket}/#{config[:env]}/#{config[:app]}/v1/#{config[:remote_file]}"

  src, dest = case config[:direction]
  when :down
    [s3_path, config[:download_file]]
  when :up
    [config[:upload_file], s3_path]
  else
    STDERR.puts "#{basename}: Unknown direction #{config[:direction]}"
    exit 1
  end

  s3_args = ['aws', 's3', 'cp', src, dest]

  STDERR.puts s3_args.join(' ')

  if !config[:dry_run]
    exec(*s3_args)
  end
end

if __FILE__ == $0
  main(ARGV)
end
