#!/usr/bin/env ruby

require 'optparse'

AWS_PROFILE_TO_S3_BUCKETS = {
  'identitysandbox.gov' => 'login-gov.app-secrets.894947205914-us-west-2',
  'login.gov'           => 'login-gov.app-secrets.555546682965-us-west-2', 
}

def bucket_from_aws_profile!(basename, aws_profile)
  if aws_profile.nil? || aws_profile.empty?
    STDERR.puts "#{basename}: missing AWS_PROFILE"
    exit 1
  end

  bucket = AWS_PROFILE_TO_S3_BUCKETS[aws_profile]

  if !bucket
    STDERR.puts "#{basename}: unknown AWS_PROFILE (#{aws_profile})"
    exit 1
  end

  bucket
end

def main(args)
  config = {}

  basename = File.basename($PROGRAM_NAME)

  optparse = OptionParser.new do |opts|
    opts.banner = <<-EOM
usage: #{basename} [OPTIONS]

Download or upload secret files from S3

Examples:
    # Print out idp's application.yml from int environment
    #{basename} --env int --app idp

    # Save idp's application.yml in qa to a file named qa.idp.application.yml
    #{basename} --env qa --app idp > qa.idp.application.yml

    # Upload from STDIN to s3 for idp in qa
    cat qa.idp.application.yml | #{basename} --env qa --app idp --upload

    # Upload a local file to s3 for idp in qa from stdin
    #{basename} --env qa --app idp --upload qa.idp.application.yml
Options:
    EOM

    opts.on('-h', '--help', 'Display this message') do
      STDERR.puts opts
      exit
    end

    opts.on('--dry-run', 'Dry run only') do
      config[:dry_run] = true
    end

    opts.on('-f', '--file FILE', 'Specify file, defaults to application.yml') do |val|
      config[:file] = val
    end

    opts.on('-a', '--app APP', 'Specify APP (required)') do |val|
      config[:app] = val
    end

    opts.on('-e', '--env ENVIRONMENT', 'Specify ENVIRONMENT (required)') do |val|
      config[:env] = val
    end

    opts.on('--aws-profile PROFILE', 'Set AWS_PROFILE env variable') do |val|
      ENV['AWS_PROFILE'] = val
    end

    opts.on('--download', 'Downloads file from S3 (default behavior)') do
      if config[:direction]
        STDERR.puts "#{basename}: can't specify both --download and --upload"
        exit 1
      end
      config[:direction] = :down
    end

    opts.on('--upload [LOCAL_FILE]', 'Uploads file to S3, defaults to STDIN') do |val|
      if config[:direction]
        STDERR.puts "#{basename}: can't specify both --download and --upload"
        exit 1
      end

      config[:direction] = :up
      config[:upload_file] = val
    end
  end

  command = optparse.order(args)

  if command.any?
    STDERR.puts optparse
    exit 1
  end

  # Default arguments
  config[:direction] ||= :down
  config[:file] ||= 'application.yml'
  config[:upload_file] ||= '-'

  if !config[:env]
    STDERR.puts optparse
    STDERR.puts "\n#{basename}: missing environment"
    exit 1
  end

  if !config[:app]
    STDERR.puts optparse
    STDERR.puts "\n#{basename}: missing app"
    exit 1
  end

  if config[:direction] == :up && config[:upload_file] == '-' && STDIN.tty?
    STDERR.puts optparse
    STDERR.puts "\n#{basename}: missing file to upload, must specify a path or pipe through stdin"
    exit 1
  end

  bucket = bucket_from_aws_profile!(basename, ENV['AWS_PROFILE'])

  # Example: s3://login-gov.app-secrets.894947205914-us-west-2/qa/pivcac/v1/application.yml
  s3_path = "s3://#{bucket}/#{config[:env]}/#{config[:app]}/v1/#{config[:file]}"

  src, dest = case config[:direction]
  when :down
    [s3_path, '-']
  when :up
    [config[:upload_file], s3_path]
  else
    STDERR.puts "#{basename}: Unknown direction #{config[:direction]}"
    exit 1
  end

  s3_args = ['aws', 's3', 'cp', src, dest]

  STDOUT.puts s3_args.join(' ')

  if !config[:dry_run]
    exec(*s3_args)
  end
end

if __FILE__ == $0
  main(ARGV)
end
