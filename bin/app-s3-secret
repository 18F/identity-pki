#!/usr/bin/env ruby
# frozen_string_literal: true

require 'optparse'
require 'tempfile'
require 'fileutils'

Dir.chdir(File.dirname(__FILE__)) { require 'bundler/setup' }
require_relative '../cloudlib/lib/cloudlib/app_s3_secret.rb'

def basename
  File.basename($PROGRAM_NAME)
end

def check_then_action!(config:, action:)
  if config[:action]
    STDERR.puts <<~EOS.split("\n").join(' ')
      #{basename}: can only have one action, tried to set #{action.inspect} when
      #{config[:action].inspect} was already specified
    EOS
    exit 1
  end

  config[:action] = action
end

def main(args)
  config = {
    action: nil,
    app: nil,
    env: nil,
    remote_file: 'application.yml',
    local_file: '-',
    dry_run: false,
    diff_envs: [],
    validate_file: true,
  }

  optparse = OptionParser.new do |opts|
    opts.banner = <<-EOM
usage: #{basename} [OPTIONS]

Download, upload, edit or compare app secret files from S3

Downloading

    # RECOMMENDED: Print out idp's application.yml from int environment
    #{basename} --env int --app idp

    # Save idp's application.yml in int to a file named custom.yml
    #{basename} --env int --app idp --download custom.yml

Uploading

    # Upload a local file to s3 for idp in int from custom filename
    #{basename} --env int --app idp --upload custom.yml

    # Upload from STDIN to s3 for idp in int
    cat int.idp.application.yml | #{basename} --env int --app idp --upload -

Editing

    # RECOMMENDED: Download file, interactively edit file in $VISUAL or $EDITOR
    # (defaults to vim), preview a diff, and then upload it
    #{basename} --env int --app idp --edit

Comparing

    # RECOMMENDED: Compare last revision of a file
    #{basename} --env int --app idp --last

    # Compare last 5 revisions of a file
    #{basename} --env int --app idp --last 5

    # Print log of all changes to a file
    #{basename} --env int --app idp --log

    # RECOMMENDED: Compare the same file across multiple environments
    #{basename} --app idp --env int,dev

    Colors (compared to first environment)
      * default/black: same value
      * red: removed value
      * green: added value
      * yellow: changed value

Options:
    EOM

    opts.on('-h', '--help', 'Display this message') do
      STDERR.puts opts
      exit
    end

    opts.on('--dry-run', 'Dry run only (for download, upload, edit)') do
      config[:dry_run] = true
    end

    opts.on('--remote-file REMOTE_FILE', 'Specify remote filename, defaults to application.yml') do |val|
      config[:remote_file] = val
    end

    opts.on('-a', '--app APP', 'Specify app (required)') do |val|
      config[:app] = val
    end

    opts.on('-e', '--env ENVIRONMENT', 'Specify environment (required, except for --diff)') do |val|
      config[:env] = val
    end

    opts.on('--download [LOCAL_FILE]', 'Downloads file from S3 (defaults to STDOUT)') do |val|
      check_then_action!(config: config, action: :download)
      config[:local_file] = val if val
    end

    opts.on('--upload [LOCAL_FILE]', 'Uploads file to S3') do |val|
      check_then_action!(config: config, action: :upload)
      config[:local_file] = val if val
    end

    opts.on('--edit', 'Download, interactively edit, then upload') do |val|
      check_then_action!(config: config, action: :edit)
    end

    opts.on('--log', 'Stream a log of changes, like "git log"') do
      check_then_action!(config: config, action: :log)
    end

    opts.on('--last [COUNT]', Integer, 'Show the last N diffs, defaults to 1') do |count|
      check_then_action!(config: config, action: :log_last)
      config[:last] = count || 1
    end

    opts.on('--diff ENV1,ENV2', Array, <<~STR) do |val|
      Specify environments to compare in a table
    STR
      check_then_action!(config: config, action: :diff)
      config[:diff_envs] += Array(val)
    end

    opts.on('--skip-validation', 'Skip validation of secrets (only for --edit)') do
      config[:validate_file] = false
    end
  end

  command = optparse.order(args)

  if !config[:env] && config[:diff_envs].empty?
    STDERR.puts optparse
    STDERR.puts "\n#{basename}: missing environment"
    exit 1
  end

  if !config[:app]
    STDERR.puts optparse
    STDERR.puts "\n#{basename}: missing app"
    exit 1
  end

  app_s3_secret = Cloudlib::AppS3Secret.new(
    app: config[:app],
    env: config[:env],
    remote_file: config[:remote_file],
    dry_run: config[:dry_run],
  )

  case config[:action]
  when nil, :download
    app_s3_secret.download(destination: config[:local_file])
  when :upload
    if config[:local_file] == '-'
      if STDIN.tty?
        STDERR.puts "\n#{basename}: missing file to upload. Specified '-' but didn't pipe through STDIN"
        exit 1
      end
    elsif !File.exist?(config[:local_file])
      STDERR.puts "\n#{basename}: missing file to upload, file named '#{config[:local_file]}' does not exist"
      exit 1
    end

    app_s3_secret.upload(source: config[:local_file])
  when :edit
    app_s3_secret.edit(validate_file: config[:validate_file])
  when :diff
    app_s3_secret.diff(envs: config[:diff_envs])
  when :log
    app_s3_secret.log
  when :log_last
    app_s3_secret.log_last(last: config[:last])
  else
    STDERR.puts optparse
    STDERR.puts "unknown action #{config[:action].inspect}"
    exit 1
  end
end

if __FILE__ == $0
  main(ARGV)
end
