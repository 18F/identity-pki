#!/usr/bin/env ruby

require 'optparse'
require 'tempfile'
require 'fileutils'
require 'json'

def load_bucket!
  account_id = begin
    JSON.parse(`aws sts get-caller-identity`)['Account']
  rescue JSON::ParserError
    nil
  end

  if !account_id || account_id.empty?
    STDERR.puts "#{basename}: could not detect bucket, check AWS_VAULT or AWS_PROFILE env vars"
    exit 1
  end

  "login-gov.app-secrets.#{account_id}-us-west-2"
end

def basename
  File.basename($PROGRAM_NAME)
end

def main(args)
  config = {}

  optparse = OptionParser.new do |opts|
    opts.banner = <<-EOM
usage: #{basename} [OPTIONS]

Download or upload secret files from S3

Examples:
    # RECOMMENDED: Print out idp's application.yml from int environment
    #{basename} --env int --app idp

    # RECOMMENDED: Save idp's application.yml in int to a file with a default
    # name (int.idp.application.yml)
    #{basename} --env int --app idp --download

    # Save idp's application.yml in int to a file named custom.yml
    #{basename} --env int --app idp --download custom.yml

    # RECOMMENDED: Upload a local file to s3 for idp in int from a default name
    # (int.idp.application.yml)
    #{basename} --env int --app idp --upload

    # Upload a local file to s3 for idp in int from custom filename
    #{basename} --env int --app idp --upload custom.yml

    # Upload from STDIN to s3 for idp in int
    cat int.idp.application.yml | #{basename} --env int --app idp --upload -

    # RECOMMENDED: Download file, interactively edit file in $EDITOR (defaults
    # to vim), preview a diff, and then upload it
    #{basename} --env int --app idp --edit

Options:
    EOM

    opts.on('-h', '--help', 'Display this message') do
      STDERR.puts opts
      exit
    end

    opts.on('--dry-run', 'Dry run only') do
      config[:dry_run] = true
    end

    opts.on('--remote-file REMOTE_FILE', 'Specify remote filename, defaults to application.yml') do |val|
      config[:remote_file] = val
    end

    opts.on('-a', '--app APP', 'Specify APP (required)') do |val|
      config[:app] = val
    end

    opts.on('-e', '--env ENVIRONMENT', 'Specify ENVIRONMENT (required)') do |val|
      config[:env] = val
    end

    opts.on('--download [LOCAL_FILE]', 'Downloads file from S3 (defaults to local file named with environment and app, ex: int.idp.application.yml)') do |val|
      if config[:direction]
        STDERR.puts "#{basename}: can't specify both --download and --upload"
        exit 1
      end

      if config[:edit]
        STDERR.puts "#{basename}: can't specify both --download and --edit"
        exit 1
      end
      config[:direction] = :down
      config[:download_file] = val
    end

    opts.on('--upload [LOCAL_FILE]', 'Uploads file to S3 (defaults to local file named with environment and app, ex: int.idp.application.yml)') do |val|
      if config[:direction]
        STDERR.puts "#{basename}: can't specify both --download and --upload"
        exit 1
      end

      if config[:edit]
        STDERR.puts "#{basename}: can't specify both --upload and --edit"
        exit 1
      end

      config[:direction] = :up
      config[:upload_file] = val
    end

    opts.on('--edit', 'Download, interactively edit, then upload') do |val|
      if config[:direction]
        STDERR.puts "#{basename}: can't specify both --edit and --download/--upload"
        exit 1
      end

      config[:edit] = true
    end
  end

  command = optparse.order(args)

  if command.any?
    STDERR.puts optparse
    exit 1
  end

  # Default arguments
  config[:remote_file] ||= 'application.yml'

  if !config[:env]
    STDERR.puts optparse
    STDERR.puts "\n#{basename}: missing environment"
    exit 1
  end

  if !config[:app]
    STDERR.puts optparse
    STDERR.puts "\n#{basename}: missing app"
    exit 1
  end

  config[:upload_file] ||= default_local_filename(config)

  if config[:edit]
    edit!(config)
  else
    plain_download_upload!(config)
  end
end

def default_local_filename(config)
  "#{config[:env]}.#{config[:app]}.#{config[:remote_file]}"
end

def plain_download_upload!(config)
  # Upload/download arguments
  # 1. No argument: download to stdout
  if !config[:direction]
    config[:direction] = :down
    config[:download_file] = '-'
  elsif config[:direction] == :down
    # 2. Download, no path specific
    # 3. Download with path
    config[:download_file] ||= default_local_filename(config)
  end

  if config[:direction] == :up
    if config[:upload_file] == '-'
      if STDIN.tty?
        STDERR.puts "\n#{basename}: missing file to upload. Specified '-'but didn't pipe through STDIN"
        exit 1
      end
    elsif !File.exist?(config[:upload_file])
      STDERR.puts "\n#{basename}: missing file to upload, file named '#{config[:upload_file]}' does not exist"
      exit 1
    end
  end

  s3_path = build_s3_path(config)

  src, dest = case config[:direction]
  when :down
    [s3_path, config[:download_file]]
  when :up
    [config[:upload_file], s3_path]
  else
    STDERR.puts "#{basename}: Unknown direction #{config[:direction]}"
    exit 1
  end

  aws_cp!(src, dest, dry_run: config[:dry_run])
end

def build_s3_path(config)
  bucket = load_bucket!

  # Example: s3://login-gov.app-secrets.894947205914-us-west-2/int/pivcac/v1/application.yml
  "s3://#{bucket}/#{config[:env]}/#{config[:app]}/v1/#{config[:remote_file]}"
end

def aws_cp!(src, dest, dry_run: true)
  s3_args = ['aws', 's3', 'cp', src, dest]

  STDERR.puts s3_args.join(' ')

  if !dry_run
    system(*s3_args)
  end
end

def edit!(config)
  file = default_local_filename(config)

  ext = File.extname(file)
  base = File.basename(file, ext)

  s3_path = build_s3_path(config)

  editor = ENV['EDITOR'] || `which vim`.chomp
  differ = `which colordiff`.chomp
  if !$?.success?
    differ = `which diff`.chomp
  end

  tempfile = Tempfile.new([base, ext])
  tempfile_copy = Tempfile.new([base, 'copy', ext])

  aws_cp!(s3_path, tempfile.path, dry_run: false)
  FileUtils.copy(tempfile.path, tempfile_copy.path)

  system(editor, tempfile.path)
  if !$?.success?
    STDERR.puts "#{basename}: Editor (#{editor}) did not exit successfully. Aborting"
    exit 1
  end

  if FileUtils.compare_file(tempfile.path, tempfile_copy.path)
    STDOUT.puts "#{basename}: No changes detected in file. Exiting"
    exit 0
  end

  STDOUT.puts "#{basename}: Here's a preview of your changes:"
  system(differ, tempfile_copy.path, tempfile.path)

  STDOUT.puts "#{basename}: Upload changes to S3? (y/n)"
  fd = IO.sysopen("/dev/tty", "r")
  tty_in = IO.new(fd,"r")

  input = tty_in.read(1)
  if input == 'y'
    aws_cp!(tempfile.path, s3_path, dry_run: config[:dry_run])
  else
    STDERR.puts "#{basename}: diff not approved, not uploading to S3"
  end
ensure
  tempfile.unlink
  tempfile_copy.unlink
end

if __FILE__ == $0
  main(ARGV)
end
