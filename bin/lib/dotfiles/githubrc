#!/bin/bash

############### github aliases/functions ###############
if [[ ! $(brew list | grep hub) ]] ; then
  brew install hub || { echo "hub not installed!" && exit 1 ; }
fi

######## aliases ########
alias gs="run git status"
alias gl="run git log --pretty=oneline --no-abbrev-commit -n 10"
alias gpom="run git pull origin master"
alias gom="run git checkout master && gpom"
alias bc="git rev-parse HEAD | tr -d '\n' | pbcopy"
alias gil="run open https://github.com/issues/assigned"
alias gbi="run open https://github.com/orgs/18F/projects/5?card_filter_query=assignee%3A${GSA_USERNAME}"
alias gpl="run hub pr list"
alias gi="run hub issue"

######## functions ########
USE_RUN=1
run() {
  if [[ $USE_RUN -gt 0 ]] ; then
    if [ -t 1 ]; then
      echo -ne "\\033[1;36m"
    fi

    echo >&2 "+ $*"

    if [ -t 1 ]; then
      echo -ne '\033[m'
    fi
  fi
  "$@"
}

run_var() {
  VAR=${1}
  shift
  if [[ $USE_RUN -gt 0 ]] ; then
    if [ -t 1 ]; then
      echo -ne "\\033[1;36m"
    fi

    echo -e >&2 "+ $VAR=\$($*)"

    if [ -t 1 ]; then
      echo -ne '\033[m'
    fi
  fi
  eval $VAR="\"$($@)\""
}

#### cd to ${GITHUB_PARENT_DIR}/identity-${1} ####
gid() {
  run cd "${GITHUB_PARENT_DIR}/identity-${1}"
}

#### create/checkout new git branch named ${1} ####
newb() {
  gom
  run git checkout -b "${1}"
}

#### open specified PR in browser
gps() {
  run hub pr show "${1}"
}

#### open specified issue in browser
gio() {
  local repo=$(git remote get-url --all origin | sed -E 's/.*:(.*)\..*/\1/')
  run open "https://github.com/${repo}/issues/${1}"
}

#### add files, commit w/message, push to origin with set-upstream ####
gpb() {
  run git add --all
  run git commit -m "$@"
  run git push --set-upstream origin $(git_current_branch)
}

#### delete either current branch or branch name = ${1}; end on master ####
delb() {
  local branch=$1
  [ -z ${1} ] && branch=$(git_current_branch)
  gom
  run git branch -d $branch
}

#### merge/close PR, delete current/specified branch unless -n is set ####
gmpr () {
  local branch=$(git_current_branch)
  local save_branch=false
  if [[ "${branch}" == 'master' ]] ; then
    echo "Cannot be run from master branch!"
    break 1
  fi
  while getopts n opt ; do
    case "${opt}" in
      n) save_branch=true ;;
    esac
  done
  run git checkout master && \
  run git pull origin master && \
  run git checkout $branch && \
  run git rebase master && \
  run git push --force-with-lease && \
  run git merge master --no-edit && \
  run git checkout master && \
  run git merge --no-edit --no-ff $branch && \
  run git push origin master
  [[ "${save_branch}" == 'true' ]] || delb $branch
}

#### open PR from LOGIN_REVS and $msg ####
pbj() {
  local revs="${1}"
  local msg=("${@:2}")
  run hub pull-request -p -r "${revs}" -m "${msg[@]}" -e
}

#### add>commit>push -u>open PR with $msg ####
gpr() {
  local revs="${LOGIN_REVS}"
  local msg=("${@}")
  gpb "${msg[@]}"
  pbj "${revs}" "${msg[@]}"
}

#### create issues ####
ghi() {
  local assignee="${1}"
  local labels=("${@:2}")
  [ -z ${assignee} ] && assignee="${GSA_USERNAME}"
  run hub issue create --edit -a ${assignee} "${labels}" \
    -F "${GITHUB_PARENT_DIR}/identity-devops/.github/ISSUE_TEMPLATE/feature_request.md"
}

#### pull branch up to current version ####
grff() {
  RELEASE=$(($(cat VERSION.txt | sed -E 's/pre\-//')-1))
  git pull --ff-only origin v${RELEASE}
}

#### create private gist from clipboard ####
ggc() {
  local file="${1}"
  local desc=("${@:2}")
  run gist -oPp -d "${desc[@]}" -f ${file}
}

#### create a GitHub release ####
ghr() {
  RELEASE=$(cat VERSION.txt | sed -E 's/pre\-//')
  VERSION=$(echo ${1} | sed 's/v//')
  [ -z ${VERSION} ] && VERSION=$(($RELEASE-1))
  run_var PR_LIST hub pr list -b master -s merged -o updated -L 100 -f "- %i %t%n"
  PREV_VERSION=$(($VERSION-1))
  RELEASE_PRS=$(echo "${PR_LIST}" |
    sed -n "/${VERSION}/,/${PREV_VERSION}/p;/${PREV_VERSION}/q;" |
    grep -v "$VERSION\|$PREV_VERSION")
  run hub release create "v${VERSION}" -m "$(cat <<EOF
Release v${VERSION}

$RELEASE_PRS
EOF
  )"
}

#### create a release PR ####
grpr() {
  RELEASE=${1}
  [ -z ${RELEASE} ] && RELEASE=$(cat VERSION.txt | sed -E 's/pre\-([0-9]+)/v\1/')
  run git checkout master && \
  run git pull origin master && \
  run git checkout -b release/$RELEASE
  run rake release
  run git push origin release/$RELEASE
  run git push --tags
  run_var GIT_TAGS git tag -l -n2 | grep version | awk '{print $1}' | sed -E 's/[^0-9\.]*//g' | sort -nr
  run_var PR_LIST hub pr list -b master -s merged -o updated -L 100 -f "- %i %t%n"
  VERSION=$(echo $RELEASE | sed 's/v//')
  PREV_VERSION=$(($VERSION-1))
  RELEASE_PRS=$(echo "${PR_LIST}" |
    sed "/${PREV_VERSION}/q" |
    grep -v "$VERSION\|$PREV_VERSION") 
  run hub pull-request -p -r "${LOGIN_REVS}" -e -m "$(cat <<EOF
Release v${VERSION}

$RELEASE_PRS
EOF
  )"
}
