#!/bin/bash
. "$(dirname "$0")/.subfunctions"

############### github aliases/functions ###############
if [[ ! $(brew list --formula | grep hub) ]] ; then
  brew install hub || { echo "hub not installed!" && break 1 ; }
fi

######## aliases ########
alias gs="run git status"
alias gl="run git log --pretty=oneline --no-abbrev-commit -n 10"
alias gpom="run git pull origin main"
alias gom="run git checkout main && gpom"
alias gcm="git commit -m"
alias bc="git rev-parse HEAD | tr -d '\n' | pbcopy"
alias gil="run open https://github.com/issues/assigned"
alias gbi="run open https://github.com/orgs/18F/projects/5?card_filter_query=assignee%3A${GSA_USERNAME}"
alias gpl="run hub pr list"
alias gi="run hub issue"

######## functions ########

#### create/checkout new git branch named ${1} ####
newb() {
  gom
  run git checkout -b "${1}"
}

#### cd to ${GITHUB_PARENT_DIR}/identity-${1} ####
gid() {
  run cd "${GITHUB_PARENT_DIR}/identity-${1}"
}

#### open specified PR in browser
gps() {
  run hub pr show "${1}"
}

#### open specified issue in browser
gio() {
  local repo=$(git remote get-url --all origin | sed -E 's/.*:(.*)\..*/\1/')
  run open "https://github.com/${repo}/issues/${1}"
}

#### add files, commit w/message, push to origin with set-upstream ####
gpb() {
  run git add --all
  run git commit -m "$@"
  run git push --set-upstream origin $(git_current_branch)
}

#### delete either current branch or branch name = ${1}; end on main ####
delb() {
  local branch=$1
  [ -z ${1} ] && branch=$(git_current_branch)
  gom
  run git branch -d $branch
}

#### merge/close PR, delete current/specified branch unless -n is set ####
gmpr () {
  local branch=$(git_current_branch)
  local save_branch=false
  if [[ "${branch}" == 'main' ]] ; then
    echo "Cannot be run from main branch!"
    break 1
  fi
  while getopts n opt ; do
    case "${opt}" in
      n) save_branch=true ;;
    esac
  done
  run git checkout main && \
  run git pull origin main && \
  run git checkout $branch && \
  run git rebase main && \
  run git push --force-with-lease && \
  run git merge main --no-edit && \
  run git checkout main && \
  run git merge --no-edit --no-ff $branch && \
  run git push origin main
  [[ "${save_branch}" == 'true' ]] || delb $branch
}

#### add>commit>push -u>open PR with $msg ####
gpr() {
  gh_revs
  local msg=("${@}")
  gpb "${msg[@]}"
  run hub pull-request -p -r "${GH_REVS}" -m "${msg[@]}" -e
}

#### create issues ####
ghi() {
  local ASSIGNEE=
  local TEMPLATE="feature_request"
  while getopts a:bon opt ; do
    case "${opt}" in
      a) ASSIGNEE="-a ${OPTARG}" ;;
      b) TEMPLATE="bug_report" ;;
      o) TEMPLATE="offboard-devops" ;;
      n) TEMPLATE="onboarding-devops" ;;
      *) badopt ;;
    esac
  done
  run hub issue create --edit \
    -F "${GITHUB_PARENT_DIR}/identity-devops/.github/ISSUE_TEMPLATE/${TEMPLATE}.md" "${ASSIGNEE}"
}

#### pull branch up to current version ####
grff() {
  if [[ $(cat VERSION.txt | grep 'pre-') ]] ; then
    echo "Must be run from an appropriate stages/ branch"
  else
    git pull --ff-only origin v$(($(cat VERSION.txt)+1))
  fi
}

#### create private gist from clipboard ####
ggc() {
  local file="${1}"
  local desc=("${@:2}")
  run gist -oPp -d "${desc[@]}" -f ${file}
}
