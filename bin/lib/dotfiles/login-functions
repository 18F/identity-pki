############# login.gov aliases/functions #############
if [[ ! $(brew cask list | grep aws-vault) ]] ; then
  brew cask install aws-vault || { echo "aws-vault not installed!" && exit 1 ; }
fi

######## aliases ########
alias bb="git checkout stages/${GSA_USERNAME}"
alias laptop='bash <(curl -s https://raw.githubusercontent.com/18F/laptop/master/laptop)'

######## functions ########
USE_RUN=1
run() {
  if [[ $USE_RUN -gt 0 ]] ; then
    if [ -t 1 ]; then
      echo -ne "\\033[1;36m"
    fi

    echo >&2 "+ $*"

    if [ -t 1 ]; then
      echo -ne '\033[m'
    fi
  fi
  "$@"
}

badopt() {
  echo "Usage: ${usage}"
  break 1
}

#### fix stuck PKCS11 when using OPENSC_LIB ####
pivssh() {
  if [[ $(env | grep OSXSC_LIB) ]] ; then
    PKCS11=${OSXSC_LIB}
  elif [[ $(env | grep OPENSC_LIB) ]] ; then
    PKCS11=${OPENSC_LIB}
  fi
  run ssh-add -e "${PKCS11}" || true
  while ! ssh-add -L | grep -q "${PKCS11}"; do
    run ssh-add -Ks "${PKCS11}"
  done
}

#### prepend any command with 'aws-vault exec' ####
av() {
  read -r -d '' usage <<'EOF'

                                                  $$\      $$$$$$\               $$\    
                                                $$$$ |    $$  __$$\            $$$$$$\  
      $$$$$$\    $$\    $$\                     \_$$ |    \__/  $$ |          $$  __$$\ 
      \____$$\   \$$\  $$  |          $$$$$$\     $$ |     $$$$$$  |          $$ /  \__|
      $$$$$$$ |   \$$\$$  /           \______|    $$ |    $$  ____/           \$$$$$$\  
     $$  __$$ |    \$$$  /                        $$ |    $$ |                 \___ $$\ 
     \$$$$$$$ |     \$  /                       $$$$$$\   $$$$$$$$\           $$\  \$$ |
      \_______|      \_/                        \______|  \________|          \$$$$$$  |
                                                                               \_$$  _/ 
                                                                                 \ _/   

                     <VAULT_COMMAND>                <AWS_PROFILE>          <COMMAND(S)>
              c = exec                            i = sandbox              
              l = login                           l = prod                enter a command
aws-vault  1) v = exec --no-session \          2) m = master           3) as if prepending
                       --duration=2h       s = sms-sandbox         with AWS_PROFILE
              i = login (incognito)               p = sms-prod            set as needed
              o = login (and then go to           a = analytics           (use with 'exec')
                  CloudWatch in AWS Console)      d = $AWS_PROFILE

EXAMPLE: av -ic $CMD ==> aws-vault exec sandbox-admin -- $CMD

NOTE: profile invoked will be named "${AWS_PROFILE}-admin" ;
set names in ~/.aws/config appropriately
EOF
  [[ $# == 0 ]] && badopt
  local cmd=("${@:2}")
  local yk ttl
  ttl_time=$(aws-vault list --sessions | awk '{print $1}')
  if [[ -z ${ttl_time} ]] || [[ ${ttl_time} -lt $(date +%s) ]] ; then
    ttl="--duration=1h"
    [[ $(command -v ykman) ]] && yk="--mfa-token=$(ykman oath code --single aws/identity-master | awk '{print $NF}')"
  fi
  while getopts d:i:l:s:p:a:m: opt
  do
    case "${opt}" in          ## profile in aws-vault exec ${profile}
      d) [ -z $profile ] && profile=${AWS_PROFILE} ;;
      i) profile='sandbox-admin'     ;;
      l) profile='prod-admin'        ;;
      s) profile='sms-sandbox-admin' ;;
      p) profile='sms-prod-admin'    ;;
      a) profile='analytics-admin'   ;;
      m) profile='master-admin'      ;;
    h|*) badopt                      ;;
    esac
    case "${OPTARG}" in       ## syntax of aws-vault command
      c) run aws-vault exec ${profile} ${ttl} ${yk} -- "${cmd[@]}" ;;
      l) run aws-vault login ${profile} ${ttl} ${yk}               ;;
      v)
         run aws-vault remove master --sessions-only
         [[ $(command -v ykman) ]] && yk="--mfa-token=$(ykman oath code --single aws/identity-master | awk '{print $NF}')"
         run aws-vault exec ${profile} --no-session --duration=2h ${yk}
      ;;
      i) run aws-vault login ${profile} ${ttl} ${yk} --stdout |
           xargs -t /Applications/Google\ Chrome.app/Contents/MacOS/Google\ Chrome \
           --args --incognito --new-window
      ;;
      o) run aws-vault login ${profile} ${ttl} ${yk} --stdout |
           sed 's/console%2Fhome%3Fregion%3Dus-west-2/cloudwatch%2Fhome%3Fregion%3Dus-west-2%23logStream%3Agroup%3D%2Fvar%2Flog%2Fcloud-init-output.log%3BstreamFilter%3DtypeLogStreamPrefix/' |
           xargs -t /Applications/Google\ Chrome.app/Contents/MacOS/Google\ Chrome 2>/dev/null
      ;;
    h|*) badopt ${OPTARG} ;;
    esac
  done
}

#### run tf-deploy with common Terraform commands and any AWS profile/TF directory ####
td() {
  read -r -d '' usage <<'EOF'

  $$\             $$\                       $$\      $$$$$$\             $$$$$$\  
  $$ |            $$ |                    $$$$ |    $$  __$$\           $$ ___$$\ 
$$$$$$\      $$$$$$$ |                    \_$$ |    \__/  $$ |          \_/   $$ |
\_$$  _|    $$  __$$ |          $$$$$$\     $$ |     $$$$$$  |            $$$$$ / 
  $$ |      $$ /  $$ |          \______|    $$ |    $$  ____/             \___$$\ 
  $$ |$$\   $$ |  $$ |                      $$ |    $$ |                $$\   $$ |
  \$$$$  |  \$$$$$$$ |                    $$$$$$\   $$$$$$$$\           \$$$$$$  |
   \____/    \_______|                    \______|  \________|           \______/ 
                          <TF_DIR>        <TF_COMMAND>        <ENVIRONMENT>
                         m = master       a = apply          
                         c = core         p = plan           if left blank:
    bin/tf-deploy   1)   a = app     2)   d = destroy   3)   app = $GSA_USERNAME
                         s = sms          l = state          master = global
                         l = all              list           others = sandbox

    EXAMPLE: td -aa dev ==> tf-deploy dev terraform-app apply

NOTE: ENVIRONMENT used to determine AWS_PROFILE passed to aws-vault command
EOF
  [[ $# == 0 ]] && badopt
  local build_env="${@:2}"
  local profile="${AWS_PROFILE}"
  local av_flag='-dc'
  while getopts vc:m:c:a:s:l: opt
  do
    case "${OPTARG}" in
      a) tf_cmd='apply'      ;;
      p) tf_cmd='plan'       ;;
      d) tf_cmd='destroy'    ;;
      l) tf_cmd='state list' ;;
      *) badopt ${OPTARG}    ;;
    esac
    case "${opt}" in            ## opt = 1 in `td -${1}${OPTARG}`
      v) av_flag='-dv'       ;; ## opt = 1 in `td -v${1}${OPTARG}`
      m) tf_dir='master'     ;;
      c) tf_dir='core'       ;;
      a) tf_dir='app'        ;;
      s) tf_dir='sms'        ;;
      l) tf_dir='all'        ;;
      *) badopt ${opt}       ;;
    esac
  done
  case "${tf_dir}" in
    master) av -mc tf-deploy terraform-master/global ${tf_cmd} ;;
    app)
      [[ -z "${build_env}" ]] && build_env="${GSA_USERNAME}"
      [[ "${build_env}" =~ "staging|prod" ]] && profile="prod-admin"
      av ${av_flag} tf-deploy ${build_env} "terraform-${tf_dir}" ${tf_cmd}
    ;;
    core|all|sms)
      [[ -z "${build_env}" ]] && build_env="sandbox"
      profile="${build_env}-admin"
      [[ "${tf_dir}" == 'sms' ]] && profile="sms-${build_env}-admin"
      av ${av_flag} tf-deploy "terraform-${tf_dir}"/${build_env} ${tf_cmd}
    ;;
  esac
}

#### run terraform plan with trimmed-down output ####
tpc() {
  while getopts mcasi opt ; do plan=$(td -${opt}p "${@:2}") ; done
  echo $plan | sed $'s,\x1b\\[[0-9;]*[a-zA-Z],,g' | grep -E '^\s+[\#\+\-\~]'
}

# run ssh-instance via av
# reset/re-add PKCS11 key if kicked out, then retry ssh-instance
sshi() {
  local profile="${AWS_PROFILE}"
  av -dc ssh-instance "$@" || (pivssh && sshi "$@")
}

#### run bundle exec with common commands ####
be() {
  read -r -d '' usage <<'EOF'

       $$\                                         $$\      $$$$$$\  
       $$ |                                      $$$$ |    $$  __$$\ 
       $$$$$$$\     $$$$$$\                      \_$$ |    \__/  $$ |
       $$  __$$\   $$  __$$\           $$$$$$\     $$ |     $$$$$$  |
       $$ |  $$ |  $$$$$$$$ |          \______|    $$ |    $$  ____/ 
       $$ |  $$ |  $$   ____|                      $$ |    $$ |      
       $$$$$$$  |  \$$$$$$$\                     $$$$$$\   $$$$$$$$\ 
       \_______/    \_______|                    \______|  \________|
      
                                              < kitchen >      < berks >
                                             kt = test        bu = update
                                             kc = converge    bi = install    
                     bundle exec             kl = login
                                             ki = list         < rails >
                                             kd = destroy     rk = rake
                                             kv = verify      rc = rails c
                                             ko = console     rs = rspec
      
      EXAMPLE: be -kc ==>
         aws-vault exec AWS_PROFILE -- bundle exec kitchen converge

NOTE: ENVIRONMENT used to determine AWS_PROFILE passed to aws-vault command
EOF
  [[ $# == 0 ]] && badopt
  local profile="${AWS_PROFILE}"
  local av_flag='-dc'
  while getopts vk:b:r: opt
  do
    case "${opt}" in       ## opt in `be -${opt}${OPTARG}`
      v) av_flag='-dv' ;;
      k) case "${OPTARG}" in
          t) cmd='kitchen test'     ;;
          c) cmd='kitchen converge' ;;
          l) cmd='kitchen login'    ;;
          i) cmd='kitchen list'     ;;
          d) cmd='kitchen destroy'  ;;
          v) cmd='kitchen verify'   ;;
          o) cmd='kitchen console'  ;;
          *) badopt                 ;;
         esac
      ;;
      b) case "${OPTARG}" in
          u) cmd='berks update'  ;;
          i) cmd='berks install' ;;
          *) badopt              ;;
         esac
      ;;
      r) case "${OPTARG}" in
          k) cmd='rake'    ;;
          c) cmd='rails c' ;;
          s) cmd='rspec'   ;;
          *) badopt        ;;
         esac
      ;;
      h|*) badopt ${opt} ;;  
    esac
  done
  av ${av_flag} bundle exec ${cmd}
} 


#### quickly run common cloudlib aliases/commands with any AWS_PROFILE/env ####
vcl() {
  read -r -d '' usage <<'EOF'

                       $$\                $$\     $$$$$$\        $$$$$$\       $$\   $$\ 
                       $$ |             $$$$ |   $$  __$$\      $$ ___$$\      $$ |  $$ |
$$\    $$\   $$$$$$$\  $$ |             \_$$ |   \__/  $$ |     \_/   $$ |     $$ |  $$ |
\$$\  $$  | $$  _____| $$ |     $$$$$$\   $$ |    $$$$$$  |       $$$$$ /      $$$$$$$$ |
 \$$\$$  /  $$ /       $$ |     \______|  $$ |   $$  ____/        \___$$\      \_____$$ |
  \$$$  /   $$ |       $$ |               $$ |   $$ |           $$\   $$ |           $$ |
   \$  /    \$$$$$$$\  $$ |             $$$$$$\  $$$$$$$$\      \$$$$$$  |           $$ |
    \_/      \_______| \__|             \______| \________|      \______/            \__|

                <CLOUDLIB_COMMAND>                        <TYPE>          
    e) ls-servers -e                                 a = app              
    l) ls-servers -n asg-<ENV> <TYPE>              e = elasticsearch    
    n) ssh-instance --newest asg-<ENV>-<TYPE>      i = idp              
    o) ssh-instance --oldest asg-<ENV>-<TYPE>      j = jumphost         
$1  a) ssh-instance --any asg-<ENV>-<TYPE>     $2  k = elk           $3 <ENV>    $4 <DATA>
    i) ssh-instance ${2} (no other args)           m = migration        
    r) asg-recycle <ENV> <TYPE>                    o = outboundproxy    
    s) asg-size <ENV> <TYPE> <DATA>                p = pivcac           
    w) cw tail -f \                                
        /var/log/cloud-init-output.log:            A = ALL (use w/            
      <TYPE>-<DATA>.<ENV>.<ACCOUNT>                    recyle only)

        EXAMPLE: vcl -ri dev ==> aws-vault exec sandbox-admin -- asg-recycle dev idp
NOTES:
- ENV defaults to GSA_USERNAME unless otherwise specified
- DATA is used for either 1) count for asg-size or 2) instance ID for cw
- ENV used to determine AWS_PROFILE passed to aws-vault command

EOF
  local type account
  local profile="${AWS_PROFILE}"
  local build_env="${GSA_USERNAME}"
  local data="${3}"
  [[ -z "${2}" ]] || build_env="${2}"
  if [[ "${build_env}" =~ "staging|prod" ]] ; then
    profile="prod-admin"
    account="login.gov"
  else
    account="identitysandbox.gov"
  fi
  while getopts el:n:o:a:r:s:w: opt ; do
    case "${OPTARG}" in       ## 2 in `vcl -${1}${2}`
      A) type='ALL'           ;;
      a) type='app'           ;;
      e) type='elasticsearch' ;;
      i) type='idp'           ;;
      j) type='jumphost'      ;;
      k) type='elk'           ;;
      m) type='migration'     ;;
      o) type='outboundproxy' ;;
      p) type='pivcac'        ;;
      *) [[ ${opt} =~ 'e|i' ]] || badopt ${OPTARG} ;;
    esac
    case "${opt}" in          ## 1 in `vcl -${1}${2}`
      e) av -dc ls-servers -e ${build_env}             ;;
      l) av -dc ls-servers -n asg-${build_env}-${type} ;;
      n) sshi --newest asg-${build_env}-${type}        ;;
      o) sshi --oldest asg-${build_env}-${type}        ;;
      a) sshi --any asg-${build_env}-${type}           ;;
      i) sshi ${2}                                     ;;
      r) av -dc asg-recycle ${build_env} ${type}       ;;
      s) [[ -z "${data}" ]] && { data="${2}" && build_env="${GSA_USERNAME}" ; }
         av -dc asg-size ${build_env} ${type} ${data}
      ;;
      w) [[ -z "${data}" ]] && { data="${2}" && build_env="${GSA_USERNAME}" ; }
         av -dc cw tail -f \
          /var/log/cloud-init-output.log:${type}-${data}.${build_env}.${account}
      ;;
      *) badopt ${opt} ;;
    esac
  done
}

#### call the cl elasticsearch commands with av() ####
ve() {
  read -r -d '' usage <<'EOF'

                                     $$\          $$$$$$\         $$$$$$\  
                                   $$$$ |        $$  __$$\       $$ ___$$\ 
$$\    $$\  $$$$$$\                \_$$ |        \__/  $$ |      \_/   $$ |
\$$\  $$  |$$  __$$\       $$$$$$\   $$ |         $$$$$$  |        $$$$$ / 
 \$$\$$  / $$$$$$$$ |      \______|  $$ |        $$  ____/         \___$$\ 
  \$$$  /  $$   ____|                $$ |        $$ |            $$\   $$ |
   \$  /   \$$$$$$$\               $$$$$$\       $$$$$$$$\       \$$$$$$  |
    \_/     \_______|              \______|      \________|       \______/ 

                        <COMMAND>                   
                                                    
  cl elasticsearch  $1  s = check_status         $2 <ENV>   $3 <DATA>
                        d = drain_old_nodes                    (number of
                        c = clear_node_drain                    min masters)
                        u = update_minimum_masters  
      
 EXAMPLE: ve -d int ==>
    aws-vault exec sandbox-admin -- cl elasticsearch drain_old_nodes int

NOTE: ENVIRONMENT used to determine AWS_PROFILE passed to aws-vault command

EOF
  local profile="${AWS_PROFILE}"
  local build_env="${GSA_USERNAME}"
  local data="${3}"
  [[ -z "${2}" ]] || build_env="${2}"
  [[ "${build_env}" =~ "staging|prod" ]] && profile="prod-admin"
  while getopts sdcu opt ; do
    case "${opt}" in
      s) av -dc cl elasticsearch check_status ${build_env} ;;
      d) av -dc cl elasticsearch drain_old_nodes ${build_env} ;;
      c) av -dc cl elasticsearch clear_node_drain ${build_env} ;;
      u) [[ -z "${data}" ]] && { data="${2}" && build_env="${GSA_USERNAME}" ; }
          av -dc cl elasticsearch update_minimum_masters ${build_env} ${data}
      ;;
      *) badopt ${opt} ;;
    esac
  done
}

#### set IdentityCookbooksRef in Berksfile to commit '${1}' ####
idcb() {
  sed -i '' -E "s/(IdentityCookbooksRef = ).*\'/\1\'${1}\'/" Berksfile
  be -bu
}

#### set an instance's Auto Scaling health to Unhealthy ####
poison () {
  [[ -z ${2} ]] || AWS_PROFILE="${2}"
  av -dc aws autoscaling set-instance-health --instance-id ${1} --health-status Unhealthy
  av -dc aws autoscaling describe-auto-scaling-instances --instance-ids ${1}
}

######## shell startup ########
for key in $(env | grep ".*SSH_KEY=" | sed 's/=.*$//') ; do
  if [ -f $(eval echo \$$key) ] ; then
    while ! ssh-add -L | grep -q $key ; do
      ssh-add -K $(eval echo \$$key)
    done
  fi
done
