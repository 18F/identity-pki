#!/bin/bash
. "$(dirname "$0")/.subfunctions"

############# login.gov aliases/functions #############
if [[ ! $(brew list --cask | grep aws-vault) ]] ; then
  brew cask install aws-vault || { echo "aws-vault not installed!" && break 1 ; }
fi

######## aliases ########
alias bb="git checkout stages/${GSA_USERNAME}"
alias laptop='bash <(curl -s https://raw.githubusercontent.com/18F/laptop/master/laptop)'
alias ac='aws-vault clear'
alias al='aws-vault list'

#### fast aws-vault commands ####
av() {
  read -r -d '' usage <<'EOF'
TBD
EOF
  [[ $# == 0 ]] && badopt
  while getopts i:l:s:p:a:t:o:m:x: opt
  do
    case "${opt}" in
      i) AV_PROFILE='sandbox-admin'         ;;
      l) AV_PROFILE='prod-admin'            ;;
      s) AV_PROFILE='sms-sandbox-admin'     ;;
      p) AV_PROFILE='sms-prod-admin'        ;;
      a) AV_PROFILE='alpha-admin'           ;;
      t) AV_PROFILE='tooling-sandbox-admin' ;;
      o) AV_PROFILE='tooling-prod-admin'    ;;
      m) AV_PROFILE='master-admin'          ;;
      x) AV_PROFILE='x' && shift 1          ;;
      h|*) badopt ;;
    esac
    AV_CMD="${OPTARG}" 
  done
  if [[ ${AV_PROFILE} == 'x' ]] ; then
    AV_PROFILE="${1}"
  fi
  shift
  case "${AV_CMD}" in
    v) run aws-vault exec ${AV_PROFILE} --no-session --duration "${1:-1}h" ;;
    l) run aws-vault login ${AV_PROFILE} --stdout |
        sed -E "s/%2Fconsole%2F/%2F${1:-console}%2F/" |
        xargs -t /Applications/Google\ Chrome.app/Contents/MacOS/Google\ Chrome 2>/dev/null
    ;;
    c) run_av "$@" ;;
    *) badopt ;;
  esac
}

#### quick SSM access ; requires session-manager-plugin to work! ####
ssc() {
  local SSM_CMD
  INSTANCE_ID=${1}
  env_get "${2}"
  shift 2
  while getopts ifs opt
  do
          case $opt in
                  i) SSM_CMD="sudo su - ${GSA_USERNAME}"  ;;
                  f) SSM_CMD="sudo tail -f /var/log/cloud-init-output.log"  ;;
                  s) SSM_CMD="sudo su - "  ;;
          esac
  done
  [ -z $SSM_CMD ] && SSM_CMD="$@"
  run_av aws ssm start-session \
         --document-name AWS-StartInteractiveCommand \
         --parameters command="'${SSM_CMD}'" \
         --target "${INSTANCE_ID}"
}

#### quickly run common cloudlib aliases/commands with any AWS_PROFILE/env ####
vcl() {
  read -r -d '' usage <<'EOF'

TBD
 
EOF
  [[ $# == 0 ]] && badopt
  local CL_TABLE EC2_TYPE
  env_get ${2}
  while getopts el:c:r:s: opt
  do
    case "${OPTARG}" in
      A) EC2_TYPE='ALL'                     ;;
      a) EC2_TYPE='app'                     ;;
      i) EC2_TYPE='idp'                     ;;
      x) EC2_TYPE='idpxtra'                 ;;
      j) EC2_TYPE='jumphost'                ;;
      m) EC2_TYPE='migration'               ;;
      o) EC2_TYPE='outboundproxy'           ;;
      p) EC2_TYPE='pivcac'                  ;;
      s) EC2_TYPE='scrubhost'               ;;
      w) EC2_TYPE='worker'                  ;;
      *) [[ ${opt} =~ 'e' ]] || badopt ${1} ;;
    esac
    case "${opt}" in
      e) CL_TABLE=$(run_av ls-servers -Hlqe ${EC2_ENV})                 ;;
      l) CL_TABLE=$(run_av ls-servers -Hlqn asg-${EC2_ENV}-${EC2_TYPE}) ;;
      c) run_av scale-in-old-instances -qf ${EC2_ENV} ${EC2_TYPE}       ;;
      r) run_av asg-recycle -q ${EC2_ENV} ${EC2_TYPE}                   ;;
      s) run_av asg-size -q ${EC2_ENV} ${EC2_TYPE} ${3-}                ;;
      *) badopt ${opt}                                                  ;;
    esac
  done
  [[ -z "${CL_TABLE}" ]] || echo "${CL_TABLE}" |
                            sed '1d;$d;s/\|/ /g;s/asg\-//g' |
                            awk '{print $1, $2, $3, $4, $6, $12}' |
                            column -t
}

### get secrets bucket ###
get_secrets() {
  PROFILE=${1}
  GIT_DIR=$(git rev-parse --show-toplevel)
  if [ "$(echo ${GIT_DIR} | awk -F/ '{print $NF}')" != 'identity-devops' ]
  then
    echo "Must run in identity-devops"
    false
  else
    ACCOUNT=$(grep "# login-${PROFILE}" "${GIT_DIR}/terraform/master/global/main.tf" |
              sed -E 's/^.*\"([0-9]+)\".*$/\1/')
    echo "s3://login-gov.secrets.${ACCOUNT}-us-west-2/"
  fi
}
