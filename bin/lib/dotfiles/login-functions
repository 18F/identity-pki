#!/bin/bash
. "$(dirname "$0")/.subfunctions"

############# login.gov aliases/functions #############
if [[ ! $(brew list --cask | grep aws-vault) ]] ; then
  brew cask install aws-vault || { echo "aws-vault not installed!" && exit 1 ; }
fi

######## aliases ########
alias bb="git checkout stages/${GSA_USERNAME}"
alias laptop='bash <(curl -s https://raw.githubusercontent.com/18F/laptop/master/laptop)'
alias ac='aws-vault clear'
alias al='aws-vault list'

#### fast aws-vault commands ####
av() {
  read -r -d '' usage <<'EOF'
TBD
EOF
  [[ $# == 0 ]] && badopt
  while getopts i:l:s:p:a:d:o:m:x: opt
  do
    case "${opt}" in
      i) AV_PROFILE='sandbox-admin'     ;;
      l) AV_PROFILE='prod-admin'        ;;
      s) AV_PROFILE='sms-sandbox-admin' ;;
      p) AV_PROFILE='sms-prod-admin'    ;;
      a) AV_PROFILE='analytics-admin'   ;;
      t) AV_PROFILE='interviews-admin'  ;;
      d) AV_PROFILE='secops-dev-admin'  ;;
      o) AV_PROFILE='secops-prod-admin' ;;
      m) AV_PROFILE='master-admin'      ;;
      x) AV_PROFILE='x' && shift 1      ;;
      h|*) badopt ;;
    esac
    AV_CMD="${OPTARG}" 
  done
  if [[ ${AV_PROFILE} == 'x' ]] ; then
    AV_PROFILE="${1}"
  fi
  shift
  case "${AV_CMD}" in
    v) run aws-vault exec ${AV_PROFILE} --no-session --duration "${1:-1}h" ;;
    l) run aws-vault login ${AV_PROFILE} --stdout |
        sed -E "s/%2Fconsole%2F/%2F${1:-console}%2F/" |
        xargs -t /Applications/Google\ Chrome.app/Contents/MacOS/Google\ Chrome 2>/dev/null
    ;;
    c) run_av "$@" ;;
    *) badopt ;;
  esac
}

#### run tf-deploy with common Terraform commands and any AWS profile/TF directory ####
td() {
  read -r -d '' usage <<'EOF'

TBD

EOF
  [[ $# == 0 ]] && badopt
  declare {TF_SL,TEST_RUN}=
  while getopts apdst opt
  do
    case $opt in
      a) TF_CMD="apply"      ;;
      p) TF_CMD="plan"       ;;
      d) TF_CMD="destroy"    ;;
      s) TF_CMD="state"      ;;
      t) TEST_RUN="-t"       ;;
      *) badopt ${opt}       ;;
    esac
  done
  [[ "${TF_CMD}" == "state" ]] && TF_SL="list"
  shift $((OPTIND-1))
  TF_DIR="${1-app}"
  EC2_ENV="${2-sandbox}"
  case $TF_DIR in
    all|core) AV_PROFILE="${EC2_ENV}-admin" ;;
    app) env_get "${EC2_ENV}" ;;
    master)
      AV_PROFILE='master-admin'
      EC2_ENV="global"
    ;;
    sms) AV_PROFILE="sms-${EC2_ENV}-admin" ;;
  esac
  if [[ "${TF_DIR}" == 'app' ]] ; then
    run_av tf-deploy ${TEST_RUN} ${EC2_ENV} ${TF_DIR} ${TF_CMD} ${TF_SL}
  else
    run_av tf-deploy ${TEST_RUN} ${TF_DIR}/${EC2_ENV} ${TF_CMD} ${TF_SL}
  fi
  unset TF_DIR
}

#### run terraform plan with trimmed-down output ####
tpc() {
  plan=$(td -p "${@}")
  echo $plan | sed $'s,\x1b\\[[0-9;]*[a-zA-Z],,g' |
               grep --color=auto -E '(^\s+[-\#\+\~\>]|\s->)\s' |
               sed -E 's/(user_data += ").*"/\1\*"/'
}

#### quick SSM access ; requires session-manager-plugin to work! ####
ssc() {
  local SSM_CMD
  INSTANCE_ID=${1}
  env_get "${2}"
  shift 2
  while getopts ifs opt
  do
          case $opt in
                  i) SSM_CMD="sudo su - ${GSA_USERNAME}"  ;;
                  f) SSM_CMD="sudo tail -f /var/log/cloud-init-output.log"  ;;
                  s) SSM_CMD="sudo su - "  ;;
          esac
  done
  [ -z $SSM_CMD ] && SSM_CMD="$@"
  run_av aws ssm start-session \
         --document-name AWS-StartInteractiveCommand \
         --parameters command="'${SSM_CMD}'" \
         --target "${INSTANCE_ID}"
}
#### run bundle exec with common commands ####
be() {
  read -r -d '' usage <<'EOF'

TBD

EOF
  [[ $# == 0 ]] && badopt
  local BUNDLE_CMD
  AV_PROFILE='sandbox-admin'
  while getopts vk:b:r: opt
  do
    case "${opt}" in       ## opt in `be -${opt}${OPTARG}`
      k) case "${OPTARG}" in
          t) BUNDLE_CMD='kitchen test'     ;;
          c) BUNDLE_CMD='kitchen converge' ;;
          l) BUNDLE_CMD='kitchen login'    ;;
          i) BUNDLE_CMD='kitchen list'     ;;
          d) BUNDLE_CMD='kitchen destroy'  ;;
          v) BUNDLE_CMD='kitchen verify'   ;;
          o) BUNDLE_CMD='kitchen console'  ;;
          *) badopt                        ;;
         esac
      ;;
      b) case "${OPTARG}" in
          u) BUNDLE_CMD='berks update'  ;;
          i) BUNDLE_CMD='berks install' ;;
          *) badopt                     ;;
         esac
      ;;
      r) case "${OPTARG}" in
          k) BUNDLE_CMD='rake'    ;;
          c) BUNDLE_CMD='rails c' ;;
          s) BUNDLE_CMD='rspec'   ;;
          *) badopt               ;;
         esac
      ;;
      h|*) badopt ${opt} ;;  
    esac
  done
  run_av bundle exec ${BUNDLE_CMD}
} 


#### quickly run common cloudlib aliases/commands with any AWS_PROFILE/env ####
vcl() {
  read -r -d '' usage <<'EOF'

TBD
 
EOF
  [[ $# == 0 ]] && badopt
  local CL_TABLE EC2_TYPE
  env_get ${2}
  while getopts el:c:r:s: opt
  do
    case "${OPTARG}" in
      A) EC2_TYPE='ALL'                     ;;
      a) EC2_TYPE='app'                     ;;
      e) EC2_TYPE='elasticsearch'           ;;
      i) EC2_TYPE='idp'                     ;;
      x) EC2_TYPE='idpxtra'                 ;;
      j) EC2_TYPE='jumphost'                ;;
      k) EC2_TYPE='elk'                     ;;
      m) EC2_TYPE='migration'               ;;
      o) EC2_TYPE='outboundproxy'           ;;
      p) EC2_TYPE='pivcac'                  ;;
      *) [[ ${opt} =~ 'e' ]] || badopt ${1} ;;
    esac
    case "${opt}" in
      e) CL_TABLE=$(run_av ls-servers -Hlqe ${EC2_ENV})                 ;;
      l) CL_TABLE=$(run_av ls-servers -Hlqn asg-${EC2_ENV}-${EC2_TYPE}) ;;
      c) run_av scale-in-old-instances -q ${EC2_ENV} ${EC2_TYPE}        ;;
      r) run_av asg-recycle -q ${EC2_ENV} ${EC2_TYPE}                   ;;
      s) run_av asg-size -q ${EC2_ENV} ${EC2_TYPE} ${3-}                ;;
      *) badopt ${opt}                                                  ;;
    esac
  done
  [[ -z "${CL_TABLE}" ]] || echo "${CL_TABLE}" |
                            sed '1d;$d;s/\|/ /g;s/asg\-//g' |
                            awk '{print $1, $2, $3, $4, $6, $12}' |
                            column -t
}
