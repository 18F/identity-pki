#!/bin/bash

trap ctrl_c INT

set -euo pipefail

. "$(dirname "$0")/lib/common.sh"

usage() {
  cat >&2 <<EOM

Usage: ${0} -d DOCUMENT -e ENVIRONMENT -r ROLE [-c RATE|-p PERCENT|-f FAILS|-ovh]

Flags:
  -c : Set concurrent run rate by number
  -p : Set concurrent rate by percent (default: 25)
  -f : Set number of errors/failures allowed before terminating (default: 0)
  -o : Output list of targeted instances and full command output
  -v : Be more verbose
  -y : Run without prompting for confirmation
  -h : Display help

Must be run with \`aws-vault\`, whether in a session or with \`exec\`!

EOM
}

help_me() {
  cat >&2 <<EOM

Executes SSM command \$DOCUMENT against all \$ENVIRONMENT-\$ROLE EC2 instances.
Verifies the existence/validity of \$DOCUMENT, outputs the number of instances
to run \$DOCUMENT against, and (upon confirmation) will run \`aws ssm send-command\`
and output the Command ID of the operation.
EOM
  usage
  exit 0
}

# trap ctrl-c and call ctrl_c
ctrl_c() {
  if [[ ! -z ${CMD_OUT:-} ]] ; then
    echo -e "\nExiting due to Ctrl+C (SIGINT)"
    echo "Command status:"
    print_command_data
  fi
  exit
}

print_command_data() {
  DATA=()
  if [[ ${FULL_OUTPUT} == 'yes' ]] ; then
    CMD_OUT=$(aws ssm list-command-invocations --command-id "${CMD_ID}" |
    jq -r '[.CommandInvocations[]|{InstanceId:.InstanceId,Status:.Status,StatusDetails:.StatusDetails,
        StandardOutputUrl:(if .StandardOutputUrl == "" then "N/A" else .StandardOutputUrl end),
        StandardErrorUrl:(if .StandardErrorUrl == "" then "N/A" else .StandardErrorUrl end)}]')
  fi
  DATA+=$(echo -e "$(echo ${CMD_OUT}|jq -r '.|
  (map(keys_unsorted) | add | unique) as $cols | $cols, map(. as $row | $cols | map($row[.]))[] | @csv' |
  sed -E 's/^/\|/g;s/$/\|/g;s/\"//g;s/,/ /g')")
  
  HEADERS=$(echo "${DATA[@]}" | head -n 1)
  CMD_DATA=$(echo "${DATA[@]}" | tail -n +2)
  NUM_COLS=$(echo "${DATA[@]}" | awk '{print NF}' | sort -nu | tail -n 1)

  echo
  mdout "${HEADERS}\n$(echo "|$(printf "%${NUM_COLS}s" |
           sed 's/ /----- |/g')")\n${CMD_DATA}"
  echo

  if [[ ${FULL_OUTPUT} == 'yes' ]] ; then
    ACTUAL_TARGETS=$(echo "${DATA[@]}" | tail -n +2 | wc -l | tr -d ' ')
  else
    ACTUAL_TARGETS=$(echo ${CMD_OUT} | jq -r '.[].Targets')
  fi

  if [[ ${ACTUAL_TARGETS} != ${NUM_TARGETS} ]] ; then
    echo_red "${NUM_TARGETS} instance(s) selected;"
    echo_red "actually run against ${ACTUAL_TARGETS} instance(s) instead."
    raise "Verify command status in AWS console before attempting to re-run!"
  fi
}

verify_root_repo

CONCUR='25%'
FAILS=0
FULL_OUTPUT='no'
AUTORUN=

while getopts d:e:r:c:p:f:ovyh opt; do
  case $opt in
    d) DOC="$OPTARG"       ;;
    e) TF_ENV="$OPTARG"    ;;
    r) ROLE="$OPTARG"      ;;
    c) CONCUR="$OPTARG"    ;;
    p) CONCUR="${OPTARG}%" ;;
    f) FAILS="$OPTARG"     ;;
    o) FULL_OUTPUT='yes'   ;;
    v) set -x              ;;
    y) AUTORUN='yes'       ;;
    h) help_me             ;;
    *) usage && exit 1     ;;
  esac
done

[[ $(env | grep 'AWS_VAULT=') ]] || raise 'Must be run with aws-vault!'

if [[ -z "${ROLE:-}" ]] || [[ -z "${TF_ENV:-}" ]] || [[ -z "${DOC:-}" ]] ; then
  raise "Must specify TF_ENV (-e), ROLE (-r), and DOC (-d)"
else
  echo
  DOC_NAME="$TF_ENV-ssm-cmd-$DOC"
  if [[ -z $(aws ssm list-documents --filters Key=Name,Values="${DOC_NAME}" |
             jq -r '.DocumentIdentifiers[].Name') ]] ; then
    raise "SSM document $TF_ENV-ssm-cmd-$DOC does not exist!"
  else
    echo_green "SSM document $TF_ENV-ssm-cmd-$DOC verified."
  fi
fi

echo_cyan "Getting instance count..."
NUM_TARGETS=$(aws ec2 describe-instances \
       --filter Name=tag:aws:autoscaling:groupName,Values="$TF_ENV-$ROLE" \
                Name=instance-state-name,Values=running \
       --query 'Reservations[].Instances[].[InstanceId]' \
       --output text | wc -l | tr -d ' ')

echo_green "${NUM_TARGETS} instance(s) selected."
if [[ -z ${AUTORUN} ]] ; then
  if ! prompt_yn "Run ${DOC} against ${TF_ENV}-${ROLE} instance(s)? " ; then
    echo_yellow "Aborting."
    exit 0
  fi
fi

echo && echo_cyan "Running $TF_ENV-ssm-cmd-$DOC..."

# determine whether or not to log command output; send to ssm-sessions if so
CONFIG_LINE=$(cat ${GIT_DIR}/terraform/app/ssm.tf | grep -n "${DOC}" |
              grep ' = {' | awk -F: '{print $1}')
LOGGING=$(cat ${GIT_DIR}/terraform/app/ssm.tf | tail -n +${CONFIG_LINE} |
          grep -m 1 'logging' | awk '{print $NF}')
if [[ ${LOGGING} == 'true' ]] ; then
  CLOUDWATCH_FLAG="CloudWatchOutputEnabled=true,CloudWatchLogGroupName=aws-ssm-sessions-${TF_ENV}"
else
  CLOUDWATCH_FLAG="CloudWatchOutputEnabled=false"
fi

SSM_CMD=$(run aws ssm send-command \
           --document-name "${DOC_NAME}" \
           --targets Key=tag:aws:autoscaling:groupName,Values="${TF_ENV}-${ROLE}" \
           --cloud-watch-output-config "${CLOUDWATCH_FLAG}" \
           --max-concurrency "${CONCUR}" --max-errors "${FAILS}")

CMD_ID=$(echo $SSM_CMD | jq -r '.Command.CommandId')
echo && echo_green "Command sent with ID $CMD_ID"

TOTAL_TIME=0
echo_cyan "Checking status; press Ctrl-C to exit and check manually..."
while [ -z "${CMD_OUT-}" ] || [[ $(echo ${CMD_OUT} | grep 'Pending\|Progress') ]] ; do
  TIMER=0
  while [ "${TIMER}" -lt 5 ] ; do
    echo -n "-"
    sleep 1
    ((TIMER++))
  done
  ((TOTAL_TIME++))

  if [ ${TOTAL_TIME-} -gt 60 ] ; then
    echo "Exiting after waiting 15 minutes. Current status:"
    echo "${CMD_OUT}"
    exit
  fi

  CMD_OUT=$(aws ssm list-commands --command-id "${CMD_ID}" |
    jq '[.Commands[]|{Status:.Status,Details:.StatusDetails,Targets:.TargetCount,
          Completed:.CompletedCount,Errors:.ErrorCount}]') 
done

echo && echo_green "Done:"
print_command_data