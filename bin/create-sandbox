#!/bin/bash

#### Build up a sandbox environment from scratch ####

set -euo pipefail

BASEPATH="$(dirname "$0")"
. "${BASEPATH}/lib/common.sh"
. "${BASEPATH}/lib/sandbox-lib.sh"

usage() {
  cat >&2 << EOM

Usage: ${0} [-casdmh12345] [TF_ENV] (will use \$GSA_USERNAME if not specified)

Flags (will run all if no flags specified):
  -c / -1 : Clear CloudWatch log groups left over from previous env destroy
  -a / -2 : Copy S3 app-secrets v1/application.yml files from dev to ENV
  -s / -3 : Copy S3 secrets listed in ./lib/build-keys from dev to ENV
  -d / -4 : Run terraform-apply + spin up 1 migration host
  -m / -5 : Schedule the ENV-migration ASG to reset to 0 in 15min
       -h : Detailed help

EOM
}

help_me() {
  cat >&2 << EOM
    
Usage: ${0} [-casdmh12345] [TF_ENV] (will use \$GSA_USERNAME if not specified)

Runs all necessary commands to create a sandbox application environment, \${TF_ENV},
in the login-sandbox account. Designed to run with no specified flags/arguments.

The tasks in this script can also be individually executed as follows:

  -c / -1 : Clear out and delete any CloudWatch log groups accidentally
            left over from a previous environment purge, if any exist
            (Step: 1_clear_log_groups)
  -a / -2 : Duplicate all v1/application.yml files for \`dev\`,
            within the login-gov.app-secrets bucket, for \${TF_ENV},
            replacing all instances of \`dev\` within with \${TF_ENV}
            (Step: 2_app_secrets)
  -s / -3 : Copy all files listed in ./lib/build-keys from the int/ dir
            within the login-gov.secrets bucket to a \${TF_ENV}/ dir in
            the same bucket
            (Step: 3_regular_secrets)
  -d / -4 : Run \`terraform apply -auto-approve\` against \${TF_ENV},
            spinning up 1 migration host to run database migrations
            as the environment comes up
            (Step: 4_tf_deploy)
  -m / -5 : Add a Scheduled Action to the \${TF_ENV}-migration Auto
            Scaling Group, which sets its Desired count back to 0 after
            15 minutes' time (as is done with IDP recycles)
            (Step: 5_migration_scaling)
  -h      : Displays this help

EOM
  exit 0
}

1_clear_log_groups() {
  for REGION in 'us-west-2' 'us-east-1' ; do
    for LOG_GROUP in $(ave aws logs describe-log-groups --region ${REGION} |
      jq --arg TF "${TF_ENV}" -r '.logGroups[]|
      select(.logGroupName|startswith($TF)).logGroupName') ; do
        ave aws logs delete-log-group \
          --log-group-name ${LOG_GROUP} --region ${REGION}
    done
  done
}

2_app_secrets() {
  for BUCKET in $(ave -r aws s3 ls | grep 'app-secrets.' | awk '{print $NF}') ; do
    for KEY in $(ave aws s3 ls s3://${BUCKET}/${SOURCE_ENV}/ |
        awk '{print $NF}' | tr -d '/') ; do
          ave aws s3 cp s3://${BUCKET}/${SOURCE_ENV}/${KEY}/v1/application.yml - |
            sed -E "s/${SOURCE_ENV}(\.|-)/${TF_ENV}\1/" |
            ave aws s3 cp - s3://${BUCKET}/${TF_ENV}/${KEY}/v1/application.yml >/dev/null
    done
  done
}

3_regular_secrets() {
  for BUCKET in $(ave -r aws s3 ls | grep '\.secrets.' | awk '{print $NF}') ; do
    for KEY in $(cat bin/lib/build-keys) ; do
        ave aws s3 cp s3://${BUCKET}/${SOURCE_ENV}/${KEY} \
                  s3://${BUCKET}/${TF_ENV}/${KEY} >/dev/null
    done
  done
}

4_tf_deploy() {
  ave ${BASEPATH}/tf-deploy -m ${TF_ENV} app apply -auto-approve
  MIGRATION_HOST_BUILT=true
}

5_migration_scaling() {
  while [[ ! ${MIGRATION_HOST_BUILT} ]] ; do
    if [[ $(ave aws autoscaling describe-auto-scaling-groups \
        --auto-scaling-group-name "${TF_ENV}-migration" \
        --query 'AutoScalingGroups[].DesiredCapacity' \
        --output text) == 0 ]] ; then
      ave aws autoscaling set-desired-capacity \
        --auto-scaling-group-name "${TF_ENV}-migration" \
        --desired-capacity 1
    else
      MIGRATION_HOST_BUILT=true
    fi
  done
  ave aws autoscaling put-scheduled-update-group-action \
    --auto-scaling-group-name "${TF_ENV}-migration" \
    --scheduled-action-name "DelayedScaleInOnce.asg-recycle" \
    --start-time "$(date -uj -v+15M '+%Y-%m-%dT%H:%M:%SZ')" \
    --desired-capacity 0
}

TASKS=(
  "1_clear_log_groups"
  "2_app_secrets"
  "3_regular_secrets"
  "4_tf_deploy"
  "5_migration_scaling"
)
TODO=()
while getopts c1a2s3d4m5h opt
do
  case $opt in
    c|1) TODO+=("${TASKS[0]}") ;;
    a|2) TODO+=("${TASKS[1]}") ;;
    s|3) TODO+=("${TASKS[2]}") ;;
    d|4) TODO+=("${TASKS[3]}") ;;
    m|5) TODO+=("${TASKS[4]}") ;;
    h) help_me                 ;;
    *) usage && exit 1         ;;
  esac
done
shift $((OPTIND-1))
initialize ${1:-}

SOURCE_ENV='dev'
MIGRATION_HOST_BUILT=

run_tasks
