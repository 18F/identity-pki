#!/bin/bash

#### build up a sandbox environment from scratch ####

set -eu

BASEPATH="$(dirname "$0")"
. "${BASEPATH}/lib/common.sh"
. "${BASEPATH}/lib/sandbox-lib.sh"

usage() {
  cat >&2 << EOM

Usage: ${0} [-asdh] [ENV] (defaults to \$GSA_USERNAME if not specified)

Flags (will run all if no flags specified):
  -a : Copy S3 app-secrets v1/application.yml files from int to ENV
  -s : Copy S3 secrets listed in ./lib/build-keys from int to ENV
  -d : Run terraform-apply with IDP/PIVCAC ASGs zeroed out
  -h : Detailed help

EOM
}

man_page() {
    cat >&2 << EOM
    
Usage: ${0} [-asdiph] [ENV]

Runs all necessary commands to create a full terraform-app environment,
\${TF_ENV}, in the login-sandbox account. Designed to run with no
specified flags/arguments.

The tasks in this script can also be individually executed
using the following flags:

  -c : Clear out and delete any CloudWatch log groups accidentally
       left over from a previous environment purge, if any exist
  -a : Duplicate all v1/application.yml files for \`int\`,
       within the login-gov.app-secrets bucket, for \${TF_ENV},
       replacing all instances of \`int\` within with \${TF_ENV} 
  -s : Copy all files listed in ./lib/build-keys from the int/ dir
       within the login-gov.secrets bucket to a \${TF_ENV}/ dir in
       the same bucket
  -d : Run \`terraform apply -auto-approve\` against \${TF_ENV}
  -h : Displays this help

This script will default to using \${GSA_USERNAME} for the
value of \${TF_ENV}, unless a different one is specified
as a final argument.

EOM
  exit 0
}

clear_log_groups() {
  for LOG_GROUP in $(ave aws logs describe-log-groups |
    jq --arg TF "${TF_ENV}" -r '.logGroups[]|
    select(.logGroupName|startswith($TF)).logGroupName') ; do
      ave aws logs delete-log-group \
        --log-group-name ${LOG_GROUP}
  done
}

app_secrets() {
  BUCKET="login-gov.app-secrets.${AWS_ACCT_NUM}-${AWS_REGION}"
  for KEY in $(ave aws s3 ls s3://${BUCKET}/${SOURCE_ENV}/ |
      awk '{print $NF}' | tr -d '/') ; do
        ave aws s3 cp s3://${BUCKET}/${SOURCE_ENV}/${KEY}/v1/application.yml - |
          sed -E "s/${SOURCE_ENV}(\.|-)/${TF_ENV}\1/" |
          ave aws s3 cp - s3://${BUCKET}/${TF_ENV}/${KEY}/v1/application.yml >/dev/null
  done
}

regular_secrets() {
  BUCKET="login-gov.secrets.${AWS_ACCT_NUM}-${AWS_REGION}"
  for KEY in $(cat bin/lib/build-keys) ; do
      ave aws s3 cp s3://${BUCKET}/${SOURCE_ENV}/${KEY} \
                s3://${BUCKET}/${TF_ENV}/${KEY} >/dev/null
  done
}

tf_deploy() {
  ave ${BASEPATH}/tf-deploy ${TF_ENV} app apply -auto-approve
}

TASKS=(
  "clear_log_groups"
  "app_secrets"
  "regular_secrets"
  "tf_deploy"
)
TODO=()
while getopts casdh opt
do
  case $opt in
    c) TODO+=("${TASKS[0]}") ;;
    a) TODO+=("${TASKS[1]}") ;;
    s) TODO+=("${TASKS[2]}") ;;
    d) TODO+=("${TASKS[3]}") ;;
    h) man_page ;;
    *) usage && exit 1 ;;
  esac
done
shift $((OPTIND-1))
initialize ${1:-}

SOURCE_ENV='int'

run_tasks
