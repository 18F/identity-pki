#!/bin/bash

#### run tf-deploy with common Terraform commands and any AWS profile/TF directory ####

set -euo pipefail

. "$(dirname "$0")/lib/common.sh"

usage() {
    cat >&2 << EOM
Usage: ${0} [-d TF_DIR|-e TF_ENV] -a|-p|-x|-t|-o|-c ARGS
                                  -s COMMAND | -f LOCK_ID
                                  -i RESOURCE_ADDRESS RESOURCE_ID

Wrapper script to pass aws-vault-enabled Terraform commands to bin/tf-deploy,
using whatever 'Terraform' role(s) you have in your ~/.aws/config file.
You MUST pass one command flag so that it knows what to do!

Dir/env flags (optional):
  -d TF_DIR : Directory in terraform/ to use.
              Defaults to 'app' if not set.
  -e TF_ENV : Terraform environment to use.
              Defaults to \$GSA_USERNAME if not set, or 'sandbox'
              if TF_DIR has been set differently by -d

Common command flags:
  -a : \`apply\`
  -p : \`plan\`
  -x : \`destroy\`
  The above commands can be run with arguments if desired.
  Arguments must be specified WITHOUT hyphens,
  e.g. target= instead of -target=

State command flags (arguments MUST be provided):
  -s COMMAND    : \`state '\$COMMAND'\`
  -f LOCK_ID    : \`force-unlock '\$LOCK_ID'\`
  -i ADDRESS ID : \`import \$RESOURCE_ADDRESS \$RESOURCE_ID\`

Other commands (optional:
  -c ARGS : Runs \`tfplan\` using any ARGS provided.
            Specify ARGS without using dashes (e.g. m/p/mp)
  -o : Use \`ACCOUNT-admin\` instead of \`ACCOUNT-terraform\`
       (to only be used if encountering permissions issues
        with the active Terraform role)
  -h : Displays this help

EOM
}

verify_root_repo
declare {ARGS,RUN_FLAG,TF_CMD,TF_DIR,TF_ENV,TF_PROFILE,AV_PROFILE}=
TF_ROLE='Terraform'

while getopts d:e:apxsifctzoh opt
do
  case $opt in
    d) TF_DIR="${OPTARG}"          ;;
    e) TF_ENV="${OPTARG}"          ;;
    a) TF_CMD="apply"              ;;
    p) TF_CMD="plan"               ;;
    x) TF_CMD="destroy"            ;;
    s) TF_CMD="state"              ;;
    i) TF_CMD="import"             ;;
    f) TF_CMD="force-unlock"       ;;
    c) TF_CMD="tfplan"             ;;
    o) TF_ROLE="FullAdministrator" ;;
    t) RUN_FLAG+="-t "             ;;
    z) RUN_FLAG+="-z "             ;;
    h|*) usage && exit 0           ;;
  esac
done
shift $((OPTIND-1))

[[ -z ${TF_CMD} ]] && raise 'TF_CMD not specified'
[[ -z ${TF_DIR} ]] && TF_DIR='app'
if [[ -z ${TF_ENV} ]] ; then
  if [[ ${TF_DIR} == 'app' ]] ; then
    TF_ENV=${GSA_USERNAME}
  else
    TF_ENV='sandbox'
  fi
fi

if [[ ${TF_DIR} == 'app' ]] ; then
  [[ -z ${TF_ENV} ]] && raise 'TF_ENV and/or default of GSA_USERNAME not set or specified'
  TF_PROFILE='sandbox'
  [[ "${TF_ENV}" =~ (staging|dm|prod) ]] && TF_PROFILE='prod'
else
  if [[ ${TF_DIR} == 'master' ]] ; then
    TF_ENV='global'
    TF_PROFILE='master'
  elif [[ ${TF_DIR} == 'sms' ]] ; then
    TF_PROFILE=$(echo "sms-${TF_ENV}" | sed -E 's/-east//')
  elif [[ -z $(find "${GIT_DIR}/terraform/" -type d -maxdepth 1 -name "${TF_DIR}") ]] ; then
    raise "\`${TF_DIR}\` not found in ${GIT_DIR}/terraform/"
  elif [[ -z $(find "${GIT_DIR}/terraform/${TF_DIR}" -type d -maxdepth 1 -name "${TF_ENV}") ]] ; then
    raise "\`${TF_ENV}\` not found in ${GIT_DIR}/terraform/${TF_DIR}"
  elif [[ ! $(get_acct_num ${TF_ENV}) ]] ; then
    TF_PROFILE='sandbox'
    [[ "${TF_ENV}" =~ (staging|dm) ]] && TF_PROFILE='prod'
  else
    TF_PROFILE=${TF_ENV}
  fi
fi
get_arn_role ${TF_PROFILE} ${TF_ROLE}

ARGS="$@"
if [[ ! -z ${ARGS} ]] && [[ "${TF_CMD}" =~ ^(tfplan|apply|plan|destroy)$ ]] ; then
  ARGS=$(echo " $@" | sed 's/ /&-/g' | sed "s/-'/'/g;s/'//g")
fi

if [[ ${TF_CMD} == 'tfplan' ]] ; then
  run aws-vault exec ${AV_PROFILE} -- $(dirname "$0")/${TF_CMD} ${ARGS} ${TF_DIR} ${TF_ENV}
else  
  if [[ "${TF_DIR}" == 'app' ]] ; then
    run aws-vault exec ${AV_PROFILE} -- $(dirname "$0")/tf-deploy ${RUN_FLAG} ${TF_ENV} ${TF_DIR} ${TF_CMD} ${ARGS}
  else
    run aws-vault exec ${AV_PROFILE} -- $(dirname "$0")/tf-deploy ${RUN_FLAG} ${TF_DIR}/${TF_ENV} ${TF_CMD} ${ARGS}
  fi
fi
