#!/bin/bash

#### Run tf-deploy with common commands and any AWS profile/TF directory ####

set -euo pipefail

. "$(dirname "$0")/lib/common.sh"

usage() {
    cat >&2 << EOM

Usage: ${0} [-d TF_DIR|-e TF_ENV] CMD

Directory/environment flags (optional):
  -d TF_DIR : Directory in terraform/ to use (defaults to 'app' if not specified)
  -e TF_ENV : Environment to use (defaults to \$GSA_USERNAME if not specified,
              or 'sandbox' if TF_DIR has been set differently by -d)

Flags (if CMD not specified):
  -a : apply                       -f LOCK_ID    : force-unlock '\$LOCK_ID'
  -p : plan                        -i ADDRESS ID : import \$ADDRESS \$ID
  -x : destroy                     -c ARGS       : bin/tfplan ARGS
  -v CMD : providers <CMD>         -s CMD : state <CMD>
  
  -u : Update .terraform.lock.hcl in the repo
  -o : Use ACCOUNT-admin instead of ACCOUNT-terraform
  -h : Display help

Specify arguments for command flags/tfplan WITHOUT hypens, e.g.:

${0} -a target=aws_vpc.default -> bin/tf-deploy \$GSA_USERNAME app apply -target=aws_vpc.default
${0} -d imagebuild -c bp       -> bin/tfplan -bp imagebuild sandbox

EOM
}

help_me() {
    cat >&2 << EOM

Wrapper script to pass aws-vault-enabled Terraform commands to bin/tf-deploy, using
whatever 'Terraform' role(s) you have in your ~/.aws/config file.

Will parse the provided arguments/flags to determine which command to run, along with
which directory and environment to run them against (if either are specified).

If no command flags are provided, will run whatever command is provided after
all other arguments have been parsed.
EOM
  usage
  exit 0
}

verify_root_repo
declare {ARGS,RUN_FLAG,TF_CMD,TF_DIR,TF_ENV,TF_PROFILE,AV_PROFILE}=
TF_ROLE='Terraform'

while getopts d:e:apxsifcvuotlzmh opt
do
  case $opt in
    d) TF_DIR="${OPTARG}"          ;;
    e) TF_ENV="${OPTARG}"          ;;
    a) TF_CMD="apply"              ;;
    p) TF_CMD="plan"               ;;
    x) TF_CMD="destroy"            ;;
    s) TF_CMD="state"              ;;
    i) TF_CMD="import"             ;;
    f) TF_CMD="force-unlock"       ;;
    c) TF_CMD="tfplan"             ;;
    v) TF_CMD="providers"          ;;
    u) TF_CMD="upgrade"            ;;
    o) TF_ROLE="FullAdministrator" ;;
    t) RUN_FLAG+="-t "             ;;
    l) RUN_FLAG+="-l "             ;;
    z) RUN_FLAG+="-z "             ;;
    m) RUN_FLAG+="-m "             ;;
    h) help_me                     ;;
    *) usage && exit 1             ;;
  esac
done
shift $((OPTIND-1))

if [[ -z ${TF_CMD} ]] ; then
  if [[ -z "$@" ]] ; then
    raise 'TF_CMD not specified'
  else
    TF_CMD="$@"
  fi
fi

[[ -z ${TF_DIR} ]] && TF_DIR='app'

# default TF_ENV, if left blank
if [[ -z ${TF_ENV} ]] ; then
  case ${TF_DIR} in
        app|waf) TF_ENV=${GSA_USERNAME} ;;
         gitlab) TF_ENV='alpha'         ;;
        tooling) TF_ENV='tooling'       ;;
         master) TF_ENV='global'        ;;
              *) TF_ENV='sandbox'       ;;
  esac
fi

# verify DIR/ENV pair exists
if [[ ! -d ${GIT_DIR}/terraform/${TF_DIR} ]] ; then
  raise "terraform/${TF_DIR} not found"
elif [[ ! -d ${GIT_DIR}/terraform/${TF_DIR}/${TF_ENV} ]] ; then
  [[ ${TF_DIR} == "app" ]] || raise "terraform/${TF_DIR}/${TF_ENV} not found"
fi

# set TF_PROFILE for get_iam to look up
if [[ ${TF_DIR} == "app" ]] ; then
  TF_PROFILE='sandbox'
  if [[ -z ${TF_ENV} ]] ; then
    raise 'TF_ENV and/or default of GSA_USERNAME not set or specified'
  elif [[ "${TF_ENV}" =~ (staging|dm|prod) ]] ; then
    TF_PROFILE='prod'
  fi
else
  TF_PROFILE=${TF_ENV}
fi

get_iam ${TF_DIR} ${TF_PROFILE} ${TF_ROLE}

ARGS="$@"
if [[ ! -z ${ARGS} ]] ; then
  if [[ "${TF_CMD}" == "${ARGS}" ]] ; then
    ARGS=
  elif [[ "${TF_CMD}" =~ ^(tfplan|apply|plan|destroy)$ ]] ; then
    ARGS=$(echo " $@" | sed 's/ /&-/g' | sed "s/-'/'/g;s/'//g")
  fi
fi

if [[ "${TF_DIR}" == 'app' ]] ; then
  TF_PATH="${TF_ENV} ${TF_DIR}"
else
  TF_PATH="${TF_DIR}/${TF_ENV}"
fi

if [[ ${TF_CMD} == 'upgrade' ]] ; then
  run aws-vault exec ${AV_PROFILE} -- $(dirname "$0")/tf-deploy -l ${TF_PATH} providers lock
  if prompt_yn "Update repo-level lockfile?" ; then
    mv $(find ${GIT_DIR}/terraform/${TF_DIR} -name .terraform.lock.hcl -type f) ${GIT_DIR}
  fi
elif [[ ${TF_CMD} == 'tfplan' ]] ; then
  run aws-vault exec ${AV_PROFILE} -- $(dirname "$0")/${TF_CMD} ${ARGS} ${TF_DIR} ${TF_ENV}
else  
  run aws-vault exec ${AV_PROFILE} -- $(dirname "$0")/tf-deploy ${RUN_FLAG} ${TF_PATH} ${TF_CMD} ${ARGS}
fi
