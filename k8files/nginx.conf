#user  nobody;
worker_processes 2;
worker_rlimit_nofile 2048;
pid /var/run/nginx.pid;

events {
  worker_connections  1024;
}

include conf.d/*.conf;

http {
  include mime.types;
  default_type application/octet-stream;

  sendfile on;
  tcp_nopush off;
  keepalive_timeout 60 50;
  gzip on;
  gzip_types text/plain text/css application/xml application/javascript application/json image/jpg image/jpeg image/png image/gif image/svg+xml font/woff2 woff2;

  # Timeouts definition
  client_body_timeout   10;
  client_header_timeout 10;
  send_timeout          10;
  # Set buffer size limits
  client_body_buffer_size  1k;
  client_header_buffer_size 1k;
  client_max_body_size 20k;
  large_client_header_buffers 2 20k;
  # Limit connections
  limit_conn addr       20;
  limit_conn_status     429;
  limit_conn_zone       $binary_remote_addr zone=addr:5m;
  # Disable sending server info and versions
  server_tokens off;
  more_clear_headers Server;
  more_clear_headers X-Powered-By;
  # Prevent clickJacking attack
  add_header X-Frame-Options SAMEORIGIN;
  # Disable content-type sniffing
  add_header X-Content-Type-Options nosniff;
  # Enable XSS filter
  add_header X-XSS-Protection "1; mode=block";

  # Enables nginx to check multiple set_real_ip_from lines 
  real_ip_recursive on;

  real_ip_header X-Forwarded-For;

  # Exclude all private IPv4 space from client source calculation when
  # processing the X-Forewarded-For header
  set_real_ip_from 10.0.0.0/8;
  set_real_ip_from 100.64.0.0/10;
  set_real_ip_from 172.16.0.0/12;
  set_real_ip_from 192.168.0.0/16;
  # TODO - IPv6 CIDR for VPCs will require autoconfiguration

  # Add CloudFront source address ranges to trusted CIDR range for real ip computation
  <REAL_IP4_PLACEHOLDER>
  <REAL_IP6_PLACEHOLDER>

  # Specify a key=value format useful for machine parsing
  log_format kv escape=json
    '{'
        '"time": "$time_local", '
        '"hostname": "$host", '
        '"dest_port": "$server_port", '
        '"dest_ip": "$server_addr", '
        '"src": "$remote_addr", '
        '"src_ip": "$realip_remote_addr", '
        '"user": "$remote_user", '
        '"protocol": "$server_protocol", '
        '"http_method": "$request_method", '
        '"status": "$status", '
        '"bytes_out": "$body_bytes_sent", '
        '"bytes_in": "$request_length", '
        '"http_referer": "$http_referer", '
        '"http_user_agent": "$http_user_agent", '
        '"nginx_version": "$nginx_version", '
        '"http_cloudfront_viewer_address": "$http_cloudfront_viewer_address", '
        '"http_cloudfront_viewer_http_version": "$http_cloudfront_viewer_http_version", '
        '"http_cloudfront_viewer_tls": "$http_cloudfront_viewer_tls", '
        '"http_cloudfront_viewer_country": "$http_cloudfront_viewer_country", '
        '"http_cloudfront_viewer_country_region": "$http_cloudfront_viewer_country_region", '
        '"http_x_forwarded_for": "$http_x_forwarded_for", '
        '"http_x_amzn_trace_id": "$http_x_amzn_trace_id", '
        '"response_time": "$upstream_response_time", '
        '"request_time": "$request_time", '
        '"request": "$request", '
        '"tls_protocol": "$ssl_protocol", '
        '"tls_cipher": "$ssl_cipher", '
        '"uri_path": "$uri", '
        '"uri_query": "$query_string",'
        '"log_filename": "nginx_access.log"'
    '}';

  access_log /var/log/nginx/access.log kv;
  access_log /dev/stdout kv;
  error_log  /var/log/nginx/error.log info;
  error_log  /dev/stdout info;

  # Get $status_reason variable, a human readable version of $status
  include status-map.conf;

  include sites.d/*.conf;
}

