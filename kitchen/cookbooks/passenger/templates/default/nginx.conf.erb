#user  nobody;
worker_processes  5;
pid <%= @pidfile %>;

events {
  worker_connections  <%= @passenger[:worker_connections] %>;
}

include conf.d/*.conf;

http {
  passenger_min_instances <%= @passenger[:min_instances] %>;
  passenger_max_instances_per_app <%= @passenger[:max_instances_per_app] %>;
  passenger_max_pool_size <%= @passenger[:max_pool_size] %>;
  passenger_pool_idle_time <%= @passenger[:pool_idle_time] %>;
  passenger_root <%= @passenger_root %>;
  passenger_ruby <%= @ruby_path %>;
  passenger_show_version_in_header off;
  passenger_user <%= @passenger_user %>;

  include mime.types;
  default_type application/octet-stream;

  sendfile <%= @passenger[:sendfile] ? 'on' : 'off' %>;
  tcp_nopush <%= @passenger[:tcp_nopush] ? 'on' : 'off' %>;
  keepalive_timeout <%= @passenger[:keepalive_timeout] %>;
  gzip <%= @passenger[:gzip] ? 'on' : 'off' %>;
  gzip_types text/plain text/html text/css application/xml application/javascript application/json image/jpg image/jpeg image/png image/gif image/svg+xml font/woff2 woff2;

  # Timeouts definition
  client_body_timeout   10;
  client_header_timeout 10;
  send_timeout          10;
  # Set buffer size limits
  client_body_buffer_size  1k;
  client_header_buffer_size 1k;
  client_max_body_size 20k;
  large_client_header_buffers 2 20k;
<% if @passenger.fetch(:limit_connections) %>
  # Limit connections
  limit_conn addr       10;
  limit_conn_status     429;
  limit_conn_zone       $binary_remote_addr zone=addr:5m;
<% end -%>
  # Disable sending server versions
  server_tokens off;
  # Prevent clickJacking attack
  add_header X-Frame-Options SAMEORIGIN;
  # Disable content-type sniffing
  add_header X-Content-Type-Options nosniff;
  # Enable XSS filter
  add_header X-XSS-Protection "1; mode=block";

  # Pull the real client's IP address out of X-Forwarded-For
  set_real_ip_from <%= @passenger.fetch(:realip_from_cidr) %>;
  real_ip_header X-Forwarded-For;

  # Create new variable $lb_if_proxied.
  #
  # With the realip module enabled, $remote_addr will be the end-user's IP
  # address, potentially from X-Forwarded-For, and $realip_remote_addr will be
  # the actual immediate client IP address.
  #
  # Return the load balancer IP address ($realip_remote_addr) if the request
  # looks like it was proxied. If the request does not look like it was proxied
  # (when $remote_addr is a private IP address), then return "-" instead.
  map $remote_addr $lb_if_proxied {
    "~^127\." "-";
    "~^10\." "-";
    "~^172\.1[6-9]\." "-";
    "~^172\.2[0-9]\." "-";
    "~^172\.3[0-1]\." "-";
    "~^192\.168\." "-";
    default $realip_remote_addr;
  }

  # Specify a fancy human-friendly format for our access logs
  log_format fancy '[$time_local] $host:$server_port : $remote_addr - ($lb_if_proxied) '
                     '$remote_user "$request" $status "$status_reason" $body_bytes_sent Bytes '
                     '"$http_referer" "$http_user_agent" $request_time sec "$http_x_amzn_trace_id"';

  # Specify a key=value format useful for machine parsing
  log_format kv 'host="$host" dest_port="$server_port" dest_ip="$server_addr" '
                  'src="$remote_addr" src_ip="$realip_remote_addr" lb_if_proxied="$lb_if_proxied" '
                  'user="$remote_user" time_local="$time_local" protocol="$server_protocol" '
                  'status="$status" bytes_out="$body_bytes_sent" '
                  'bytes_in="$upstream_response_length" http_referer="$http_referer" '
                  'http_user_agent="$http_user_agent" nginx_version="$nginx_version" '
                  'http_x_forwarded_for="$http_x_forwarded_for" uri_query="$query_string" '
                  'uri_path="$uri" http_method="$request_method" '
                  'response_time="$upstream_response_time" cookie="$http_cookie" '
                  'request_time="$request_time request="$request" '
                  'http_x_amzn_trace_id="http_x_amzn_trace_id"';

  access_log <%= @log_path or raise "no @log_path" %>/access.log kv;
  access_log <%= @log_path or raise "no @log_path" %>/fancy_access.log fancy;
  error_log  <%= @log_path or raise "no @log_path" %>/error.log info;

  # Get $status_reason variable, a human readable version of $status
  include status-map.conf;

  include sites.d/*.conf;
}

<% @passenger[:pre_start].each do |url| %>
  passenger_pre_start <%= url %>;
<% end %>
