<?xml version='1.0' encoding='UTF-8'?>
<project>
  <actions/>
  <description>Build/push idp code when <%= @branch %> branch changes.</description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <com.sonyericsson.rebuild.RebuildSettings plugin="rebuild@1.25">
      <autoRebuild>false</autoRebuild>
      <rebuildDisabled>false</rebuildDisabled>
    </com.sonyericsson.rebuild.RebuildSettings>
  </properties>
  <scm class="hudson.plugins.git.GitSCM" plugin="git@3.1.0">
    <configVersion>2</configVersion>
    <userRemoteConfigs>
      <hudson.plugins.git.UserRemoteConfig>
        <url>git@github.com:18F/identity-idp.git</url>
        <credentialsId>github-deploy</credentialsId>
      </hudson.plugins.git.UserRemoteConfig>
    </userRemoteConfigs>
    <branches>
      <hudson.plugins.git.BranchSpec>
        <name>*/<%= @branch %></name>
      </hudson.plugins.git.BranchSpec>
    </branches>
    <doGenerateSubmoduleConfigurations>false</doGenerateSubmoduleConfigurations>
    <submoduleCfg class="list"/>
    <extensions/>
  </scm>
  <canRoam>true</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers>
    <hudson.triggers.SCMTrigger>
      <spec># every fifteen minutes
H/15 * * * *
</spec>
      <ignorePostCommitHooks>false</ignorePostCommitHooks>
    </hudson.triggers.SCMTrigger>
  </triggers>
  <concurrentBuild>false</concurrentBuild>
  <builders>
    <hudson.tasks.Shell>
      <command>#!/bin/sh

. /etc/environment
knife ssl fetch

# Get the current version
GITVERSION=`git rev-parse HEAD`

knife ssh &quot;name:idp1*&quot; -x ubuntu -a ipaddress &quot;sudo /opt/chef/bin/chef-client -o role[idp]&quot;


# Loop until we time out, or everything is up on a new version
TRIES=10
NUMVERSIONS=2
while [ &quot;$NUMVERSIONS&quot; -gt 1 -a $TRIES -gt 0 ] ; do
	sleep 5
	NEWVERSIONS=`knife ssh &quot;name:idp1*&quot; -x ubuntu -a ipaddress &quot;curl -sk https://localhost/api/deploy.json | jq -r .sha&quot; | awk &apos;{print $2}&apos; | sort -u | tr -d &apos;\r&apos;`
	NUMVERSIONS=`echo $NEWVERSIONS | wc -w`
	TRIES=`expr $TRIES - 1`
done
if [ $TRIES -lt 1 -o &quot;$NEWVERSIONS&quot; != &quot;$GITVERSION&quot; ] ; then
	echo &quot;idp1 hosts didn&apos;t restart or come to a consensus.&quot;
	echo &quot;gitversion = $GITVERSION newversions = $NEWVERSIONS&quot;
	echo &quot;aborting deploy&quot;
	exit 10
fi

# since idp1 worked, do the rest.
knife ssh &quot;name:idp2*&quot; -x ubuntu -a ipaddress &quot;sudo /opt/chef/bin/chef-client -o role[idp]&quot;
knife ssh &quot;name:worker*&quot; -x ubuntu -a ipaddress &quot;sudo /opt/chef/bin/chef-client -o role[idp_worker]&quot;


# give report on the state of the deploy if it didn&apos;t work
# idp versions
NEWVERSIONS=`knife ssh &quot;name:idp*&quot; -x ubuntu -a ipaddress &quot;curl -sk https://localhost/api/deploy.json | jq -r .sha&quot; | awk &apos;{print $2}&apos; | sort -u | tr -d &apos;\r&apos;`

# worker versions
WORKERVERSIONS=`knife ssh &quot;name:worker*&quot; -x ubuntu -a ipaddress &quot;cd /srv/idp/current/ ; git rev-parse HEAD&quot; | awk &apos;{print $2}&apos; | sort -u | tr -d &apos;\r&apos;`

if [ &quot;$WORKERVERSIONS&quot; != &quot;$GITVERSION&quot; -o &quot;$NEWVERSIONS&quot; != &quot;$GITVERSION&quot; ] ; then
	echo &quot;git version is $GITVERSION&quot;
	echo &quot;worker versions are:&quot;
	knife ssh &quot;name:worker*&quot; -x ubuntu -a ipaddress &quot;cd /srv/idp/current/ ; git rev-parse HEAD&quot;
	echo &quot;idp versions are:&quot;
	knife ssh &quot;name:idp*&quot; -x ubuntu -a ipaddress &quot;curl -sk https://localhost/api/deploy.json | jq -r .sha&quot;
	echo &quot;deploy didn&apos;t seem to restart everything properly, exiting uncleanly&quot;
	exit 11
fi

# all is well!
exit 0

</command>
    </hudson.tasks.Shell>
  </builders>
  <publishers>
    <jenkins.plugins.slack.SlackNotifier plugin="slack@2.2">
      <baseUrl><%= @baseurl %></baseUrl>
      <teamDomain><%= @teamdomain %></teamDomain>
      <authToken></authToken>
      <authTokenCredentialId>slack</authTokenCredentialId>
      <botUser>false</botUser>
      <room><%= @slackchannel %></room>
      <startNotification>true</startNotification>
      <notifySuccess>true</notifySuccess>
      <notifyAborted>true</notifyAborted>
      <notifyNotBuilt>true</notifyNotBuilt>
      <notifyUnstable>true</notifyUnstable>
      <notifyRegression>true</notifyRegression>
      <notifyFailure>true</notifyFailure>
      <notifyBackToNormal>true</notifyBackToNormal>
      <notifyRepeatedFailure>false</notifyRepeatedFailure>
      <includeTestSummary>false</includeTestSummary>
      <includeFailedTests>false</includeFailedTests>
      <commitInfoChoice>AUTHORS_AND_TITLES</commitInfoChoice>
      <includeCustomMessage>false</includeCustomMessage>
      <customMessage></customMessage>
    </jenkins.plugins.slack.SlackNotifier>
  </publishers>
  <buildWrappers>
    <io.chef.jenkins.ChefIdentityBuildWrapper plugin="chef-identity@1.0.0">
      <jobIdentity>jenkins</jobIdentity>
    </io.chef.jenkins.ChefIdentityBuildWrapper>
    <com.cloudbees.jenkins.plugins.sshagent.SSHAgentBuildWrapper plugin="ssh-agent@1.14">
      <credentialIds>
        <string>deploy</string>
      </credentialIds>
      <ignoreMissing>false</ignoreMissing>
    </com.cloudbees.jenkins.plugins.sshagent.SSHAgentBuildWrapper>
  </buildWrappers>
</project>
