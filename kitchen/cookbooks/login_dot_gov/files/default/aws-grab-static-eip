#!/usr/bin/env python

# This script is only necessary because of a boto bug, otherwise we would be
# using aws-ec2-assign-elastic-ip.
# https://github.com/skymill/aws-ec2-assign-elastic-ip/issues/24

from __future__ import print_function

import json
import logging
import optparse
import os
import subprocess
import sys

from netaddr import IPNetwork, AddrFormatError, AddrConversionError

logging.basicConfig(format='%(asctime)s - aws-grab-static-eip - %(levelname)s - %(message)s')
logger = logging.getLogger('aws-grab-static-eip')
logger.setLevel(logging.INFO)

class CustomError(Exception):
    pass

def run_check_output(cmd):
    logger.info('+ ' + ' '.join(cmd))
    return subprocess.check_output(cmd)

def get_current_region():
    output = run_check_output(['ec2metadata', '--availability-zone'])
    return output.strip()[:-1]

def get_instance_id():
    return run_check_output(['ec2metadata', '--instance-id']).strip()

def describe_addresses():
    return json.loads(run_check_output(['aws', 'ec2', 'describe-addresses']))

def associate_address(allocation_id, network_interface_id=None):
    cmd = ['aws', 'ec2', 'associate-address', '--no-allow-reassociation',
           '--allocation-id', allocation_id]

    if network_interface_id:
        cmd += ['--network-interface-id', network_interface_id]
    else:
        cmd += ['--instance-id', get_instance_id()]

    try:
        output = run_check_output(cmd)
    except subprocess.CalledProcessError:
        raise CustomError('Failed to associate address')

    try:
        return json.loads(output)['AssociationId']
    except ValueError, KeyError:
        logger.error('Could not parse aws CLI output:')
        logger.error(output)
        raise

def grab_static_eip(valid_ips, invalid_ips):
    logger.info('Looking for EIPs. Valid: {!r}, Invalid: {!r}'.format(
        valid_ips, invalid_ips))

    addresses = describe_addresses()['Addresses']

    logger.debug('Looking at {} addresses'.format(len(addresses)))

    for ipinfo in addresses:
        public_ip = ipinfo['PublicIp']

        if _is_associated(ipinfo):
            logger.debug('{} is already associated'.format(public_ip))
            continue

        if _is_valid(public_ip, valid_ips, invalid_ips):
            logger.info('Attempting to associate {}'.format(public_ip))

            assoc_id = associate_address(ipinfo['AllocationId'])

            logger.info('Successfully associated {}, got id {}'.format(
                ipinfo['PublicIp'], assoc_id))
            return assoc_id

        else:
            logger.debug('{} is not valid'.format(ipinfo['PublicIp']))

    raise CustomError('No available valid EIPs found')

def _is_associated(ipinfo):
    return ('AssociationId' in ipinfo or 'NetworkInterfaceId' in ipinfo or
            'InstanceId' in ipinfo)

def _is_valid(public_ip, valid_ips, invalid_ips):

    if invalid_ips and _is_ip_in_range(public_ip, invalid_ips):
        return False

    if _is_ip_in_range(public_ip, valid_ips):
        return True
    else:
        return False

# From aws-ec2-assign-elastic-ip, used under the terms of the Apache license
def _is_ip_in_range(address, ips):
    """Check if the IP is in a given range.

    :type address: str
    :param address: IP address to check
    :type ips: str
    :param ips: IP range
    :returns: bool -- True if association is OK
    """
    for conf_ip in ips.split(','):
        try:
            for ip in IPNetwork(conf_ip):
                if str(ip) == str(address):
                    return True

        except AddrFormatError as err:
            logger.error('Invalid valid IP configured: {0}'.format(err))
            pass

        except AddrConversionError as err:
            logger.error('Invalid valid IP configured: {0}'.format(err))
            pass

    return False


def main():
    p = optparse.OptionParser('%prog [options]')
    p.add_option('--valid-ips', help='Comma separated valid IPs/CIDR blocks')
    p.add_option('--invalid-ips',
                 help='Comma separated IPs/CIDR blocks to avoid')
    p.add_option('-v', '--verbose', action='store_true')
    p.add_option('-q', '--quiet', action='store_true')

    opts, args = p.parse_args()

    if args:
        p.error('Unexpected args: {!r}'.format(args))

    if not opts.valid_ips:
        p.error("Must provide --valid-ips "
                "(I know, required option is an oxymoron)")

    if opts.quiet:
        logger.setLevel(logging.WARNING)
    if opts.verbose:
        logger.setLevel(logging.DEBUG)

    os.environ['AWS_DEFAULT_REGION'] = get_current_region()

    try:
        grab_static_eip(valid_ips=opts.valid_ips, invalid_ips=opts.invalid_ips)
    except CustomError as err:
        logger.error(err.message)
        return 1

    return 0

if __name__ == '__main__':
    sys.exit(main())
