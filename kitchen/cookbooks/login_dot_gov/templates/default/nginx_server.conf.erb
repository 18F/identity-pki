server {
    listen       80;
    server_name  <%= @server_name %> <%= @server_aliases -%>;
    return       301  https://$server_name$request_uri;
}

# Set HSTS header only if not already set by app. Some clients get unhappy if
# you set multiple Strict-Transport-Security headers.
# https://serverfault.com/a/598106
map $upstream_http_strict_transport_security $sts_value {
    '' "max-age=31536000; includeSubdomains; preload";
}

server {
    listen       443 ssl;
    server_name  <%= @server_name or raise 'no @server_name' %> <%= @server_aliases -%> localhost "~^\d+\.\d+\.\d+\.\d+$";

    # Use the certificate and key placed by the instance_certificate cookbook
    # TODO: pull this from a template variable via
    # node.fetch('instance_certificate').fetch('key_path')
    ssl_certificate /etc/ssl/certs/server.crt;
    ssl_certificate_key /etc/ssl/private/server.key;

    ssl_ciphers 'EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH';
    ssl_dhparam /etc/ssl/certs/dhparam.pem;
    ssl_prefer_server_ciphers on;
    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 5m;
    ssl_stapling on;
    ssl_stapling_verify on;

    resolver_timeout 5s;

    root "/srv/<%= @app or raise 'no @app' %>/current/public";
    # You must explicitly set 'passenger_enabled on', otherwise Passenger won't
    # serve this app.
    passenger_enabled on;
    passenger_ruby "<%= @passenger_ruby or raise 'no @passenger_ruby' %>";

    <% raise '@saml_env is deprecated' if @saml_env -%>
    <% raise '@secret_key_base is deprecated' if @secret_key_base -%>

    rails_env production;

    # Allow specific HTTP methods
    if ($request_method !~ ^(DELETE|GET|HEAD|OPTIONS|POST|PUT)$ ) {
       return 405;
    }

    location / {
        # Avoid ssl stripping attack
        add_header Strict-Transport-Security $sts_value;
    }

    # Content expiry rules
    # Content pages set to no-cache
    location ~* \.(?:manifest|appcache|html?|xml|json)$ {
        expires -1;
    }

    # Media: images, icons, video, audio, HTC
    location ~* \.(?:jpg|jpeg|gif|png|ico|cur|gz|svg|svgz|mp4|ogg|ogv|webm|htc)$ {
        expires 1M;
        add_header Strict-Transport-Security $sts_value;
        add_header Cache-Control "public";
    }

    # CSS and Javascript
    location ~* \.(?:css|js)$ {
        expires 1M;
        add_header Strict-Transport-Security $sts_value;
        add_header Cache-Control "public";
    }

    # WebFonts
    location ~* \.(?:ttf|ttc|otf|eot|woff|woff2)$ {
        types {font/woff2 woff2;}
        expires 1M;
        add_header Strict-Transport-Security $sts_value;
        <%- if @idp_web %>
        add_header Access-Control-Allow-Origin <%= "https://#{@server_name}" %>;
        add_header Access-Control-Allow-Methods 'GET';
        <%- end %>
    }

    # TODO - The following matches result in inconsistent headers!  Should refactor to use include blocks

    ## Very large upload limits

    # Combined async image uploads - Require very large cap
    location /api/verify/images {
      add_header Strict-Transport-Security $sts_value;
      client_max_body_size 30M;
    }

    # Fallback (noscript) combined uploads
    location ~ ^/verify/(capture_doc|doc_auth)/document_capture {
      add_header Strict-Transport-Security $sts_value;
      client_max_body_size 30M;
    }

    ## Large upload limits

    location ~ /api/v1/(facematch|liveness) {
      add_header Strict-Transport-Security $sts_value;
      client_max_body_size 10M;
    }

    location ^~ /AssureIDService/Document/ {
      add_header Strict-Transport-Security $sts_value;
      client_max_body_size 10M;
    }

    location ^~ /service_providers/ {
      add_header Strict-Transport-Security $sts_value;
      client_max_body_size 2M;
      error_page 413 =303 https://<%= @server_name %>/413_logo.html;
    }
}

<%- if @nginx_redirects %>
<%- @nginx_redirects.each do |server| %>
server {
    listen       443 ssl;
    server_name  <%= server['redirect_server'] %> ;
    return       302  https://<%= server['server_name'] %>$request_uri;
}

<%- end %>
<%- end %>

server {
    listen 443 ssl;
    server_name  "~.";
    return       301  https://<%= @server_name %>$request_uri;
}
