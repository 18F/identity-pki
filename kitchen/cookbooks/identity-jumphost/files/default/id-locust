#!/bin/bash
set -eu

run() {
  echo >&2 "+ $*"
  "$@"
}

raise() {
  echo -e "\nERROR: $* \n" >&2
  usage
  exit 1
}

usage() {
  cat >&2 <<EOM
usage: $(basename "$0") TEST_NAME ENV [-c CLIENTS] [-h HATCH_RATE] [-n NUM_USERS]

  TEST_NAME : name of the test, i.e. load_testing/TEST_NAME.locustfile.py
  ENV : environment where test will be pointed, in the format:
         - https://idp.ENV.identitysandbox.gov/
           (will automatically change the URL if set to 'staging' or 'prod')

Optional arguments:
    
    -c : --clients=       (defaults to 1)
    -h : --hatch-rate     (defaults to 1)
    -n : NUM_USERS=     (defaults to 100)
    -r : --run-time   (defaults to '10s')
    -m : --master      (distributed mode)
    -s : --slave       (distributed mode)

NOTE: If running in distributed mode:
  1. Run with -m on the master node; the command will output the IP
     address of the master host, and wait for you to copy it (w/prompt)
     before continuing. 
  2. Run with -s on the slave node(s), supplying the IP address of
     the master node as an argument to -s when running.
  3. Options such as -r / -c / -h / -n should only be run on
     the master node.

Examples:

    $(basename "$0") sign_up pt
    $(basename "$0") sign_up int -c 10 -h 25 -r 10m
    $(basename "$0") sign_in dev -h 10 -n 120

EOM
}

REPO_DIR='/etc/login.gov/repos/identity-loadtest'
[[ -d "${REPO_DIR}" ]] || raise "REPO_DIR ${REPO_DIR} does not exist"
[[ $# -lt 2 ]] && raise "Both TEST_NAME and ENV must be provided"

TEST=${1}
TEST_FILE="${REPO_DIR}/load_testing/${TEST}.locustfile.py"
[[ -f "${TEST_FILE}" ]] || raise "Test '${TEST_FILE}' not found"

case "${2}" in
       -*) raise "Invalid environment name: ${2}"         ;;
  staging) TARGET='https://idp.staging.login.gov/'        ;;
     prod) TARGET='https://secure.login.gov/'             ;;
        *) TARGET="https://idp.${2}.identitysandbox.gov/" ;;
esac
shift 2

TEST_DIR='/var/log/loadtest'
RUN_TIME="60s"
MASTER_ADDRESS=
MASTER_FLAG=
declare {MASTER,SLAVE}=false
declare {CLIENTS,HATCH_RATE,NUM_USERS}=1

while getopts c:h:n:r:s:m opt
do
  case "${opt}" in
    c) CLIENTS=${OPTARG}    ;;
    h) HATCH_RATE=${OPTARG} ;;
    n) NUM_USERS=${OPTARG}  ;;
    r) RUN_TIME=${OPTARG}   ;;
    m) MASTER=true          ;;
    s) 
       SLAVE=true
       MASTER_ADDRESS=${OPTARG}
    ;;
    :) raise "-${OPTARG} requires argument" ;;
   \?) raise "Invalid option: -${OPTARG}"   ;;
  esac
done

if [[ "${SLAVE}" == true ]] && [[ "${MASTER}" == true ]] ; then
  raise "Cannot be MASTER and SLAVE at once"
fi

if [[ "${MASTER}" == true ]] ; then
    MASTER_FLAG=" --master"
    echo "IP address of master: $(ifconfig | grep 'inet 172' | awk '{print $2}')"
    read -n 1 -s -r -p "Press any key to run test... "
fi

if [[ "${SLAVE}" == true ]] ; then
  run locust --host "${TARGET}" \
             --locustfile "${TEST_FILE}" --slave --master-host="${MASTER_ADDRESS}"
else
  START_TIME=$(date +%Y%m%d%H%M%S)
  export NUM_USERS
  run locust --host "${TARGET}" \
             --locustfile "${TEST_FILE}" \
             --clients="${CLIENTS}" \
             --hatch-rate "${HATCH_RATE}" \
             --no-web \
             --csv="${TEST_DIR}/${START_TIME}-${TEST}" \
             --run-time "${RUN_TIME}""${MASTER_FLAG}" \
             2>&1 | tee "${TEST_DIR}/${START_TIME}-${TEST}.log"
fi