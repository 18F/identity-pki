#!<%= @ruby %>

require 'elasticsearch'
require 'json'
require 'ohai'
require 'sys/proctable'
require 'date'

client = Elasticsearch::Client.new \
  url: 'https://elasticsearch.login.gov.internal:9200',
  transport_options: { ssl: { verify: false } }

healthdata = {}
healthdata['event_type'] = 'LogstashHealthSample'

rawhealthdata = client.cluster.health
if rawhealthdata.has_key?('error')
	healthdata['logstash_es_working'] = false
else
	healthdata['logstash_es_working'] = true
end

# get # of documents created in the last 10 minutes
docs = client.count(
  body: {
    query: {
      range: {
        "@timestamp": {
          "gte": "now-10m",
          "lte": "now"
        }
      }
    }
  }
)
healthdata['es_documents_in_last_ten_minutes'] = docs['count']

# get disk space info
ohai = Ohai::System.new
ohai.all_plugins
percentstring = ohai['filesystem']['by_mountpoint']['/var']['percent_used']
healthdata['logstash_var_diskpercent'] = percentstring.to_i
percentstring = ohai['filesystem']['by_mountpoint']['/']['percent_used']
healthdata['logstash_root_diskpercent'] = percentstring.to_i

# get logstash process existence info
proc = Sys::ProcTable.ps.select { |p| p['cmdline'] =~ /data_cloudwatchlogstash/ }
healthdata['logstash_cloudwatch_proc_exists'] = ! proc.empty?
proc = Sys::ProcTable.ps.select { |p| p['cmdline'] =~ /data_cloudtraillogstash/ }
healthdata['logstash_cloudtrail_proc_exists'] = ! proc.empty?
proc = Sys::ProcTable.ps.select { |p| p['cmdline'] =~ /data_logstash/ }
healthdata['logstash_proc_exists'] = ! proc.empty?

# get sincedb info to see where we are in the log buckets
for sincedb in Dir["/usr/share/logstash/.sincedb*"] do
	f = File.open(sincedb).read
	begin
		timestamp = DateTime.parse(f)
		name = 'logstash_' + File.basename(sincedb).tr('.', '') + '_time'
		healthdata[name] = timestamp.strftime('%s')
	rescue
	end
end

# get total number of log events in the system
docs = client.count index: 'logstash*'
healthdata['es_total_document_count'] = docs['count']


# get total disk space used in cluster
data = client.cat.allocation(format: 'JSON', bytes: 'gb')
diskspace = 0
data.each do |l|
	diskspace = diskspace + l['disk.used'].to_i
end
healthdata['es_total_cluster_gb_disk_used'] = diskspace


# get total disk space used by primary indexes
data = client.cat.allocation(format: 'JSON', bytes: 'mb')
diskspace = 0
data.each do |l|
	diskspace = diskspace + l['disk.used'].to_i
end
healthdata['es_total_logs_gb_disk_used'] = diskspace/1000


# get number of cloudtrail messages
docs = client.count index: 'logstash-cloudtrail*'
healthdata['es_cloudtrail_document_count'] = docs['count']


# get number of cloudwatch messages
docs = client.count index: 'logstash-cloudwatch*'
healthdata['es_cloudwatch_document_count'] = docs['count']


# get number of logstash messages
docs = client.count index: 'logstash-2*'
healthdata['es_logstash_document_count'] = docs['count']



data = {
  name: 'logstash_health',
  protocol_version: '1',
  integration_version: '1.0.0',
  metrics: [ healthdata ]
}

puts JSON.generate(data)
