# Ruby CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-ruby/ for more details
#
version: 2.1

orbs:
  slack: circleci/slack@3.4.2

jobs:
  build:
    docker:
      # Specify the Ruby version you desire here
      - image: cimg/ruby:3.0.3
        environment:
          RAILS_ENV: test
          CC_TEST_REPORTER_ID: c88a6f4af1fbf80e0fc9a5593ebff124b2f940645b1eacb5adb681522bbf650e
          COVERAGE: true
          # PATH: "/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      - image: cimg/postgres:13.4
        environment:
          POSTGRES_USER: circleci

      - image: redis:4.0.1

    working_directory: ~/identity-pki

    steps:
      - checkout
      - install-deps

      - run:
          name: Install Code Climate Test Reporter
          command: |
            curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter
            chmod +x ./cc-test-reporter
      - run:
          name: Wait for DB
          command: dockerize -wait tcp://localhost:5432 -timeout 1m

      - run:
          name: Test Setup
          command: |
            cp config/application.yml.default config/application.yml
            bundle exec rake db:setup --trace

      - run:
          name: Run Tests
          command: |
            mkdir /tmp/test-results
            ./cc-test-reporter before-build
            bundle exec rake spec
      - run:
          name: Code Climate Test Coverage
          command: |
            ./cc-test-reporter format-coverage -t simplecov -o "coverage/codeclimate.$CIRCLE_NODE_INDEX.json"

      # collect reports
      - store_test_results:
          path: /tmp/test-results
      - store_artifacts:
          path: /tmp/test-results
          destination: test-results
      - deploy:
          command: |
            ./cc-test-reporter sum-coverage --output - --parts $CIRCLE_NODE_TOTAL coverage/codeclimate.*.json | ./cc-test-reporter upload-coverage --debug --input -
  build-release-container:
    working_directory: ~/identity-pki
    docker:
      - image: cimg/ruby:3.0.3
    steps:
      - checkout
      - setup_remote_docker
      - run: |
          if [ -z "$CIRCLE_TAG" ]; then exit 0; fi # this shouldn't be necessary...
          docker build -t logindotgov/pki:$CIRCLE_TAG -f Dockerfile .
          echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin
          docker push logindotgov/pki:$CIRCLE_TAG

  check-expiring-certs-config:
    docker:
      # Specify the Ruby version you desire here
      - image: cimg/ruby:3.0.3-browsers
        environment:
          RAILS_ENV: test
          CC_TEST_REPORTER_ID: c88a6f4af1fbf80e0fc9a5593ebff124b2f940645b1eacb5adb681522bbf650e
          COVERAGE: true
          # PATH: "/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      - image: cimg/postgres:13.4
        environment:
          POSTGRES_USER: circleci

      - image: redis:4.0.1

    working_directory: ~/identity-pki

    steps:
      - checkout
      - install-deps
      - run:
          name: Test Setup
          command: |
            cp config/application.yml.default config/application.yml
            bundle exec rake db:setup --trace
      - run:
          name: Check for expiring certs
          command: |
            bundle exec rake certs:print_expiring

      - slack/status:
          fail_only: true
          failure_message: ":piv-card::red_circle::scream: identity-pki has certs expiring within 30 days"
          include_project_field: false

commands:
  install-deps:
    steps:
      - restore_cache:
          keys:
            - v2-identity-pki-bundle-{{ checksum "Gemfile.lock" }}
      - run:
          name: Install dependencies
          command: |
            gem install bundler
            bundle check || bundle install --deployment --jobs=4 --retry=3 --without deploy development doc production --path vendor/bundle
      - save_cache:
          key: v2-identity-pki-bundle-{{ checksum "Gemfile.lock" }}
          paths:
            - vendor/bundle

workflows:
  version: 2
  release:
    jobs:
      - build
      - build-release-container:
          requires:
            - build
          filters:
            tags:
              only: "/^[0-9]{4}-[0-9]{2}-[0-9]{2,}.*/"
  daily-30d-expiring-cert:
    jobs:
      - check-expiring-certs-config
    triggers:
      - schedule:
          # Once a day at 12pm
          cron: "0 12 * * *"
          filters:
            branches:
              only:
                - master
