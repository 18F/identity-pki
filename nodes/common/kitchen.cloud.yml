<%-
#
# This file is the Test Kitchen configuration file for the per node integration
# tests.  See
# https://github.com/18F/identity-devops/blob/master/doc/technical/testing.md
# for more details.
#
# When you make a new integration test, you should make it in a directory named
# after this node's role, and then add the proper subnet, security_group and
# iam_profile below.
#

# The first statement in erb isn't allowed to be "require"
common_dir = File.dirname(File.expand_path(File.readlink(__FILE__)))
require File.join(common_dir, "cloud_init_utils", "cloud_init_builder")

require 'yaml'
require 'zlib'

Region = 'us-west-2'

role = File.basename(Dir.pwd)
environment = ENV.fetch('KITCHEN_EC2_INTEGRATION_ENVIRONMENT', 'ci')
ami_id = ENV.fetch('KITCHEN_EC2_AMI', 'ami-826122fa') # TODO look up dynamically

# set default AWS profile to sandbox account
ENV['AWS_PROFILE'] ||= 'identitysandbox.gov'

# TODO: Make a standard instance profile name for each instance so we don't need
# this hash.
iam_profiles = {
    "jumphost" => "#{environment}-base-permissions",
    "idp" => "#{environment}_idp_instance_profile",
    "worker" => "#{environment}_idp_instance_profile",
    "elasticsearch" => "#{environment}-base-permissions",
    "elk" => "#{environment}_elk_instance_profile",
    "app" => "#{environment}-base-permissions",
    "outboundproxy" => "#{environment}_obproxy_instance_profile",
    "pivcac" => "#{environment}_pivcac_instance_profile",
}
if !iam_profiles.key?(role)
  raise "IAM profile for role: #{role} not found in test kitchen boilerplate.  Please add it in #{__FILE__}."
end
iam_profile = iam_profiles.fetch(role)
# TODO: Make a standard "subnet type" tag so we don't need this.
subnets = {
    "jumphost" => "login-jumphost_subnet-#{environment}",
    "idp" => "login-idp1_subnet-#{environment}",
    "worker" => "login-idp1_subnet-#{environment}",
    "pivcac" => "login-idp1_subnet-#{environment}",
    "elasticsearch" => "login-admin_subnet-#{environment}",
    "elk" => "login-admin_subnet-#{environment}",
    "app" => "login-app_subnet-#{environment}",
    "outboundproxy" => "login-idp1_subnet-#{environment}",
}
if !subnets.key?(role)
  raise "Subnet for role: #{role} not found in test kitchen boilerplate.  Please add it in #{__FILE__}."
end
subnet = subnets.fetch(role)
# TODO: Standardize security group names so we don't need this.
security_groups = {
    "jumphost" => "login-jumphost_security_group-#{environment}",
    "idp" => "login-idp_security_group-#{environment}",
    "worker" => "login-idp_security_group-#{environment}",
    "elasticsearch" => "login-elk_security_group-#{environment}",
    "elk" => "login-elk_security_group-#{environment}",
    "app" => "login-app_security_group-#{environment}",
    "outboundproxy" => "login-obproxy_security_group-#{environment}",
    "pivcac" => "login-pivcac_security_group-#{environment}",
}
if !security_groups.key?(role)
  raise "Security group for role: #{role} not found in test kitchen boilerplate.  Please add it in #{__FILE__}."
end
security_group = security_groups.fetch(role)
# We want to discover real elasticsearch nodes, unless we're running the
# elasticsearch integration test.
es_tag_value = "elasticsearch"
if role == "elasticsearch"
  es_tag_value = "test-kitchen-elasticsearch"
end
# We want to discover real elk nodes, unless we're running the elk integration
# test.
elk_tag_value = "elk"
if role == "elk"
  elk_tag_value = "test-kitchen-elk"
end

cloud_init_info = [
  # TODO: Figure out why this is still necessary here but works in production.
  {
    "filename" => "fix_volume_permissions.yaml",
    "template" => "../common/user_data/fix_volume_permissions.yaml.erb",
    "content_type" => "text/cloud-config",
    "vars" => {}
  },
  {
    "filename" => "set-hostname.yaml",
    "template" => "../../terraform-modules/bootstrap/cloud-init.hostname.yaml.erb",
    "content_type" => "text/cloud-config",
    "vars" => {
      "hostname_prefix" => role,
      "domain" => "#{environment}.login.gov"
    }
  },
  {
    "filename" => "provision.sh",
    "template" => "../../terraform-modules/bootstrap/provision.sh",
    "content_type" => "text/x-shellscript",
    "vars" => {}
  },
  {
    "filename" => "base.yaml",
    "template" => "../../terraform-modules/bootstrap/cloud-init.base.yaml.erb",
    "content_type" => "text/cloud-config",
    "vars" => {
      "domain" => "login.gov",
      "env" => "#{environment}",
      "role" => role,
      "proxy_server" => nil,
      "proxy_port" => nil,
      "no_proxy_hosts" => nil,
    }
  },
  # run identity-devops-private provisioning using provision.sh
  {
    "filename" => "provision-private.yaml",
    "template" => "../../terraform-modules/bootstrap/cloud-init.provision.yaml.erb",
    "content_type" => "text/cloud-config",
    "vars" => {
      # assume chef is already installed in the AMI
      "chef_download_sha256" => "",
      "chef_download_url" => "",

      # uncomment and customize in order to test new chef versions
      #"chef_download_sha256" => "ce0ff3baf39c8c13ed474104928e7e4568a4997a1d5797cae2b2ba3ee001e3a8",
      #"chef_download_url" => "https://packages.chef.io/files/stable/chef/13.8.5/ubuntu/16.04/chef_13.8.5-1_amd64.deb",

      "provision_phase_name" => "private-provisioning",

      "git_clone_url" => "git@github.com:18F/identity-devops-private",
      "git_ref" => "master",
      "s3_ssh_key_url" => "s3://login-gov.secrets.894947205914-us-west-2/common/id_ecdsa.id-do-private.deploy"
    }
  }
]

user_data = build_cloud_init(cloud_init_info)

unless ENV['KITCHEN_EC2_SSH_KEY'] && ENV['KITCHEN_EC2_SSH_KEYPAIR_ID']
  puts "ERROR: Environment variable KITCHEN_EC2_SSH_KEY not set"
  puts "You should upload an SSH public key to AWS, then set these env vars:"
  puts "KITCHEN_EC2_SSH_KEY: path to the local private key"
  puts "KITCHEN_EC2_SSH_KEYPAIR_ID: label/name of the key in AWS console"
  puts "The bin/import-ssh-key script can help do this."
  raise "KITCHEN_EC2_SSH_KEY (path to key) and KITCHEN_EC2_SSH_KEYPAIR_ID (name in AWS) not set, run bin/import-ssh-key to import a key to AWS, then set env variables in your ~/.bashrc or similar"
end

ssh_key_file = ENV.fetch('KITCHEN_EC2_SSH_KEY')
ssh_key_file = File.expand_path(ssh_key_file)
# ensure file exists because kitchen won't error when it doesn't
if !File.exist?(ssh_key_file)
  raise "SSH key file not found: #{ssh_key_file.inspect}. Override with $KITCHEN_EC2_SSH_KEY"
end

ssh_key_pair_name = ENV.fetch('KITCHEN_EC2_SSH_KEYPAIR_ID')

require 'aws-sdk'
ec2 = Aws::EC2::Resource.new(region: Region)

# Run a number of checks that expected resources exist, because kitchen-ec2
# itself bombs out it horrible ways without giving any helpful error messages.

# Ensure ssh_key_pair_name exists
ec2.key_pair(ssh_key_pair_name).key_fingerprint

# Ensure subnet exists
if ec2.subnets(filters: [{name: 'tag:Name', values: [subnet]}]).count.zero?
  raise "No subnet named #{subnet.inspect} found"
end

# Ensure security group exists
if ec2.security_groups(filters: [{name: 'tag:Name', values: [security_group]}]).count.zero?
  raise "No security group named #{security_group.inspect} found"
end

def gzip(string)
  begin
    # ruby 2.4+
    return Zlib.gzip(string)
  rescue NoMethodError
  end

  sio = StringIO.new
  sio.binmode
  gz = Zlib::GzipWriter.new(sio)
  gz.write(string)
  gz.close
  sio.string
end

# Compress user data if it's over 16K limit
if user_data.length > 16_384
  user_data = gzip(user_data)
end

%>

<%=
{
    "driver" => {
        "name" => "ec2",
        "aws_ssh_key_id" => ssh_key_pair_name,
        "region" => Region,
        "associate_public_ip" => true, # necessary to access from outside VPC
        "subnet_filter" => {
            "tag" => "Name",
            "value" => subnet
        },
        "security_group_filter" => {
            "tag" => "Name",
            "value" => security_group
        },
        "instance_type" => "c4.xlarge",
        "image_id" => ami_id,
        "user_data" => user_data,
        "iam_profile_name" => iam_profile,
        "tags" => {
            "created-by" => "test-kitchen",
            "user" => ENV['GSA_USERNAME'] || ENV['USER'],
            "terminate-after" => (Time.now + 604800).strftime('%F'),
            "Name" => "test-kitchen-#{role}",
            "prefix" => "test-kitchen-#{role}",
            "domain" => "#{environment}.login.gov"
        }
    },
    "transport" => {
        "username" => "ubuntu",
        "ssh_key" => ssh_key_file,
        "name" => "sshtar",
        "compression" => "zlib",
        "compression_level" => 9
    },
    "provisioner" => {
        "name" => "chef_zero_preinstall",
        "always_update_cookbooks" => "true",
        "environments_path" => "../../kitchen/environments",
        "roles_path" => "../../kitchen/roles",
        "client_rb" => {
            "environment" => "#{environment}",
            #"treat_deprecation_warnings_as_errors" => true,
            #"resource_cloning" => false,
        },
        # pre_install_command requires our monkey patched *_preinstall
        # provisioners
        "pre_install_command" => "while ! [ -e /var/lib/cloud/instance/boot-finished ]; do systemctl is-system-running; echo Waiting for systemd / cloud-init boot to finish; sleep 15; done",
        "install_strategy" => "skip", # Let provision.sh has installed chef
        "root_path" => "/var/lib/kitchen"
    },
    "verifier" => {
        "name" => "inspec"
    },
    "platforms" => [{
        "name" => "ubuntu-ami",
    }],
    "suites" => [{
        "name" => "default",
        "run_list" => ["role[#{role}]"],
        "verifier" => {
            "inspec_tests" => ["test/smoke/default"]
        },
        "attributes" => {
            "build-essential" => {
                "compile_time" => true
            },
            "apt" => {
                "compile_time_update" => true
            },
            "provisioner" => {
                "name" => "kitchen-ec2",
                "auto-scaled" => true
            },
            "elk" => {
                "es_tag_key" => "prefix",
                "es_tag_value" => es_tag_value,
                "elk_tag_key" => "prefix",
                "elk_tag_value" => elk_tag_value
            }
        }
    }]
}.to_yaml
%>

# vim: set ft=eruby :
