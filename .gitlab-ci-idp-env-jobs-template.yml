---
stages:
  - deploy
  - post_deploy
  - test

post_deploy:
  environment:
    action: access
    name: ${ENV_NAME}
  allow_failure: true
  variables:
    RECYCLE_ENV_RUNNERS_ONLY: "true"
    GIT_SUBMODULE_STRATEGY: normal
  resource_group: $ENV_NAME
  tags:
    - ${ENV_NAME}-env-runner
  image:
    name: $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/cd/env_deploy/blessed@$DEPLOY_IMAGE_DIGEST
  stage: post_deploy
  script:
    - echo "Somebody set us up the post_deploy" ; exit 1

deploy:
  environment:
    action: start
    name: ${ENV_NAME}
    on_stop: stop
    url: https://idp.${ENV_NAME}.identitysandbox.gov/
  resource_group: ${ENV_NAME}
  tags:
    - ${ENV_NAME}-env-runner
  variables:
    GIT_SUBMODULE_STRATEGY: normal
  image:
    name: $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/cd/env_deploy/blessed@$DEPLOY_IMAGE_DIGEST
  stage: deploy
  artifacts:
    name: "$CI_ENVIRONMENT_NAME-$CI_COMMIT_SHA"
    paths:
      - terraform.plan
      - plan.txt
    expire_in: 1 year
    reports:
      terraform: plan.json
  script:
    - echo "Somebody set us up the deploy" ; exit 1

test:
  environment:
    action: verify
    name: ${ENV_NAME}
  tags:
    - ${ENV_NAME}-env-runner
  variables:
    IDP_HOSTNAME: idp.${ENV_NAME}.identitysandbox.gov
    IDP_ORIGIN_HOSTNAME: idp.origin.${ENV_NAME}.identitysandbox.gov
    ENV_NAME: ${ENV_NAME}
    ACCOUNT_ID: $AWS_ACCOUNT_ID
  image:
    name: $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/cd/env_test/blessed@$TEST_IMAGE_DIGEST
  stage: test
  artifacts:
    reports:
      junit: testlogs/*.xml
  script:
    - echo "Tests for great justice" ; exit 1

stop:
  tags:
    - ${ENV_NAME}-env-runner
  resource_group: ${ENV_NAME}
  environment:
    name: ${ENV_NAME}
    action: stop
  when: manual
  stage: deploy
  variables:
    GIT_SUBMODULE_STRATEGY: normal
  image:
    name: $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/cd/env_stop/blessed@$STOP_IMAGE_DIGEST
  script:
    - echo "Main screen turn off." ; exit 1

run_allowed_image:
  environment:
    action: verify
    name: ${ENV_NAME}
  tags:
    - test-pool
  stage: test
  allow_failure: true
  image:
    name: $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/ecr-public/docker/library/alpine:latest
  script:
    - touch allowed.txt
  artifacts:
    paths:
      - "*.txt"

run_unallowed_image:
  environment:
    action: verify
    name: ${ENV_NAME}
  tags:
    - ${ENV_NAME}-env-runner
  stage: test
  allow_failure: true
  image:
    name: $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/ecr-public/docker/library/alpine:latest
  script:
    - touch unallowed.txt
  artifacts:
    paths:
      - "*.txt"

test_unallowed_image:
  environment:
    action: verify
    name: ${ENV_NAME}
  tags:
    - test-pool
  stage: test
  needs:
    - run_unallowed_image
    - run_allowed_image
  script:
    - test ! -f unallowed.txt
    - test -f allowed.txt

data_warehouse:
  stage: deploy
  rules:
    - if: '$DATA_WAREHOUSE_ENABLED == "true"'
  variables:
    ENV_NAME: ${ENV_NAME}
    branch: ${branch}
    DEVOPS_TERRAFORM_APPLY_IMAGE_DIGEST: ${DEVOPS_TERRAFORM_APPLY_IMAGE_DIGEST}
    DEVOPS_TERRAFORM_PLAN_VERIFY_IMAGE_DIGEST: ${DEVOPS_TERRAFORM_PLAN_VERIFY_IMAGE_DIGEST}
    ASG_REFRESH_IMAGE_DIGEST: ${ASG_REFRESH_IMAGE_DIGEST}
    LAUNCH_MIGRATION_IMAGE_DIGEST: ${LAUNCH_MIGRATION_IMAGE_DIGEST}
  trigger:
    include: .gitlab-ci-data-warehouse-env-jobs-template.yml
