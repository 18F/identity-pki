#!/usr/bin/env ruby
# frozen_string_literal: true

require 'optparse'

Dir.chdir(File.dirname(__FILE__)) { require 'bundler/setup' }

require_relative '../lib/cloudlib'

def log
  Cloudlib.cli_log
end

def ssm_instance(instance:, document:, doc_env:, cli_timeout:)
  log.info("SSM session to #{Cloudlib::EC2.instance_label(instance)}")
  single = Cloudlib::SSM::Single.new(
    instance: instance,
    document: document,
    doc_env: doc_env,
    cli_timeout: cli_timeout
  )
  single.ssm_session_exec
end

def main(args)
  options = {
    pick_strategy: nil,
    document: 'default',
    doc_env: nil,
    cli_timeout: 60,
  }

  basename = File.basename($0)

  optparse = OptionParser.new do |opts|
    opts.banner = <<-EOM
usage: #{basename} [OPTIONS] HOST [COMMAND]

Start an SSM session on an individual EC2 instance, using the
environment-specific 'DOC_ENV-ssm-document-DOCUMENT' SSM document,
where DOC_ENV defaults to the VPC name, and DOCUMENT defaults to 'default'.

Interactive sessions require the corresponding AWS profile
(defined in ~/.aws/config) to have a SSMSessionRunAs session tag
corresponding to a valid user on the target instance (created in the
identity-devops-private repo, under chef/data_bags/users), e.g.:

    session_tags = SSMSessionRunAs=username

HOST may be specified by EC2 Instance ID or by EC2 instance "Name" tag.
When there are multiple instances found with the same Name tag (like
asg-dev-idp), an interactive prompt will appear by default. There are
several options to choose systematically: --newest, --oldest, --any.

Examples:

    # SSM to an interactively selected auto scaled IDP instance by name tag
    #{basename} asg-dev-idp

    # SSM to a specific instance using the 'int-ssm-document-sudo' SSM document
    #{basename} -e int -d sudo i-abcd1234

    # SSM to an interactively selected server in dev using the 'dev-ssm-document-tail-cw' SSM document
    #{basename} -d tail-cw -P 'asg-dev-*'


Options:
    EOM

    opts.on('-h', '--help', 'Display this message') do
      STDERR.puts opts
      exit
    end

    opts.on('-v', '--verbose', 'Be more verbose') do
      Cloudlib.log_level -= 1 if Cloudlib.log_level > 0
    end

    opts.on('-q', '--quiet', 'Be quieter (can pass multiple times)') do
      Cloudlib.log_level += 1
    end

    opts.on('-1', '--any', 'SSM to random server matching name') do
      options[:pick_strategy] = :random
    end

    opts.on('--newest', 'Pick server with most recent boot time') do
      options[:pick_strategy] = :newest
    end

    opts.on('--oldest', 'Pick server with oldest boot time') do
      options[:pick_strategy] = :oldest
    end

    opts.on('-P', '--prompt', 'Pick server interactively if ambiguous') do
      options[:pick_strategy] = :prompt
    end

    opts.on('-d', '--document DOCUMENT',
      'Use custom "document" string as part of SSM document name') do |doc|
      options[:document] = doc
    end

    opts.on('-e', '--env ENVIRONMENT',
      'Use custom "env" string instead of VPC_NAME as part of SSM document name') do |doc_env|
      options[:doc_env] = doc_env
    end

    opts.on('-t', '--timeout TIMEOUT',
      'Specify custom value for --cli-read-timeout and --cli-read-timeout flags') do |timeout|
      options[:cli_timeout] = timeout
    end

    opts.on('-p', '--aws-profile PROFILE', 'Set AWS_PROFILE env variable') do |val|
      ENV['AWS_PROFILE'] = val
      log.debug("AWS_PROFILE=#{val.inspect}")
    end

    opts.on('-R', '--aws-region REGION', 'Set AWS_REGION env variable') do |val|
      ENV['AWS_REGION'] = val
      log.debug("AWS_REGION=#{val.inspect}")
    end
  end

  host_and_cmd = optparse.order(args)

  if host_and_cmd.empty?
    STDERR.puts optparse
    exit 1
  end

  host_spec = host_and_cmd.shift

  host_spec = host_spec.strip

  instance = Cloudlib::EC2.new.get_instance_by_name_or_id(
    host_spec,
    pick_strategy: options.fetch(:pick_strategy),
  )

  ssm_instance(
    instance: instance,
    document: options[:document],
    doc_env: options[:doc_env],
    cli_timeout: options[:cli_timeout]
  )
end

if __FILE__ == $0
  main(ARGV)
end
