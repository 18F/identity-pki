#!/usr/bin/env ruby

require 'optparse'

require 'bundler/setup'

require_relative '../lib/cloudlib'

def log
  Cloudlib.cli_log
end

def ssh_instance(instance:, ssh_cmdline_opts:)
  log.info("SSH to #{Cloudlib::EC2.instance_label(instance)}")
  single = Cloudlib::SSH::Single.new(instance: instance)
  single.ssh_exec(ssh_cmdline_opts: ssh_cmdline_opts)
end

def get_instance_by_id(instance_id)
  log.debug("Looking up instance ID #{instance_id.inspect}")
  Cloudlib::EC2.new.lookup_instance_by_id(instance_id)
end

def get_instance_by_name(name_tag, states:['running'], pick_random: false)
  filters = [
    {name: 'tag:Name', values: [name_tag]},
    {name: 'instance-state-name', values: states}
  ]
  if pick_random
    log.debug("Looking up random instance named #{name_tag.inspect}")
    Cloudlib::EC2.new.get_random_thing(:instances, filters)
  else
    log.debug("Looking up instance named #{name_tag.inspect}")
    Cloudlib::EC2.new.get_unique_thing(:instances, filters)
  end
end

def main(args)

  options = {}
  cl_ssh_options = {}

  basename = File.basename($0)

  optparse = OptionParser.new do |opts|
    opts.banner = <<-EOM
usage: #{basename} [OPTIONS] [USER@]HOST [COMMAND]

SSH to an individual EC2 instance. HOST may be specified by EC2 Instance ID or
by EC2 instance "Name" tag.

If USER is not specified, it defaults to $GSA_USERNAME.

Examples:

    # SSH to a specific instance
    #{basename} i-abcd1234

    # SSH with a username
    #{basename} ubuntu@i-abcd1234

    # SSH to a uniquely named instance
    #{basename} login-worker0-dev

    # SSH to a randomly selected matching auto scaled IDP instance
    #{basename} -1 asg-dev-idp

    # Quietly SSH to a randomly selected matching es server, run hostname
    #{basename} -1 -q login-es*-qa hostname -f

Options:
    EOM

    opts.on('-h', '--help', 'Display this message') do
      STDERR.puts opts
      exit
    end

    opts.on('-v', '--verbose', 'Be more verbose') do
      cl_ssh_options[:verbose] = true
      Cloudlib.log_level -= 1 if Cloudlib.log_level > 0
    end

    opts.on('-q', '--quiet', 'Be quieter (can pass multiple times)') do
      cl_ssh_options[:verbose] = false
      cl_ssh_options[:quiet] = true
      Cloudlib.log_level += 1
    end

    opts.on('-l', '--login USER', 'SSH login username') do |val|
      cl_ssh_options[:username] = val
    end

    opts.on('-1', '--any', 'SSH to random server matching name') do
      options[:pick_random] = true
    end

    opts.on('-j', '--[no-]jumphost', 'Whether to use a jumphost') do |val|
      cl_ssh_options[:use_jumphost] = val
    end

    opts.on('-o', '--ssh-opt OPT',
            'Set SSH option (may be passed multiple times)') do |val|
      cl_ssh_options[:ssh_opts] ||= []
      cl_ssh_options[:ssh_opts] += ['-o', val]
    end

    opts.on('--aws-profile PROFILE', 'Set AWS_PROFILE env variable') do |val|
      ENV['AWS_PROFILE'] = val
      STDERR.puts "AWS_PROFILE: #{val.inspect}"
    end
  end

  host_and_cmd = optparse.order(args)

  if host_and_cmd.empty?
    STDERR.puts optparse
    exit 1
  end

  host_spec = host_and_cmd.shift
  if !host_and_cmd.empty?
    cl_ssh_options[:command] = host_and_cmd
  end

  if host_spec.include?('@')
    cl_ssh_options[:username], host_spec = host_spec.split('@', 2)
  end

  host_spec = host_spec.strip.downcase

  if host_spec =~ /\Ai-[a-f0-9]+\z/
    instance = get_instance_by_id(host_spec)
  else
    instance = get_instance_by_name(host_spec, pick_random: options.fetch(:pick_random))
  end

  if !host_and_cmd.empty?
    cl_ssh_options[:command] = host_and_cmd
  end

  ssh_instance(instance: instance, ssh_cmdline_opts: cl_ssh_options)
end

if __FILE__ == $0
  main(ARGV)
end
