#!/bin/bash
#
# These are the environment variables that our automation currently expects to
# be set.  See
# https://www.terraform.io/docs/configuration/variables.html#environment-variables.
#
# Because of https://github.com/18F/identity-devops/pull/244, you should not
# have to customize this file.
#
# There are a few environment variables that this file expects.  These are
# checked or set by bin/load-env.sh, so sourcing that file is recommended if
# you're writing a script that depends on this configuration.
#
# - AWS_ACCESS_KEY_ID - AWS API credentials
# - AWS_SECRET_ACCESS_KEY - AWS API credentials
# - GSA_USERNAME - The username of your infrastructure account (used for chef)
# - GSA_FULLNAME - Your full name in the format "Firstname Lastname" (used for chef)
# - GSA_EMAIL - Your GSA email (used for chef)
#
# You also may need to configure TF_VAR_app_sg_ssh_cidr_blocks to include your
# IP if you're not on the GSA internal network, otherwise you won't be able to
# log into the infrastructure you're creating.

# the environment to deploy to (tf/test/dev/etc)
echo "Working in environment: $TF_VAR_env_name"

# AMI to use for all instances
export AMI_ID=ami-ac5335cc

# region to deploy to
export TF_VAR_region=us-west-2

# Your AWS API access key
export TF_VAR_access_key=$AWS_ACCESS_KEY_ID

# Your AWS API secret key
export TF_VAR_secret_key=$AWS_SECRET_ACCESS_KEY

# account_id is for the AWS account in which this is being done (the actual number, not the name)
# sandbox
export TF_VAR_account_id=555546682965

# ------------------------------------------------------------

# this is added as a "client" tag to every resource to help with billing
export TF_VAR_client=MB18FIX019988

# ec2 ssh key used to get in (often overridden in the AMI)
export TF_VAR_key_name=login-dev-us-west-2

# non-webapp/worker AMI (FISMA base)
export TF_VAR_default_ami_id=$AMI_ID

# AMI that may or may not have been cooked with packer to speed provisioning time
export TF_VAR_ami_id=$AMI_ID

# base AMIs for webapp/workers.  We have two so we can blue/green deploy these without downtime.
export TF_VAR_idp1_ami_id=$AMI_ID
export TF_VAR_idp2_ami_id=$AMI_ID
export TF_VAR_worker1_ami_id=$AMI_ID
export TF_VAR_worker2_ami_id=$AMI_ID

# other AMIs for other host types
# other amis for different hosts
export TF_VAR_jenkins_ami_id=$AMI_ID
export TF_VAR_chef_ami_id=$AMI_ID
export TF_VAR_jumphost_ami_id=$AMI_ID


# Similar to Ruby's Array#join
join_by() {
    local delimiter="$1"
    shift
    if [ $# -eq 0 ]; then
        echo
        return
    fi
    # print first elem with no delimiter
    echo -n "$1"
    shift

    for elem in "$@"; do
        echo -n "$delimiter$elem"
    done

    echo
}

# Output shell array as a terraform-compatible string
# (1 2 3) => '["1", "2", "3"]'
array_to_string() {
    echo "[\"$(join_by '", "' "$@")\"]"
}


# whitelist of CIDR blocks for ssh access to app host
GSA_INTERNAL_CIDRS=()
GSA_INTERNAL_CIDRS+=("159.142.0.0/16") # GSA VPN
GSA_INTERNAL_CIDRS+=("63.232.44.80/29") # GSA Guest

TF_VAR_app_sg_ssh_cidr_blocks="$(array_to_string "${GSA_INTERNAL_CIDRS[@]}")"
export TF_VAR_app_sg_ssh_cidr_blocks


# self explanatory
export TF_VAR_rds_password=Zero-Inconvenience
export TF_VAR_rds_username=upaya

export TF_VAR_route53_id=Z2DA4DCW3GKJVW

# to dynamically get the power users so that we can administer KMS keys
export TF_VAR_power_users=`aws iam get-group --group-name identity-power --output json | ruby -e 'require "json"; require "pp"; result = []; JSON.parse(STDIN.read)["Users"].each do |u|; result << u["Arn"]; end; pp result' | tr -d '\n'`

#####################
# These variables are used for packer
export CHEF_ENV=$TF_VAR_env_name
export DATABAG_KEY_PATH=$HOME/.chef/$CHEF_ENV-databag.key
export FISMA_BASE_AMI_ID=$TF_VAR_default_ami_id
export VALIDATION_CLIENT_NAME=$CHEF_ENV-login-dev-validator


####################
# These variables are used for chef
export TF_VAR_chef_databag_key_path=$DATABAG_KEY_PATH
export TF_VAR_chef_id=$GSA_USERNAME
export TF_VAR_chef_id_key_path=$HOME/.chef/$GSA_USERNAME-$CHEF_ENV.pem
export TF_VAR_chef_info="$GSA_FULLNAME $GSA_EMAIL big-giant-stupid-password-yepyep-not-used-as-far-as-tim-can-tell-if-we-had-the-ui"
# Branch of identity-devops repo that chef server will clone during deployment
export TF_VAR_chef_repo_gitref="$(git rev-parse --abbrev-ref HEAD)"
export TF_VAR_live_certs=true # true/false

export TF_VAR_default_ami_id=$AMI_ID


####################
# This is the deploy key that lets us check out identity-devops
export TF_VAR_git_deploy_key_path=~/.chef/id_rsa_jenkins

# Customize the location of the nessus/nessus manager debian package
# export TF_VAR_nessus_server_path=

# Enable other apps, such as the dashboard
export TF_VAR_apps_enabled=false
