# Jobs defined here use the ecr-public/docker/library/alpine docker image by
# default. To find other available images:
#   aws ecr describe-repositories | jq '.repositories[].repositoryUri'
#
# To use a publicly-available image via an ECR pull-through cache:
#   Locate the image at https://gallery.ecr.aws/ and note the path, e.g. docker/library/alpine
#   Prefix 'ecr-public/' to the path, e.g. ecr_path=ecr-public/docker/library/alpine
#   Add $ecr_path to terraform/ecr/tooling-prod/repos.yml and tf apply.
#   Use the image in your CI jobs as:
#     image: "${ECR_REGISTRY}/$ecr_path"
#
# To build an image from a Dockerfile:
#   Make up a name for your image's repo.
#   Add it to terraform/ecr/tooling-prod/repos.yml and tf apply.
#   Add the dockerfile to dockerfiles/
#   Build it by adding a job like so:
#     build_idp_ci:
#       <<: *build_template
#       variables:
#         dockerfile: idp_ci.Dockerfile
#         ecr_repo: idp/ci

stages:
  - build
  - test_gitlab
  - deploy
  - test

variables:
  CI_COMMIT_TAG: "$CI_COMMIT_SHA"
  ECR_REGISTRY: "$AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com"
  DEPLOY_IMAGE_DIGEST: "sha256:a1dc5a54bf94f8bde6b8eba3c48fc7b869a999b341d76639458d6a757dbfcf57"
  TEST_IMAGE_DIGEST: "sha256:4f08ebe20d31b7001969b56dc14473e29466f6e4e754ff414626b301ae89d9c6"
  GITDEPLOY_IMAGE_DIGEST: "sha256:5cbb0d207db1f1a4267ae4255f901794c6847ca6d13723bd43eee3e80726bf5e"
  GITTEST_IMAGE_DIGEST: "sha256:9c92a4d06c4e88af3989df742cbc466054f6842855da4b71f8092204ff85ecdb"

gitlab-qa:
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
      changes:
        - terraform/gitlab/**/*
        - kitchen/cookbooks/identity-gitlab/**/*
        - terraform/modules/gitlab_runner_pool/**/*
  variables:
    GITHUB_ENDPOINT: "https://${EXTERNAL_FQDN}:443"
    GITLAB_ADMIN_PASSWORD: ${GITLAB_QA_PASSWORD}
    GITLAB_ADMIN_USERNAME: ${GITLAB_QA_ACCOUNT}
    GITLAB_API_BASE: "https://${EXTERNAL_FQDN}/api/v4"
    GITLAB_FORKER_PASSWORD: ${GITLAB_QA_PASSWORD}
    GITLAB_FORKER_USERNAME: ${GITLAB_QA_ACCOUNT}
    GITLAB_PASSWORD: ${GITLAB_QA_PASSWORD}
    GITLAB_QA_PASSWORD: ${GITLAB_QA_PASSWORD}
    GITLAB_QA_USERNAME_1: ${GITLAB_QA_ACCOUNT}
    GITLAB_USERNAME: ${GITLAB_QA_ACCOUNT}
    QA_DEBUG: "true"
  tags:
    - build-pool
  image:
    name: $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/gitlab-qa:latest
  stage: test_gitlab
  script:
    - echo "Yay!"
  when: manual

# TODO(LG-6069): Use an image from ECR
.build_template: &build_template
  stage: build
  tags:
    - build-pool
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  script:
    - mkdir -p /kaniko/.docker
    - |-
       KANIKOCFG="\"credsStore\":\"ecr-login\""
       if [ "x${http_proxy}" != "x" -o "x${https_proxy}" != "x" ]; then
         KANIKOCFG="${KANIKOCFG}, \"proxies\": { \"default\": { \"httpProxy\": \"${http_proxy}\", \"httpsProxy\": \"${https_proxy}\", \"noProxy\": \"${no_proxy}\"}}"
       fi
       KANIKOCFG="{ ${KANIKOCFG} }"
       echo "${KANIKOCFG}" > /kaniko/.docker/config.json
    - >-
      /kaniko/executor
      --context "${CI_PROJECT_DIR}"
      --dockerfile "${CI_PROJECT_DIR}/dockerfiles/${dockerfile}"
      --destination "${ECR_REGISTRY}/${ecr_repo}:latest"
      --destination "${ECR_REGISTRY}/${ecr_repo}:${CI_COMMIT_TAG}"
      --build-arg "http_proxy=${http_proxy}" --build-arg "https_proxy=${https_proxy}" --build-arg "no_proxy=${no_proxy}"

# Build images by providing a dockerfile (in dockerfiles/) and a destination ECR repo

build_gitlab_deploy:
  <<: *build_template
  rules:
    # always run if it's on the main branch
    - if: $CI_COMMIT_BRANCH == "main"
    # If this is not new code, then stop
    - if: $CI_PIPELINE_SOURCE != "push" || $CI_COMMIT_BRANCH
      when: never
    # run if there are changes in these files
    - changes:
        - dockerfiles/gitlab_deploy*
        - versions.tf
  variables:
    dockerfile: gitlab_deploy.Dockerfile
    ecr_repo: cd/gitlab_deploy

build_gitlab_test:
  <<: *build_template
  rules:
    # always run if it's on the main branch
    - if: $CI_COMMIT_BRANCH == "main"
    # If this is not new code, then stop
    - if: $CI_PIPELINE_SOURCE != "push" || $CI_COMMIT_BRANCH
      when: never
    # run if there are changes in these files
    - changes:
        - dockerfiles/gitlab_test*
        - versions.tf
  variables:
    dockerfile: gitlab_test.Dockerfile
    ecr_repo: cd/gitlab_test

build_env_deploy:
  <<: *build_template
  rules:
    # always run if it's on the main branch
    - if: $CI_COMMIT_BRANCH == "main"
    # If this is not new code, then stop
    - if: $CI_PIPELINE_SOURCE != "push" || $CI_COMMIT_BRANCH
      when: never
    # run if there are changes in these files
    - changes:
        - dockerfiles/env_deploy*
        - versions.tf
  variables:
    dockerfile: env_deploy.Dockerfile
    ecr_repo: cd/env_deploy

build_env_test:
  <<: *build_template
  rules:
    # always run if it's on the main branch
    - if: $CI_COMMIT_BRANCH == "main"
    # If this is not new code, then stop
    - if: $CI_PIPELINE_SOURCE != "push" || $CI_COMMIT_BRANCH
      when: never
    # run if there are changes in these files
    - changes:
        - dockerfiles/env_test*
        - versions.tf
  variables:
    dockerfile: env_test.Dockerfile
    ecr_repo: cd/env_test

build_idp_ci:
  <<: *build_template
  rules:
    # always run if it's on the main branch
    - if: $CI_COMMIT_BRANCH == "main"
    # If this is not new code, then stop
    - if: $CI_PIPELINE_SOURCE != "push" || $CI_COMMIT_BRANCH
      when: never
    # run if there are changes in these files
    - changes:
        - dockerfiles/idp_ci*
  variables:
    dockerfile: idp_ci.Dockerfile
    ecr_repo: idp/ci

# templates for idp env deploys
.deploy_template: &deploy_template
  variables:
    GIT_SUBMODULE_STRATEGY: normal
  image:
    # these are hardcoded to make this deploy process more secure.
    # If you want to update this image, you will need to edit it here, and in
    # s3://login-gov.secrets.<account>-us-west-2/<env>/gitlab_env_runner_allowed_images,
    # or s3://login-gov.secrets.<account>-us-west-2/common/gitlab_env_runner_allowed_images.
    # If you are doing development work, you can override them for your env.
    name: $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/cd/env_deploy@$DEPLOY_IMAGE_DIGEST
  stage: deploy
  artifacts:
    name: "$CI_ENVIRONMENT_NAME-$CI_COMMIT_SHA"
    paths:
      - terraform.plan
      - plan.txt
    expire_in: 1 year
    reports:
      terraform: plan.json
  script:
    - echo "Somebody set us up the deploy"

.test_template: &test_template
  image:
    # these are hardcoded to make this deploy process more secure.
    # If you want to update this image, you will need to edit it here, and in
    # s3://login-gov.secrets.<account>-us-west-2/<env>/gitlab_env_runner_allowed_images,
    # or s3://login-gov.secrets.<account>-us-west-2/common/gitlab_env_runner_allowed_images.
    name: $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/cd/env_test@$TEST_IMAGE_DIGEST
  stage: test
  artifacts:
    reports:
      junit: testlogs/*.xml
  script:
    - echo "Tests for great justice"

.badtest_template: &badtest_template
  when: manual
  allow_failure: true
  image:
    name: $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/ecr-public/docker/library/alpine
  stage: test
  script:
    - echo "You have no chance to survive make your test."



# deploy jobs for tspencer env here.
deploy_tspencer:
  <<: *deploy_template
  environment: tspencer
  resource_group: tspencer
  tags:
    - tspencer-env-runner
  only:
    - stages/tspencer

test_tspencer:
  <<: *test_template
  only:
    - stages/tspencer
  tags:
    - tspencer-env-runner
  needs:
    - deploy_tspencer
  variables:
    IDP_HOSTNAME: idp.tspencer.identitysandbox.gov
    IDP_ORIGIN_HOSTNAME: idp.origin.tspencer.identitysandbox.gov
    ENV_NAME: tspencer

badtest_tspencer:
  <<: *badtest_template
  only:
    - stages/tspencer
  tags:
    - tspencer-env-runner
  needs:
    - deploy_tspencer


# deploy jobs for pauldoom env here.
deploy_pauldoom:
  <<: *deploy_template
  environment: pauldoom
  resource_group: pauldoom
  only:
    - stages/pauldoom
  tags:
    - pauldoom-env-runner

test_pauldoom:
  <<: *test_template
  only:
    - stages/pauldoom
  tags:
    - pauldoom-env-runner
  needs:
    - deploy_pauldoom
  variables:
    IDP_HOSTNAME: idp.pauldoom.identitysandbox.gov
    IDP_ORIGIN_HOSTNAME: idp.origin.pauldoom.identitysandbox.gov
    ENV_NAME: pauldoom

badtest_pauldoom:
  <<: *badtest_template
  tags:
    - pauldoom-env-runner
  only:
    - stages/pauldoom
  needs:
    - deploy_pauldoom

# deploy jobs for gitstaging env here.
deploy_gitstaging:
  environment: gitstaging
  resource_group: gitstaging
  only:
    - stages/gitstaging
  variables:
    GIT_SUBMODULE_STRATEGY: normal
  tags:
    - gitstaging-env-runner
  image:
    # these are hardcoded to make this deploy process more secure.
    # If you want to update this image, you will need to edit it here, and in
    # s3://login-gov.secrets.<account>-us-west-2/<env>/gitlab_env_runner_allowed_images,
    # or s3://login-gov.secrets.<account>-us-west-2/common/gitlab_env_runner_allowed_images.
    # If you are doing development work, you can override them for your env.
    name: $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/cd/gitlab_deploy@$GITDEPLOY_IMAGE_DIGEST
  stage: deploy
  artifacts:
    name: "$CI_ENVIRONMENT_NAME-$CI_COMMIT_SHA"
    paths:
      - terraform.plan
      - plan.txt
    expire_in: 1 year
    reports:
      terraform: plan.json
  script:
    - echo "Yay deploys!"

test_gitstaging:
  only:
    - stages/gitstaging
  variables:
    ENV_NAME: gitstaging
    DOMAIN: gitlab.gitstaging.gitlab.login.gov
  tags:
    - gitstaging-env-runner
  image:
    # these are hardcoded to make this deploy process more secure.
    # If you want to update this image, you will need to edit it here, and in
    # s3://login-gov.secrets.<account>-us-west-2/<env>/gitlab_env_runner_allowed_images,
    # or s3://login-gov.secrets.<account>-us-west-2/common/gitlab_env_runner_allowed_images.
    name: $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/cd/gitlab_test@$GITTEST_IMAGE_DIGEST
  stage: test
  needs:
    - deploy_gitstaging
  script:
    - echo "Somebody set us up the deploy"
  artifacts:
    reports:
      junit: testlogs/*.xml
  script:
    - echo "Tests for great justice"

badtest_gitstaging:
  when: manual
  allow_failure: true
  tags:
    - gitstaging-env-runner
  image:
    name: $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/ecr-public/docker/library/alpine
  stage: test
  only:
    - stages/gitstaging
  needs:
    - deploy_gitstaging
  script:
    - echo "You have no chance to survive make your test."

# deploy jobs for dev env here.
deploy_dev:
  <<: *deploy_template
  environment: dev
  resource_group: dev
  only:
    - main
  tags:
    - dev-env-runner

test_dev:
  <<: *test_template
  only:
    - main
  tags:
    - dev-env-runner
  needs:
    - deploy_dev
  variables:
    IDP_HOSTNAME: idp.dev.identitysandbox.gov
    IDP_ORIGIN_HOSTNAME: idp.origin.dev.identitysandbox.gov
    ENV_NAME: dev

badtest_dev:
  <<: *badtest_template
  tags:
    - dev-env-runner
  only:
    - main
  needs:
    - deploy_dev
