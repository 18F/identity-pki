# Jobs defined here use the ecr-public/docker/library/alpine docker image by
# default. To find other available images:
#   aws ecr describe-repositories | jq '.repositories[].repositoryUri'
#
# To use a publicly-available image via an ECR pull-through cache:
#   Locate the image at https://gallery.ecr.aws/ and note the path, e.g. docker/library/alpine
#   Prefix 'ecr-public/' to the path, e.g. ecr_path=ecr-public/docker/library/alpine
#   Add $ecr_path to terraform/ecr/tooling-prod/repos.yml and tf apply.
#   Use the image in your CI jobs as:
#     image: "${ECR_REGISTRY}/$ecr_path"
#
# To build an image from a Dockerfile:
#   Make up a name for your image's repo.
#   Add it to terraform/ecr/tooling-prod/repos.yml and tf apply.
#   Add the dockerfile to dockerfiles/
#   Build it by adding a job like so:
#     build_idp_ci:
#       <<: *build_template
#       variables:
#         dockerfile: idp_ci.Dockerfile
#         ecr_repo: idp/ci

stages:
  - build
  - test_gitlab
  - deploy
  - test

variables:
  CI_COMMIT_TAG: "$CI_COMMIT_SHA"
  ECR_REGISTRY: "$AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com"
  DEPLOY_IMAGE_DIGEST: "sha256:493095c8b49951c1421df77555896b0f55848c240adbbd82938075bb2ffb9b3a"
  TEST_IMAGE_DIGEST: "sha256:19f6b9521f7c94820aa5594ca1e979da27ba019c0fdf4ead84c2f047876083d8"

gitlab-qa:
  only:
    - main
  variables:
    GITHUB_ENDPOINT: "https://${EXTERNAL_FQDN}:443"
    GITLAB_ADMIN_PASSWORD: ${GITLAB_QA_PASSWORD}
    GITLAB_ADMIN_USERNAME: ${GITLAB_QA_ACCOUNT}
    GITLAB_API_BASE: "https://${EXTERNAL_FQDN}/api/v4"
    GITLAB_FORKER_PASSWORD: ${GITLAB_QA_PASSWORD}
    GITLAB_FORKER_USERNAME: ${GITLAB_QA_ACCOUNT}
    GITLAB_PASSWORD: ${GITLAB_QA_PASSWORD}
    GITLAB_QA_PASSWORD: ${GITLAB_QA_PASSWORD}
    GITLAB_QA_USERNAME_1: ${GITLAB_QA_ACCOUNT}
    GITLAB_USERNAME: ${GITLAB_QA_ACCOUNT}
    QA_DEBUG: "true"
  tags:
    - build-pool
  image:
    name: $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/gitlab-qa:latest
  stage: test_gitlab
  script:
    - echo "Yay!"
  when: manual

# TODO(LG-6069): Use an image from ECR
.build_template: &build_template
  stage: build
  tags:
    - build-pool
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  only:
    variables:
      - $dockerfile
      - $ecr_repo
  script:
    - mkdir -p /kaniko/.docker
    - |-
       KANIKOCFG="\"credsStore\":\"ecr-login\""
       if [ "x${http_proxy}" != "x" -o "x${https_proxy}" != "x" ]; then
         KANIKOCFG="${KANIKOCFG}, \"proxies\": { \"default\": { \"httpProxy\": \"${http_proxy}\", \"httpsProxy\": \"${https_proxy}\", \"noProxy\": \"${no_proxy}\"}}"
       fi
       KANIKOCFG="{ ${KANIKOCFG} }"
       echo "${KANIKOCFG}" > /kaniko/.docker/config.json
    - >-
      /kaniko/executor
      --context "${CI_PROJECT_DIR}"
      --dockerfile "${CI_PROJECT_DIR}/dockerfiles/${dockerfile}"
      --destination "${ECR_REGISTRY}/${ecr_repo}:latest"
      --destination "${ECR_REGISTRY}/${ecr_repo}:${CI_COMMIT_TAG}"
      --build-arg "http_proxy=${http_proxy}" --build-arg "https_proxy=${https_proxy}" --build-arg "no_proxy=${no_proxy}"

# Build images by providing a dockerfile (in dockerfiles/) and a destination ECR repo

build_env_deploy:
  <<: *build_template
  only:
    - main
  variables:
    dockerfile: env_deploy.Dockerfile
    ecr_repo: cd/env_deploy

build_env_test:
  <<: *build_template
  only:
    - main
  variables:
    dockerfile: env_test.Dockerfile
    ecr_repo: cd/env_test

build_idp_ci:
  <<: *build_template
  only:
    - main
  variables:
    dockerfile: idp_ci.Dockerfile
    ecr_repo: idp/ci

# deploy jobs for tspencer env here.
deploy_tspencer:
  environment: tspencer
  resource_group: tspencer
  only:
    - stages/tspencer
  variables:
    GIT_SUBMODULE_STRATEGY: normal
  tags:
    - tspencer-env-runner
  image:
    # these are hardcoded to make this deploy process more secure.
    # If you want to update this image, you will need to edit it here, and in
    # s3://login-gov.secrets.<account>-us-west-2/<env>/gitlab_env_runner_allowed_images,
    # or s3://login-gov.secrets.<account>-us-west-2/common/gitlab_env_runner_allowed_images.
    # If you are doing development work, you can override them for your env.
    name: $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/cd/env_deploy@$DEPLOY_IMAGE_DIGEST
  stage: deploy
  artifacts:
    name: "$CI_ENVIRONMENT_NAME-$CI_COMMIT_SHA"
    paths:
      - terraform.plan
      - plan.txt
    expire_in: 1 year
  script:
    - echo "Yay deploys!"

test_tspencer:
  only:
    - stages/tspencer
  variables:
    IDP_HOSTNAME: idp.tspencer.identitysandbox.gov
    ENV_NAME: tspencer
  tags:
    - tspencer-env-runner
  image:
    # these are hardcoded to make this deploy process more secure.
    # If you want to update this image, you will need to edit it here, and in
    # s3://login-gov.secrets.<account>-us-west-2/<env>/gitlab_env_runner_allowed_images,
    # or s3://login-gov.secrets.<account>-us-west-2/common/gitlab_env_runner_allowed_images.
    name: $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/cd/env_test@$TEST_IMAGE_DIGEST
  stage: test
  needs:
    - deploy_tspencer
  artifacts:
    reports:
      junit: testlogs/*.xml
  script:
    - echo "Yay tests!"

# deploy jobs for pauldoom env here.
deploy_pauldoom:
  environment: pauldoom
  resource_group: pauldoom
  only:
    - stages/pauldoom
  variables:
    GIT_SUBMODULE_STRATEGY: normal
  tags:
    - pauldoom-env-runner
  image:
    # these are hardcoded to make this deploy process more secure.
    # If you want to update this image, you will need to edit it here, and in
    # s3://login-gov.secrets.<account>-us-west-2/<env>/gitlab_env_runner_allowed_images,
    # or s3://login-gov.secrets.<account>-us-west-2/common/gitlab_env_runner_allowed_images.
    name: $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/cd/env_deploy@$DEPLOY_IMAGE_DIGEST
  stage: deploy
  artifacts:
    name: "$CI_ENVIRONMENT_NAME-$CI_COMMIT_SHA"
    paths:
      - terraform.plan
      - plan.txt
    expire_in: 1 year
  script:
    - echo "Somebody set us up the deploy"

test_pauldoom:
  only:
    - stages/pauldoom
  variables:
    IDP_HOSTNAME: idp.pauldoom.identitysandbox.gov
    ENV_NAME: pauldoom
  tags:
    - pauldoom-env-runner
  image:
    # these are hardcoded to make this deploy process more secure.
    # If you want to update this image, you will need to edit it here, and in
    # s3://login-gov.secrets.<account>-us-west-2/<env>/gitlab_env_runner_allowed_images,
    # or s3://login-gov.secrets.<account>-us-west-2/common/gitlab_env_runner_allowed_images.
    name: $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/cd/env_test@$TEST_IMAGE_DIGEST
  stage: test
  needs:
    - deploy_pauldoom
  artifacts:
    reports:
      junit: testlogs/*.xml
  script:
    - echo "Tests for great justice"
