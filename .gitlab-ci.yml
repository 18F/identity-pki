---
# Jobs defined here use the ecr-public/docker/library/alpine docker image by
# default. To find other available images:
#   aws ecr describe-repositories | jq '.repositories[].repositoryUri'
#
# To use a publicly-available image via an ECR pull-through cache:
#   Locate the image at https://gallery.ecr.aws/ and note the path, e.g. docker/library/alpine
#   Prefix 'ecr-public/' to the path, e.g. ecr_path=ecr-public/docker/library/alpine
#   Add $ecr_path to terraform/ecr/tooling-prod/repos.yml and tf apply.
#   Use the image in your CI jobs as:
#     image: "${ECR_REGISTRY}/$ecr_path"
#
# To build an image from a Dockerfile:
#   Make up a name for your image's repo.
#   Add it to terraform/ecr/tooling-prod/repos.yml and tf apply.
#   Add the dockerfile to dockerfiles/
#   Build it by adding a job like so:
#     build_idp_ci:
#       extends: .build_template
#       variables:
#         dockerfile: idp_ci.Dockerfile
#         ecr_repo: idp/ci

stages:
  - build
  - test
  - deploy
  - post_deploy
  - smoke_test
  - gitlabproduction_deploy

variables:
  CI_COMMIT_TAG: "$CI_COMMIT_SHA"
  ECR_REGISTRY: "$AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com"
  DEPLOY_IMAGE_DIGEST: "sha256:eb50e40ea23f539867dffd40a0c27f0daa04c5c4e90f5a8c2074f2037058644a"
  TEST_IMAGE_DIGEST: "sha256:0d3138704798b5aac3b3a461d12a6ca45a8466e699934d3e98a4247c22773b68"
  GITDEPLOY_IMAGE_DIGEST: "sha256:92a1f4c466f4a83a37b5434c969115c164f3ca02a48e0516ebf395af823c97fe"
  GITTEST_IMAGE_DIGEST: "sha256:9c92a4d06c4e88af3989df742cbc466054f6842855da4b71f8092204ff85ecdb"
  STOP_IMAGE_DIGEST: "sha256:0d9bd0ca8bf279593c190e84dbf93b5fb47080f8562447640ede187fe1315c1f"

# TODO(LG-6069): Use an image from ECR
.build_template:
  stage: build
  interruptible: true
  tags:
    - build-pool
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  rules:
    - if: $CI_SERVER_HOST == "gitlab.gitstaging.gitlab.login.gov"
      when: never
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    # Always run if it's on the main branch. This currently implies containers are
    # rebuilt after merges in identity-idp as well (which trigger this pipeline).
    - if: $CI_COMMIT_BRANCH == "main"
    # Otherwise, only build on PRs, not new branches ...
    - if: '$CI_PIPELINE_SOURCE != "merge_request_event" && $CI_PIPELINE_SOURCE != "external_pull_request_event"'
      when: never
    # Use 'changes:' in jobs that inherit this template to further restrict when the job runs
  script:
    - mkdir -p /kaniko/.docker
    - |-
      KANIKOCFG="\"credsStore\":\"ecr-login\""
      if [ "x${http_proxy}" != "x" -o "x${https_proxy}" != "x" ]; then
        KANIKOCFG="${KANIKOCFG}, \"proxies\": { \"default\": { \"httpProxy\": \"${http_proxy}\", \"httpsProxy\": \"${https_proxy}\", \"noProxy\": \"${no_proxy}\"}}"
      fi
      KANIKOCFG="{ ${KANIKOCFG} }"
      echo "${KANIKOCFG}" > /kaniko/.docker/config.json
    - >-
      /kaniko/executor
      --context "${CI_PROJECT_DIR}"
      --dockerfile "${CI_PROJECT_DIR}/dockerfiles/${dockerfile}"
      --destination "${ECR_REGISTRY}/${ecr_repo}:latest"
      --destination "${ECR_REGISTRY}/${ecr_repo}:${CI_COMMIT_TAG}"
      --build-arg "http_proxy=${http_proxy}" --build-arg "https_proxy=${https_proxy}" --build-arg "no_proxy=${no_proxy}"

# Build images by providing a dockerfile (in dockerfiles/) and a destination ECR repo

build_gitlab_deploy_container:
  extends: .build_template
  rules:
    - !reference [.build_template, rules]
    - changes:
        - dockerfiles/gitlab_deploy*
        - versions.tf
  variables:
    dockerfile: gitlab_deploy.Dockerfile
    ecr_repo: cd/gitlab_deploy

build_gitlab_test_container:
  extends: .build_template
  rules:
    - !reference [.build_template, rules]
    - changes:
        - dockerfiles/gitlab_test*
  variables:
    dockerfile: gitlab_test.Dockerfile
    ecr_repo: cd/gitlab_test

build_env_deploy_container:
  extends: .build_template
  rules:
    - !reference [.build_template, rules]
    - changes:
        - dockerfiles/env_deploy*
        - versions.tf
  variables:
    dockerfile: env_deploy.Dockerfile
    ecr_repo: cd/env_deploy

build_env_stop_container:
  extends: .build_template
  rules:
    - !reference [.build_template, rules]
    - changes:
        - dockerfiles/env_stop*
  variables:
    dockerfile: env_stop.Dockerfile
    ecr_repo: cd/env_stop

build_env_test_container:
  extends: .build_template
  rules:
    - !reference [.build_template, rules]
    - changes:
        - dockerfiles/env_test*
  variables:
    dockerfile: env_test.Dockerfile
    ecr_repo: cd/env_test

build_idp_ci_container:
  extends: .build_template
  rules:
    - !reference [.build_template, rules]
    - changes:
        - dockerfiles/idp_ci*
  variables:
    dockerfile: idp_ci.Dockerfile
    ecr_repo: idp/ci

# IDP environments and their jobs
env-tspencer:
  variables:
    ENV_NAME: tspencer
  stage: deploy
  rules:
    - if: $CI_SERVER_HOST != "gitlab.login.gov"
      when: never
    - if: $CI_COMMIT_BRANCH == "stages/tspencer"
  trigger:
    include: .gitlab-ci-idp-env-jobs-template.yml

env-pauldoom:
  variables:
    ENV_NAME: pauldoom
  stage: deploy
  rules:
    - if: $CI_SERVER_HOST != "gitlab.login.gov"
      when: never
    - if: $CI_COMMIT_BRANCH == "stages/pauldoom"
  trigger:
    include: .gitlab-ci-idp-env-jobs-template.yml

env-ursula:
  variables:
    ENV_NAME: ursula
  stage: deploy
  rules:
    - if: $CI_SERVER_HOST != "gitlab.login.gov"
      when: never
    - if: $CI_COMMIT_BRANCH == "stages/stable"
  trigger:
    include: .gitlab-ci-idp-env-jobs-template.yml

env-agnes:
  variables:
    ENV_NAME: agnes
  stage: deploy
  rules:
    - if: $CI_SERVER_HOST != "gitlab.login.gov"
      when: never
    - if: $CI_COMMIT_BRANCH == "main" && $CI_PIPELINE_SOURCE != "schedule"
  trigger:
    include: .gitlab-ci-idp-env-jobs-template.yml

env-joy:
  variables:
    ENV_NAME: joy
  stage: deploy
  rules:
    - if: $CI_SERVER_HOST != "gitlab.login.gov"
      when: never
    - if: $CI_COMMIT_BRANCH == "stages/joy"
  trigger:
    include: .gitlab-ci-idp-env-jobs-template.yml

env-dev:
  variables:
    ENV_NAME: dev
  stage: deploy
  rules:
    - if: $CI_SERVER_HOST != "gitlab.login.gov"
      when: never
    - if: $CI_COMMIT_BRANCH == "main" && $CI_PIPELINE_SOURCE != "schedule"
  trigger:
    include: .gitlab-ci-idp-env-jobs-template.yml

env-henrydrich:
  variables:
    ENV_NAME: henrydrich
  stage: deploy
  rules:
    - if: $CI_SERVER_HOST != "gitlab.login.gov"
      when: never
    - if: $CI_COMMIT_BRANCH == "stages/henrydrich"
  trigger:
    include: .gitlab-ci-idp-env-jobs-template.yml

env-akrito:
  variables:
    ENV_NAME: akrito
  stage: deploy
  rules:
    - if: $CI_SERVER_HOST != "gitlab.login.gov"
      when: never
    - if: $CI_COMMIT_BRANCH == "stages/akrito"
  trigger:
    include: .gitlab-ci-idp-env-jobs-template.yml

env-ryandbrown:
  variables:
    ENV_NAME: ryandbrown
  stage: deploy
  rules:
    - if: $CI_SERVER_HOST != "gitlab.login.gov"
      when: never
    - if: $CI_COMMIT_BRANCH == "stages/ryandbrown"
  trigger:
    include: .gitlab-ci-idp-env-jobs-template.yml

env-zmargolis:
  variables:
    ENV_NAME: zmargolis
  stage: deploy
  rules:
    - if: $CI_SERVER_HOST != "gitlab.login.gov"
      when: never
    - if: $CI_COMMIT_BRANCH == "stages/zmargolis"
  trigger:
    include: .gitlab-ci-idp-env-jobs-template.yml

env-jmdembe:
  variables:
    ENV_NAME: jmdembe
  stage: deploy
  rules:
    - if: $CI_SERVER_HOST != "gitlab.login.gov"
      when: never
    - if: $CI_COMMIT_BRANCH == "stages/stable"
  trigger:
    include: .gitlab-ci-idp-env-jobs-template.yml

env-orenyk:
  variables:
    ENV_NAME: orenyk
  stage: deploy
  rules:
    - if: $CI_SERVER_HOST != "gitlab.login.gov"
      when: never
    - if: $CI_COMMIT_BRANCH == "stages/stable"
  trigger:
    include: .gitlab-ci-idp-env-jobs-template.yml

env-solipet:
  variables:
    ENV_NAME: solipet
  stage: deploy
  rules:
    - if: $CI_SERVER_HOST != "gitlab.login.gov"
      when: never
    - if: $CI_COMMIT_BRANCH == "stages/stable"
  trigger:
    include: .gitlab-ci-idp-env-jobs-template.yml

# deploy job template for gitlab envs
.deploy_gitlab_template:
  tags:
    - $env-env-runner
  image:
    # these are hardcoded to make this deploy process more secure.
    # If you want to update this image, you will need to edit it here, and in
    # s3://login-gov.secrets.<account>-us-west-2/<env>/gitlab_env_runner_allowed_images,
    # or s3://login-gov.secrets.<account>-us-west-2/common/gitlab_env_runner_allowed_images.
    # If you are doing development work, you can override them for your env.
    name: $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/cd/gitlab_deploy@$GITDEPLOY_IMAGE_DIGEST
  stage: deploy
  artifacts:
    name: "$CI_ENVIRONMENT_NAME-$CI_COMMIT_SHA"
    paths:
      - terraform.plan
      - plan.txt
    expire_in: 1 year
    reports:
      terraform: plan.json
  script:
    - echo "Yay deploys!" ; exit 1

# test job template for gitlab envs
.test_gitlab_template:
  tags:
    - ${ENV_NAME}-env-runner
  image:
    # these are hardcoded to make this deploy process more secure.
    # If you want to update this image, you will need to edit it here, and in
    # s3://login-gov.secrets.<account>-us-west-2/<env>/gitlab_env_runner_allowed_images,
    # or s3://login-gov.secrets.<account>-us-west-2/common/gitlab_env_runner_allowed_images.
    name: $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/cd/gitlab_test@$GITTEST_IMAGE_DIGEST
  stage: smoke_test
  script:
    - echo "Somebody set us up the deploy" ; exit 1
  artifacts:
    reports:
      junit: testlogs/*.xml
    when: always

# deploy jobs for gitstaging env here.
deploy_gitstaging:
  extends: .deploy_gitlab_template
  environment:
    name: gitstaging
    url: https://gitlab.gitstaging.gitlab.login.gov/
    action: start
  resource_group: gitstaging
  variables:
    env: gitstaging
    url: https://gitlab.gitstaging.gitlab.login.gov/
    GIT_SUBMODULE_STRATEGY: normal
  rules:
    - if: $CI_SERVER_HOST != "gitlab.login.gov"
      when: never
    - if: $CI_COMMIT_BRANCH == "main" && $CI_PIPELINE_SOURCE == "push"

recycle_runner_gitstaging:
  extends: .deploy_gitlab_template
  environment:
    name: gitstaging
    url: https://gitlab.gitstaging.gitlab.login.gov/
    action: access
  resource_group: gitstaging
  variables:
    env: gitstaging
    url: https://gitlab.gitstaging.gitlab.login.gov/
    GIT_SUBMODULE_STRATEGY: normal
    RECYCLE_ENV_RUNNERS_ONLY: "true"
  stage: post_deploy
  allow_failure: true
  rules:
    - if: $CI_SERVER_HOST != "gitlab.login.gov"
      when: never
    - if: $CI_COMMIT_BRANCH == "main" && $CI_PIPELINE_SOURCE == "push"
  
test_gitstaging:
  extends: .test_gitlab_template
  environment:
    name: gitstaging
    url: https://gitlab.gitstaging.gitlab.login.gov/
    action: verify
  resource_group: gitstaging
  variables:
    ENV_NAME: gitstaging
    DOMAIN: gitlab.gitstaging.gitlab.login.gov
  rules:
    - if: $CI_SERVER_HOST != "gitlab.login.gov"
      when: never
    - if: $CI_COMMIT_BRANCH == "main" && $CI_PIPELINE_SOURCE == "push"

deploygitlabproduction_trigger:
  stage: gitlabproduction_deploy
  resource_group: gitlabproduction
  needs: 
    - job: test_gitstaging
      optional: true
  when: manual
  environment:
    name: gitlabproduction
    url: https://gitlab.login.gov/
  image:
    name: $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/ecr-public/docker/library/alpine
  script:
    - apk --no-cache add curl jq
    - curl --request POST --form token="$GITSTAGING_PIPELINE_TRIGGER_TOKEN" --form ref=main --form "variables[ENV_NAME]=production" "https://gitlab.gitstaging.gitlab.login.gov/api/v4/projects/$GITSTAGING_DEPLOY_PROJECT_ID/trigger/pipeline" > /tmp/curl.out
    - if [ "$(jq -r .status < /tmp/curl.out)" != "created" ] ; then echo "pipeline trigger failed" ; exit 1 ; fi
  rules:
    - if: $CI_SERVER_HOST != "gitlab.login.gov"
      when: never
    - if: $CI_COMMIT_BRANCH == "main" && $CI_PIPELINE_SOURCE == "push"

# deploy gitlab production env here.
# This only runs on gitstaging, and is triggered by the API call in deploygitlabproduction_trigger
deploy_production:
  environment:
    name: production
    url: https://gitlab.login.gov/
    action: start
  resource_group: production
  variables:
    env: production
    url: https://gitlab.login.gov/
    GIT_SUBMODULE_STRATEGY: normal
  tags:
    - production-env-runner
  image:
    name: $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/cd/gitlab_deploy@$GITDEPLOY_IMAGE_DIGEST
  stage: deploy
  artifacts:
    name: "$CI_ENVIRONMENT_NAME-$CI_COMMIT_SHA"
    paths:
      - terraform.plan
      - plan.txt
    expire_in: 5 year
    reports:
      terraform: plan.json
  script:
    - echo "Yay deploys!" ; exit 1
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - if: $CI_SERVER_HOST == "gitlab.gitstaging.gitlab.login.gov"

# test gitlab production env here.
# This only runs on gitstaging, and is triggered by the API call in deploygitlabproduction_trigger
test_production:
  environment:
    name: production
    url: https://gitlab.login.gov/
    action: verify
  resource_group: production
  variables:
    ENV_NAME: production
    DOMAIN: gitlab.login.gov
  tags:
    - production-env-runner
  image:
    name: $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/cd/gitlab_test@$GITTEST_IMAGE_DIGEST
  stage: smoke_test
  script:
    - echo "Somebody set us up the deploy" ; exit 1
  artifacts:
    reports:
      junit: testlogs/*.xml
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - if: $CI_SERVER_HOST == "gitlab.gitstaging.gitlab.login.gov"

deploy_charlie:
  extends: .deploy_gitlab_template
  environment:
    action: start
    name: charlie
    url: https://gitlab.charlie.gitlab.login.gov/
  resource_group: charlie
  variables:
    env: charlie
    url: https://gitlab.charlie.gitlab.identitysandbox.gov/
    GIT_SUBMODULE_STRATEGY: normal
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - if: $CI_SERVER_HOST != "gitlab.login.gov"
      when: never
    - if: $CI_COMMIT_BRANCH == "stages/gitlabcharlie"

test_charlie:
  extends: .test_gitlab_template
  environment:
    action: verify
    name: charlie
    url: https://gitlab.charlie.gitlab.login.gov/
  resource_group: charlie
  variables:
    ENV_NAME: charlie
    DOMAIN: gitlab.charlie.gitlab.login.gov
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - if: $CI_SERVER_HOST != "gitlab.login.gov"
      when: never
    - if: $CI_COMMIT_BRANCH == "stages/gitlabcharlie"

# deploy jobs for gitlabbravo env here.
deploy_bravo:
  # Allow failure so the pipeline continues with other envs
  allow_failure: true
  extends: .deploy_gitlab_template
  environment:
    name: bravo
    url: https://gitlab.identitysandbox.gov/
  resource_group: bravo
  variables:
    env: bravo
    url: https://gitlab.identitysandbox.gov/
    GIT_SUBMODULE_STRATEGY: normal
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - if: $CI_SERVER_HOST != "gitlab.login.gov"
      when: never
    - if: $CI_COMMIT_BRANCH == "stages/gitlabbravo"

recycle_runner_bravo:
  extends: .deploy_gitlab_template
  environment:
    name: bravo
    url: https://gitlab.identitysandbox.gov/
    action: access
  resource_group: bravo
  variables:
    env: bravo
    url: https://gitlab.identitysandbox.gov/
    GIT_SUBMODULE_STRATEGY: normal
    RECYCLE_ENV_RUNNERS_ONLY: "true"
  stage: post_deploy
  allow_failure: true
  rules:
    - if: $CI_SERVER_HOST != "gitlab.login.gov"
      when: never
    - if: $CI_COMMIT_BRANCH == "stages/gitlabbravo" && $CI_PIPELINE_SOURCE == "push"

test_bravo:
  # Allow failure so the pipeline continues with other envs
  allow_failure: true
  extends: .test_gitlab_template
  environment:
    name: bravo
    url: https://gitlab.identitysandbox.gov/
    action: verify
  variables:
    ENV_NAME: bravo
    DOMAIN: gitlab.identitysandbox.gov
  rules:
    - if: $CI_SERVER_HOST != "gitlab.login.gov"
      when: never
    - if: $CI_COMMIT_BRANCH == "stages/gitlabbravo" && $CI_PIPELINE_SOURCE == "push"

badtest_bravo:
  when: manual
  extends: .test_gitlab_template
  allow_failure: true
  environment:
    name: bravo
    url: https://gitlab.identitysandbox.gov/
    action: verify
  image:
    name: $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/ecr-public/docker/library/alpine
  rules:
    - if: $CI_SERVER_HOST != "gitlab.login.gov"
      when: never
    - if: $CI_COMMIT_BRANCH == "stages/gitlabbravo" && $CI_PIPELINE_SOURCE == "push"
  script:
    - echo "You have no chance to survive make your test." ; exit 1

deploy_alpha:
  extends: .deploy_gitlab_template
  environment:
    name: alpha
    url: https://gitlab.alpha.gitlab.login.gov/
  resource_group: alpha
  variables:
    env: alpha
    url: https://gitlab.alpha.gitlab.identitysandbox.gov
    GIT_SUBMODULE_STRATEGY: normal
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - if: $CI_COMMIT_BRANCH == "stages/gitlabalpha"

test_alpha:
  extends: .test_gitlab_template
  environment:
    name: alpha
    url: https://gitlab.alpha.gitlab.login.gov/
  resource_group: alpha
  variables:
    ENV_NAME: alpha
    DOMAIN: gitlab.alpha.gitlab.identitysandbox.gov
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - if: $CI_COMMIT_BRANCH == "stages/gitlabalpha"

include:
  - local: .gitlab-ci-rules.yml
  - local: kitchen/cookbooks/identity-gitlab/.gitlab-ci.yml
  - local: terraform/.gitlab-ci.yml
  - local: cloudlib/.gitlab-ci.yml
  - local: bin/users/.gitlab-ci.yml
  - template: Security/SAST-IaC.gitlab-ci.yml
  - template: Security/SAST.gitlab-ci.yml
  - template: Jobs/Dependency-Scanning.gitlab-ci.yml
