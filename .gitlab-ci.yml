---
# Jobs defined here use the ecr-public/docker/library/alpine docker image by
# default. To find other available images:
#   aws ecr describe-repositories | jq '.repositories[].repositoryUri'
#
# To use a publicly-available image via an ECR pull-through cache:
#   Locate the image at https://gallery.ecr.aws/ and note the path, e.g. docker/library/alpine
#   Prefix 'ecr-public/' to the path, e.g. ecr_path=ecr-public/docker/library/alpine
#   Add $ecr_path to terraform/ecr/tooling-prod/repos.yml and tf apply.
#   Use the image in your CI jobs as:
#     image: "${ECR_REGISTRY}/$ecr_path"
#
# To build an image from a Dockerfile:
#   Make up a name for your image's repo.
#   Add it to terraform/ecr/tooling-prod/repos.yml and tf apply.
#   Add the dockerfile to dockerfiles/
#   Build it by adding a job like so:
#     build_idp_ci:
#       extends: .build_template
#       variables:
#         dockerfile: idp_ci.Dockerfile
#         ecr_repo: idp/ci

stages:
  - build
  - test
  - deploy
  - post_deploy
  - smoke_test
  - gitlabproduction_deploy

variables:
  CI_COMMIT_TAG: "$CI_COMMIT_SHA"
  ECR_REGISTRY: "$AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com"
  DEPLOY_IMAGE_DIGEST: "sha256:29102c46705fe4dbacd0a1d32b01ac4b8e3aa80dcd5277bba8e664bec36ad736"
  STOP_IMAGE_DIGEST: "sha256:637dd5b75ea662f9881e44d7b085b26d44491f312ea7bd9d5584f4ecf6868dac"
  TEST_IMAGE_DIGEST: "sha256:f430d6f7f85bc630460fd3221331d7c7a43880c43780032814cf0bec2e0ad193"
  GITDEPLOY_IMAGE_DIGEST: "sha256:df7af6887feff7e590a90765831a800f322545b290770f703debfccb2a4da493"
  GITTEST_IMAGE_DIGEST: "sha256:d463d245e4952ecce3170e46651ba2fcb240cd40749d72fe93e706944cb85e70"
  CI_IMAGE_DIGEST: "sha256:d2bd829d74c7c61303a24a64d18469ffc2a8c0e6d7ad9d15407dc94a7bbdae01"
  TERRAFORM_APPLY_IMAGE_DIGEST: "sha256:cc5e31c3cb34d1d4fd16ffba7873391ba6c401a0c79772465eab84fc02e73d64"
  TERRAFORM_PLAN_IMAGE_DIGEST: "sha256:0578c7ff10a3045213639d82302c4c7fe7161bf3eae0008f34171b1f38e85348"


# TODO(LG-6069): Use an image from ECR
.build_template:
  stage: build
  interruptible: true
  tags:
    - build-pool
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  rules:
    - if: $CI_SERVER_HOST == "gitlab.gitstaging.gitlab.login.gov"
      when: never
    # Build when the daily pipeline runs, but not for other scheduled pipelines.
    - if: '$CI_PIPELINE_SOURCE == "schedule" && $CI_CRON_SCHEDULE == "daily"'
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
      when: never
    # Otherwise, only build on PRs, not new branches ...
    - if: '$CI_PIPELINE_SOURCE != "merge_request_event" && $CI_PIPELINE_SOURCE != "external_pull_request_event"'
      when: never
    # Use 'changes:' variable in jobs that inherit this template to further restrict when the job runs
    - changes:
      - $changes
      - versions.tf
  script:
    - mkdir -p /kaniko/.docker
    - |-
      KANIKOCFG="\"credsStore\":\"ecr-login\""
      if [ "x${http_proxy}" != "x" -o "x${https_proxy}" != "x" ]; then
        KANIKOCFG="${KANIKOCFG}, \"proxies\": { \"default\": { \"httpProxy\": \"${http_proxy}\", \"httpsProxy\": \"${https_proxy}\", \"noProxy\": \"${no_proxy}\"}}"
      fi
      KANIKOCFG="{ ${KANIKOCFG} }"
      echo "${KANIKOCFG}" > /kaniko/.docker/config.json
    - >-
      /kaniko/executor
      --context "${CI_PROJECT_DIR}"
      --dockerfile "${CI_PROJECT_DIR}/dockerfiles/${dockerfile}"
      --destination "${ECR_REGISTRY}/${ecr_repo}:latest"
      --destination "${ECR_REGISTRY}/${ecr_repo}:${CI_COMMIT_TAG}"
      --build-arg "http_proxy=${http_proxy}" --build-arg "https_proxy=${https_proxy}" --build-arg "no_proxy=${no_proxy}"

# Build images by providing a dockerfile (in dockerfiles/) and a destination ECR repo

build_gitlab_deploy_container:
  extends: .build_template
  variables:
    dockerfile: gitlab_deploy.Dockerfile
    ecr_repo: cd/gitlab_deploy
    changes: dockerfiles/gitlab_deploy*

build_gitlab_test_container:
  extends: .build_template
  variables:
    dockerfile: gitlab_test.Dockerfile
    ecr_repo: cd/gitlab_test
    changes: dockerfiles/gitlab_test*

build_env_deploy_container:
  extends: .build_template
  variables:
    dockerfile: env_deploy.Dockerfile
    ecr_repo: cd/env_deploy
    changes: dockerfiles/env_deploy*

build_env_stop_container:
  extends: .build_template
  variables:
    dockerfile: env_stop.Dockerfile
    ecr_repo: cd/env_stop
    changes: dockerfiles/env_stop*

build_env_test_container:
  extends: .build_template
  variables:
    dockerfile: env_test.Dockerfile
    ecr_repo: cd/env_test
    changes: dockerfiles/env_test*

build_idp_ci_container:
  extends: .build_template
  variables:
    dockerfile: idp_ci.Dockerfile
    ecr_repo: idp/ci
    changes: dockerfiles/idp_ci*

build_terraform_apply_container:
  extends: .build_template
  variables:
    dockerfile: terraform_apply.Dockerfile
    ecr_repo: cd/terraform_apply
    changes: dockerfiles/terraform_apply*

build_terraform_plan_container:
  extends: .build_template
  variables:
    dockerfile: terraform_plan.Dockerfile
    ecr_repo: cd/terraform_plan
    changes: dockerfiles/terraform_plan*

# IDP environments and their jobs
.include_idp_jobs_template:
  stage: deploy
  rules:
    - if: $CI_SERVER_HOST != "gitlab.login.gov"
      when: never
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - if: $CI_COMMIT_BRANCH == $branch
  trigger:
    include: .gitlab-ci-idp-env-jobs-template.yml

env-tspencer:
  extends: .include_idp_jobs_template
  variables:
    ENV_NAME: tspencer
    branch: "stages/tspencer"

env-pauldoom:
  extends: .include_idp_jobs_template
  variables:
    ENV_NAME: pauldoom
    branch: "stages/pauldoom"

env-ursula:
  extends: .include_idp_jobs_template
  variables:
    ENV_NAME: ursula
    branch: "stages/stable"

env-agnes:
  extends: .include_idp_jobs_template
  variables:
    ENV_NAME: agnes
    branch: "main"

env-joy:
  extends: .include_idp_jobs_template
  variables:
    ENV_NAME: joy
    branch: "stages/joy"

env-dev:
  extends: .include_idp_jobs_template
  variables:
    ENV_NAME: dev
    branch: "main"

env-henrydrich:
  extends: .include_idp_jobs_template
  variables:
    ENV_NAME: henrydrich
    branch: "stages/henrydrich"

env-akrito:
  extends: .include_idp_jobs_template
  variables:
    ENV_NAME: akrito
    branch: "stages/akrito"

env-ryandbrown:
  extends: .include_idp_jobs_template
  variables:
    ENV_NAME: ryandbrown
    branch: "stages/ryandbrown"

env-zmargolis:
  extends: .include_idp_jobs_template
  variables:
    ENV_NAME: zmargolis
    branch: "stages/zmargolis"

env-jmdembe:
  extends: .include_idp_jobs_template
  variables:
    ENV_NAME: jmdembe
    branch: "stages/stable"

env-solipet:
  extends: .include_idp_jobs_template
  variables:
    ENV_NAME: solipet
    branch: "stages/stable"

env-scanners:
  extends: .include_idp_jobs_template
  variables:
    ENV_NAME: scanners
    branch: "stages/stable"

# deploy job template for gitlab envs
.deploy_gitlab_template:
  environment:
    name: $env
    url: $url
    action: start
  resource_group: $env
  rules:
    - if: $CI_SERVER_HOST != "gitlab.login.gov"
      when: never
    - if: $CI_PIPELINE_SOURCE != "push"
      when: never
    - if: $CI_COMMIT_BRANCH == $branch
  tags:
    - $env-env-runner
  image:
    # these are hardcoded to make this deploy process more secure.
    # If you want to update this image, you will need to edit it here, and in
    # s3://login-gov.secrets.<account>-us-west-2/<env>/gitlab_env_runner_allowed_images,
    # or s3://login-gov.secrets.<account>-us-west-2/common/gitlab_env_runner_allowed_images.
    # If you are doing development work, you can override them for your env.
    name: $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/cd/gitlab_deploy@$GITDEPLOY_IMAGE_DIGEST
  stage: deploy
  variables:
    GIT_SUBMODULE_STRATEGY: normal
  artifacts:
    name: "$CI_ENVIRONMENT_NAME-$CI_COMMIT_SHA"
    paths:
      - terraform.plan
      - plan.txt
    expire_in: 1 year
    reports:
      terraform: plan.json
  script:
    - echo "Yay deploys!" ; exit 1

.recycle_runner_gitlab_template:
  extends: .deploy_gitlab_template
  environment:
    action: access
  variables:
    RECYCLE_ENV_RUNNERS_ONLY: "true"
  stage: post_deploy
  allow_failure: true

# test job template for gitlab envs
.test_gitlab_template:
  environment:
    name: $ENV_NAME
    url: $DOMAIN
    action: verify
  resource_group: $ENV_NAME
  rules:
    - if: $CI_SERVER_HOST != "gitlab.login.gov"
      when: never
    - if: $CI_PIPELINE_SOURCE != "push"
      when: never
    - if: $CI_COMMIT_BRANCH == $branch
  tags:
    - ${ENV_NAME}-env-runner
  image:
    # these are hardcoded to make this deploy process more secure.
    # If you want to update this image, you will need to edit it here, and in
    # s3://login-gov.secrets.<account>-us-west-2/<env>/gitlab_env_runner_allowed_images,
    # or s3://login-gov.secrets.<account>-us-west-2/common/gitlab_env_runner_allowed_images.
    name: $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/cd/gitlab_test@$GITTEST_IMAGE_DIGEST
  stage: smoke_test
  script:
    - echo "Somebody set us up the deploy" ; exit 1
  artifacts:
    reports:
      junit: testlogs/*.xml
    when: always

# deploy jobs for gitstaging env here.
deploy_gitstaging:
  extends: .deploy_gitlab_template
  variables:
    env: gitstaging
    url: https://gitlab.gitstaging.gitlab.login.gov/
    branch: main

recycle_runner_gitstaging:
  extends: .recycle_runner_gitlab_template
  variables:
    env: gitstaging
    url: https://gitlab.gitstaging.gitlab.login.gov/
    branch: main

.run_unallowed_image_template:
  image:
    name: $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/ecr-public/docker/library/alpine:latest
  environment:
    action: verify
    url: https://${DOMAIN}/
    name: ${ENV_NAME}
  tags:
    - ${ENV_NAME}-env-runner
  stage: smoke_test
  allow_failure: true
  script:
    - touch unallowed.txt
  artifacts:
    paths:
      - "*.txt"
  rules:
    - if: $CI_SERVER_HOST != "gitlab.login.gov"
      when: never
    - if: $CI_COMMIT_BRANCH == $TRIGGER_BRANCH && $CI_PIPELINE_SOURCE == "push"

run_unallowed_image_gitstaging:
  extends: .run_unallowed_image_template
  variables:
    ENV_NAME: gitstaging
    DOMAIN: gitlab.gitstaging.gitlab.login.gov
    TRIGGER_BRANCH: main

.test_unallowed_image_template:
  environment:
    action: verify
    url: https://${DOMAIN}/
    name: ${ENV_NAME}
  tags:
    - test-pool
  stage: smoke_test
  script:
    - test ! -f unallowed.txt
  rules:
    - if: $CI_SERVER_HOST != "gitlab.login.gov"
      when: never
    - if: $CI_COMMIT_BRANCH == $TRIGGER_BRANCH && $CI_PIPELINE_SOURCE == "push"

test_unallowed_image_gitstaging:
  extends: .test_unallowed_image_template
  variables:
    ENV_NAME: gitstaging
    DOMAIN: gitlab.gitstaging.gitlab.login.gov
    TRIGGER_BRANCH: main
  needs:
    - run_unallowed_image_gitstaging

test_gitstaging:
  extends: .test_gitlab_template
  variables:
    ENV_NAME: gitstaging
    DOMAIN: gitlab.gitstaging.gitlab.login.gov
    branch: main

deploygitlabproduction_trigger:
  stage: gitlabproduction_deploy
  resource_group: gitlabproduction
  needs:
    - job: test_gitstaging
      optional: true
  when: manual
  environment:
    name: gitlabproduction
    url: https://gitlab.login.gov/
  image:
    name: $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/ecr-public/docker/library/alpine
  script:
    - apk --no-cache add curl jq
    - curl --request POST --form token="$GITSTAGING_PIPELINE_TRIGGER_TOKEN" --form ref=main --form "variables[ENV_NAME]=production" "https://gitlab.gitstaging.gitlab.login.gov/api/v4/projects/$GITSTAGING_DEPLOY_PROJECT_ID/trigger/pipeline" > /tmp/curl.out
    - if [ "$(jq -r .status < /tmp/curl.out)" != "created" ] ; then echo "pipeline trigger failed" ; exit 1 ; fi
  rules:
    - if: $CI_SERVER_HOST != "gitlab.login.gov"
      when: never
    - if: $CI_COMMIT_BRANCH == "main" && $CI_PIPELINE_SOURCE == "push"

# deploy gitlab production env here.
# This only runs on gitstaging, and is triggered by the API call in deploygitlabproduction_trigger
deploy_production:
  extends: .deploy_gitlab_template
  variables:
    env: production
    url: https://gitlab.login.gov/
  # Override rules, since this will be run in a triggered pipeline only
  rules:
    - if: $CI_PIPELINE_SOURCE != "trigger"
      when: never
    - if: $CI_SERVER_HOST == "gitlab.gitstaging.gitlab.login.gov"

# recycle gitlab production env runner here.
# This only runs on gitstaging, and is triggered by the API call in deploygitlabproduction_trigger
recycle_runner_production:
  extends: .recycle_runner_gitlab_template
  variables:
    env: production
    url: https://gitlab.login.gov/
  # Override rules, since this will be run in a triggered pipeline only
  rules:
    - if: $CI_PIPELINE_SOURCE != "trigger"
      when: never
    - if: $CI_SERVER_HOST == "gitlab.gitstaging.gitlab.login.gov"

# test gitlab production env here.
# This only runs on gitstaging, and is triggered by the API call in deploygitlabproduction_trigger
test_production:
  extends: .test_gitlab_template
  variables:
    ENV_NAME: production
    DOMAIN: gitlab.login.gov
  # Override rules, since this will be run in a triggered pipeline only
  rules:
    - if: $CI_PIPELINE_SOURCE != "trigger"
      when: never
    - if: $CI_SERVER_HOST == "gitlab.gitstaging.gitlab.login.gov"

# deploy jobs for gitlabcharlie env here.
deploy_charlie:
  extends: .deploy_gitlab_template
  variables:
    env: charlie
    url: https://gitlab.charlie.gitlab.identitysandbox.gov/
    branch: "stages/gitlabcharlie"

test_charlie:
  extends: .test_gitlab_template
  variables:
    ENV_NAME: charlie
    DOMAIN: gitlab.charlie.gitlab.login.gov
    branch: "stages/gitlabcharlie"

# deploy jobs for gitlabbravo env here.
deploy_bravo:
  extends: .deploy_gitlab_template
  variables:
    env: bravo
    url: https://gitlab.identitysandbox.gov/
    branch: "stages/gitlabbravo"

recycle_runner_bravo:
  extends: .recycle_runner_gitlab_template
  variables:
    env: bravo
    url: https://gitlab.identitysandbox.gov/
    branch: "stages/gitlabbravo"

test_bravo:
  extends: .test_gitlab_template
  variables:
    ENV_NAME: bravo
    DOMAIN: gitlab.identitysandbox.gov
    branch: "stages/gitlabbravo"

run_unallowed_image_bravo:
  extends: .run_unallowed_image_template
  variables:
    ENV_NAME: bravo
    DOMAIN: gitlab.identitysandbox.gov
    TRIGGER_BRANCH: stages/gitlabbravo

test_unallowed_image_bravo:
  extends: .test_unallowed_image_template
  variables:
    ENV_NAME: bravo
    DOMAIN: gitlab.identitysandbox.gov
    TRIGGER_BRANCH: stages/gitlabbravo
  needs:
    - run_unallowed_image_bravo

# deploy jobs for gitlabalpha env here.
deploy_alpha:
  extends: .deploy_gitlab_template
  variables:
    env: alpha
    url: https://gitlab.alpha.gitlab.identitysandbox.gov
    branch: "stages/gitlabalpha"

test_alpha:
  extends: .test_gitlab_template
  variables:
    ENV_NAME: alpha
    DOMAIN: gitlab.alpha.gitlab.identitysandbox.gov
    branch: "stages/gitlabalpha"

recycle_runner_alpha:
  extends: .recycle_runner_gitlab_template
  variables:
    env: alpha
    url: https://gitlab.alpha.gitlab.identitysandbox.gov/
    branch: "stages/gitlabalpha"

run_unallowed_image_alpha:
  extends: .run_unallowed_image_template
  variables:
    ENV_NAME: alpha
    DOMAIN: gitlab.alpha.gitlab.login.gov
    TRIGGER_BRANCH: stages/gitlabalpha

test_unallowed_image_alpha:
  extends: .test_unallowed_image_template
  variables:
    ENV_NAME: alpha
    DOMAIN: gitlab.gitstaging.gitlab.login.gov
    TRIGGER_BRANCH: stages/gitlabalpha
  needs:
    - run_unallowed_image_alpha

include:
  - local: .gitlab-ci-rules.yml
  - local: gitlab-ci/terraform-jobs.yml
  - local: kitchen/cookbooks/identity-gitlab/.gitlab-ci.yml
  - local: terraform/.gitlab-ci.yml
  - local: cloudlib/.gitlab-ci.yml
  - local: bin/users/.gitlab-ci.yml
  - template: Security/SAST-IaC.gitlab-ci.yml
  - template: Security/SAST.gitlab-ci.yml
  - template: Jobs/Dependency-Scanning.gitlab-ci.yml
