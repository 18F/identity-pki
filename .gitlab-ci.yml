# Jobs defined here use the ecr-public/docker/library/alpine docker image by
# default. To find other available images:
#   aws ecr describe-repositories | jq '.repositories[].repositoryUri'
#
# To use a publicly-available image via an ECR pull-through cache:
#   Locate the image at https://gallery.ecr.aws/ and note the path, e.g. docker/library/alpine
#   Prefix 'ecr-public/' to the path, e.g. ecr_path=ecr-public/docker/library/alpine
#   Add $ecr_path to terraform/ecr/tooling-prod/repos.yml and tf apply.
#   Use the image in your CI jobs as:
#     image: "${ECR_REGISTRY}/$ecr_path"
#
# To build an image from a Dockerfile:
#   Make up a name for your image's repo.
#   Add it to terraform/ecr/tooling-prod/repos.yml and tf apply.
#   Add the dockerfile to dockerfiles/
#   Build it by adding a job like so:
#     build_idp_ci:
#       <<: *build_template
#       variables:
#         dockerfile: idp_ci.Dockerfile
#         ecr_repo: idp/ci

variables:
  CI_COMMIT_TAG: "latest"
  ECR_REGISTRY: "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com"
  GITHUB_ENDPOINT: "https://${EXTERNAL_FQDN}:443"
  GITLAB_ADMIN_PASSWORD: ${GITLAB_QA_PASSWORD}
  GITLAB_ADMIN_USERNAME: ${GITLAB_QA_ACCOUNT}
  GITLAB_API_BASE: "https://${EXTERNAL_FQDN}/api/v4"
  GITLAB_FORKER_PASSWORD: ${GITLAB_QA_PASSWORD}
  GITLAB_FORKER_USERNAME: ${GITLAB_QA_ACCOUNT}
  GITLAB_PASSWORD: ${GITLAB_QA_PASSWORD}
  GITLAB_QA_PASSWORD: ${GITLAB_QA_PASSWORD}
  GITLAB_QA_USERNAME_1: ${GITLAB_QA_ACCOUNT}
  GITLAB_USERNAME: ${GITLAB_QA_ACCOUNT}
  QA_DEBUG: "true"

gitlab-qa:
  tags:
    - build-pool
  image:
    name: 034795980528.dkr.ecr.us-west-2.amazonaws.com/gitlab-qa:latest
  stage: build
  script:
    - echo "Yay!"
  when: manual

# TODO(LG-6069): Use an image from ECR
.build_template: &build_template
  tags:
    - build-pool
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  only:
    variables:
      - $dockerfile
      - $ecr_repo
  script:
    - mkdir -p /kaniko/.docker
    - |-
       KANIKOCFG="\"credsStore\":\"ecr-login\""
       if [ "x${http_proxy}" != "x" -o "x${https_proxy}" != "x" ]; then
         KANIKOCFG="${KANIKOCFG}, \"proxies\": { \"default\": { \"httpProxy\": \"${http_proxy}\", \"httpsProxy\": \"${https_proxy}\", \"noProxy\": \"${no_proxy}\"}}"
       fi
       KANIKOCFG="{ ${KANIKOCFG} }"
       echo "${KANIKOCFG}" > /kaniko/.docker/config.json
    - >-
      /kaniko/executor
      --context "${CI_PROJECT_DIR}"
      --dockerfile "${CI_PROJECT_DIR}/dockerfiles/${dockerfile}"
      --destination "${ECR_REGISTRY}/${ecr_repo}:${CI_COMMIT_TAG}"
      --build-arg "http_proxy=${http_proxy}" --build-arg "https_proxy=${https_proxy}" --build-arg "no_proxy=${no_proxy}"

# Build images by providing a dockerfile (in dockerfiles/) and a destination ECR repo

build_idp_ci:
  <<: *build_template
  variables:
    dockerfile: idp_ci.Dockerfile
    ecr_repo: idp/ci
