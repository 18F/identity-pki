---
# Jobs defined here use the ecr-public/docker/library/alpine docker image by
# default. To find other available images:
#   aws ecr describe-repositories | jq '.repositories[].repositoryUri'
#
# To use a publicly-available image via an ECR pull-through cache:
#   Locate the image at https://gallery.ecr.aws/ and note the path, e.g. docker/library/alpine
#   Prefix 'ecr-public/' to the path, e.g. ecr_path=ecr-public/docker/library/alpine
#   Add $ecr_path to terraform/ecr/tooling-prod/repos.yml and tf apply.
#   Use the image in your CI jobs as:
#     image: "${ECR_REGISTRY}/$ecr_path"
#
# To build an image from a Dockerfile:
#   Make up a name for your image's repo.
#   Add it to terraform/ecr/tooling-prod/repos.yml and tf apply.
#   Add the dockerfile to dockerfiles/
#   Build it by adding a job like so:
#     build_idp_ci:
#       extends: .build_template
#       variables:
#         dockerfile: idp_ci.Dockerfile
#         ecr_repo: idp/ci

stages:
  - build
  - test
  - deploy
  - post_deploy

variables:
  CI_COMMIT_TAG: "$CI_COMMIT_SHA"
  ECR_REGISTRY: "$AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com"
  DEPLOY_IMAGE_DIGEST: "sha256:d947a858d2eb2ecc21108839319dd2085cc0442873e99d7d258cfb3909b9f496"
  TEST_IMAGE_DIGEST: "sha256:4f08ebe20d31b7001969b56dc14473e29466f6e4e754ff414626b301ae89d9c6"
  GITDEPLOY_IMAGE_DIGEST: "sha256:5cbb0d207db1f1a4267ae4255f901794c6847ca6d13723bd43eee3e80726bf5e"
  GITTEST_IMAGE_DIGEST: "sha256:9c92a4d06c4e88af3989df742cbc466054f6842855da4b71f8092204ff85ecdb"
  STOP_IMAGE_DIGEST: "sha256:0d9bd0ca8bf279593c190e84dbf93b5fb47080f8562447640ede187fe1315c1f"

# Always runs on merge requests, so the pipeline has at least one job. https://gitlab.com/gitlab-org/gitlab/-/issues/220260
no-op:
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_PIPELINE_SOURCE == "external_pull_request_event"
  script:
    - "true"

# Always show environment vars, to aid in developing and debugging pipelines.
# Unlike the "no-op" job, this may be removed with no ill effects.
show-env:
  script:
    - env

build-gitlab-qa:
  rules:
    - if: $CI_PIPELINE_SOURCE != "schedule"
  variables:
    CI_COMMIT_TAG: v15.3.3-ee
    ECR_REGISTRY: $AWS_ACCOUNT_ID.dkr.ecr.us-west-2.amazonaws.com
    IMAGE_NAME: gitlab-qa
  tags:
    - build-pool
  stage: build
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  script:
    - git clone https://gitlab.com/gitlab-org/gitlab.git
    - git checkout $CI_COMMIT_TAG
    - cd gitlab
    - mkdir -p /kaniko/.docker
    - |-
       KANIKOCFG="\"credsStore\":\"ecr-login\""
       if [ "x${http_proxy}" != "x" -o "x${https_proxy}" != "x" ]; then
         KANIKOCFG="${KANIKOCFG}, \"proxies\": { \"default\": { \"httpProxy\": \"${http_proxy}\", \"httpsProxy\": \"${https_proxy}\", \"noProxy\": \"${no_proxy}\"}}"
       fi
       KANIKOCFG="{ ${KANIKOCFG} }"
       echo "${KANIKOCFG}" > /kaniko/.docker/config.json
    - >-
      /kaniko/executor
      --context "./"
      --dockerfile "./qa/Dockerfile"
      --destination "${ECR_REGISTRY}/${ecr_repo}:latest"
      --destination "${ECR_REGISTRY}/${ecr_repo}:${CI_COMMIT_TAG}"
      --build-arg "http_proxy=${http_proxy}" --build-arg "https_proxy=${https_proxy}" --build-arg "no_proxy=${no_proxy}"
  when: manual

run-gitlab-qa:
  rules:
    - if: $CI_PIPELINE_SOURCE != "schedule"
  variables:
    GITHUB_ENDPOINT: "https://$EXTERNAL_FQDN"
    GITLAB_ADMIN_PASSWORD: $GITLAB_QA_PASSWORD
    GITLAB_ADMIN_USERNAME: $GITLAB_QA_ACCOUNT
    GITLAB_PASSWORD: $GITLAB_QA_PASSWORD
    GITLAB_USERNAME: $GITLAB_QA_ACCOUNT
    QA_CAN_TEST_PRAEFECT: "false"
    QA_DEBUG: "true"
  tags:
    - test-pool
  image:
    name: "$AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/gitlab-qa:latest"
  stage: test
  script:
    - "bin/test Test::Instance::Smoke https://$EXTERNAL_FQDN --"
    - exit 1
  when: manual

# TODO(LG-6069): Use an image from ECR
.build_template:
  stage: build
  interruptible: true
  tags:
    - build-pool
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  script:
    - mkdir -p /kaniko/.docker
    - |-
       KANIKOCFG="\"credsStore\":\"ecr-login\""
       if [ "x${http_proxy}" != "x" -o "x${https_proxy}" != "x" ]; then
         KANIKOCFG="${KANIKOCFG}, \"proxies\": { \"default\": { \"httpProxy\": \"${http_proxy}\", \"httpsProxy\": \"${https_proxy}\", \"noProxy\": \"${no_proxy}\"}}"
       fi
       KANIKOCFG="{ ${KANIKOCFG} }"
       echo "${KANIKOCFG}" > /kaniko/.docker/config.json
    - >-
      /kaniko/executor
      --context "${CI_PROJECT_DIR}"
      --dockerfile "${CI_PROJECT_DIR}/dockerfiles/${dockerfile}"
      --destination "${ECR_REGISTRY}/${ecr_repo}:latest"
      --destination "${ECR_REGISTRY}/${ecr_repo}:${CI_COMMIT_TAG}"
      --build-arg "http_proxy=${http_proxy}" --build-arg "https_proxy=${https_proxy}" --build-arg "no_proxy=${no_proxy}"

# Build images by providing a dockerfile (in dockerfiles/) and a destination ECR repo

build_gitlab_deploy_container:
  extends: .build_template
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    # Always run if it's on the main branch.
    - if: $CI_COMMIT_BRANCH == "main"
    # Otherwise, only build on PRs, not new branches ...
    - !reference [.merge_request, rules]
    # ... and only if there are changes in these files
    - changes:
        - dockerfiles/gitlab_deploy*
        - versions.tf
  variables:
    dockerfile: gitlab_deploy.Dockerfile
    ecr_repo: cd/gitlab_deploy

build_gitlab_test_container:
  extends: .build_template
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    # Always run if it's on the main branch.
    - if: $CI_COMMIT_BRANCH == "main"
    # Otherwise, only build on PRs, not new branches ...
    - !reference [.merge_request, rules]
    # ... and only if there are changes in these files
    - changes:
        - dockerfiles/gitlab_test*
  variables:
    dockerfile: gitlab_test.Dockerfile
    ecr_repo: cd/gitlab_test

build_env_deploy_container:
  extends: .build_template
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    # Always run if it's on the main branch.
    - if: $CI_COMMIT_BRANCH == "main"
    # Otherwise, only build on PRs, not new branches ...
    - !reference [.merge_request, rules]
    # ... and only if there are changes in these files
    - changes:
        - dockerfiles/env_deploy*
        - versions.tf
  variables:
    dockerfile: env_deploy.Dockerfile
    ecr_repo: cd/env_deploy

build_env_stop_container:
  extends: .build_template
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    # Always run if it's on the main branch.
    - if: $CI_COMMIT_BRANCH == "main"
    # Otherwise, only build on PRs, not new branches ...
    - !reference [.merge_request, rules]
    # ... and only if there are changes in these files
    - changes:
        - dockerfiles/env_stop*
  variables:
    dockerfile: env_stop.Dockerfile
    ecr_repo: cd/env_stop

build_env_test_container:
  extends: .build_template
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    # Always run if it's on the main branch.
    - if: $CI_COMMIT_BRANCH == "main"
    # Otherwise, only build on PRs, not new branches ...
    - !reference [.merge_request, rules]
    # ... and only if there are changes in these files
    - changes:
        - dockerfiles/env_test*
  variables:
    dockerfile: env_test.Dockerfile
    ecr_repo: cd/env_test

build_idp_ci_container:
  extends: .build_template
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    # Always run if it's on the main branch.
    - if: $CI_COMMIT_BRANCH == "main"
    # Otherwise, only build on PRs, not new branches ...
    - !reference [.merge_request, rules]
    # ... and only if there are changes in these files
    - changes:
        - dockerfiles/idp_ci*
  variables:
    dockerfile: idp_ci.Dockerfile
    ecr_repo: idp/ci

# templates for idp env deploys
# templates for idp env deploys

.post_deploy_template:
  variables:
    GIT_SUBMODULE_STRATEGY: normal
  image:
    # these are hardcoded to make this deploy process more secure.
    # If you want to update this image, you will need to edit it here, and in
    # s3://login-gov.secrets.<account>-us-west-2/<env>/gitlab_env_runner_allowed_images,
    # or s3://login-gov.secrets.<account>-us-west-2/common/gitlab_env_runner_allowed_images.
    # If you are doing development work, you can override them for your env.
    name: $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/cd/env_deploy@$DEPLOY_IMAGE_DIGEST
  stage: post_deploy
  script:
    - echo "Somebody set us up the deploy" ; exit 1

.deploy_template:
  variables:
    GIT_SUBMODULE_STRATEGY: normal
  image:
    # these are hardcoded to make this deploy process more secure.
    # If you want to update this image, you will need to edit it here, and in
    # s3://login-gov.secrets.<account>-us-west-2/<env>/gitlab_env_runner_allowed_images,
    # or s3://login-gov.secrets.<account>-us-west-2/common/gitlab_env_runner_allowed_images.
    # If you are doing development work, you can override them for your env.
    name: $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/cd/env_deploy@$DEPLOY_IMAGE_DIGEST
  stage: deploy
  artifacts:
    name: "$CI_ENVIRONMENT_NAME-$CI_COMMIT_SHA"
    paths:
      - terraform.plan
      - plan.txt
    expire_in: 1 year
    reports:
      terraform: plan.json
  script:
    - echo "Somebody set us up the deploy" ; exit 1 

.test_template:
  image:
    # these are hardcoded to make this deploy process more secure.
    # If you want to update this image, you will need to edit it here, and in
    # s3://login-gov.secrets.<account>-us-west-2/<env>/gitlab_env_runner_allowed_images,
    # or s3://login-gov.secrets.<account>-us-west-2/common/gitlab_env_runner_allowed_images.
    name: $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/cd/env_test@$TEST_IMAGE_DIGEST
  stage: test
  artifacts:
    paths:
      - gl-sast-report.json
      - report.xml
    reports:
      sast: gl-sast-report.json
      junit: report.xml
    when: always
  script:
    - echo "Tests for great justice" ; exit 1

.stop_template:
  when: manual
  stage: deploy
  variables:
    GIT_SUBMODULE_STRATEGY: normal
  image:
    name: $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/cd/env_stop@$STOP_IMAGE_DIGEST
  script:
    - echo "Main screen turn off." ; exit 1

# deploy jobs for tspencer env here.
deploy_tspencer:
  extends: .deploy_template
  environment:
    name: tspencer
    on_stop: stop_tspencer
    url: https://idp.tspencer.identitysandbox.gov/
  resource_group: tspencer
  tags:
    - tspencer-env-runner
  rules:
    - if: $CI_SERVER_HOST != "gitlab.gitstaging.gitlab.login.gov"
      when: never
    - if: $CI_COMMIT_BRANCH == "stages/tspencer"

post_deploy_tspencer:
  extends: .post_deploy_template
  environment:
    name: tspencer
  allow_failure: true
  variables:
    RECYCLE_ENV_RUNNERS_ONLY: "true"
  resource_group: tspencer
  tags:
    - tspencer-env-runner
  rules:
    - if: $CI_SERVER_HOST != "gitlab.gitstaging.gitlab.login.gov"
      when: never
    - if: $CI_COMMIT_BRANCH == "stages/tspencer"

test_tspencer:
  extends: .test_template
  only:
    - stages/tspencer
  tags:
    - tspencer-env-runner
  variables:
    IDP_HOSTNAME: idp.tspencer.identitysandbox.gov
    IDP_ORIGIN_HOSTNAME: idp.origin.tspencer.identitysandbox.gov
    ENV_NAME: tspencer

stop_tspencer:
  extends: .stop_template
  only:
    - stages/tspencer
  tags:
    - tspencer-env-runner
  resource_group: tspencer
  environment:
    name: tspencer
    action: stop

# deploy jobs for pauldoom env here.
deploy_pauldoom:
  extends: .deploy_template
  environment:
    name: pauldoom
    url: https://idp.pauldoom.identitysandbox.gov/
    on_stop: stop_pauldoom
  resource_group: pauldoom
  tags:
    - pauldoom-env-runner
  rules:
    - if: $CI_SERVER_HOST != "gitlab.gitstaging.gitlab.login.gov"
      when: never
    - if: $CI_COMMIT_BRANCH == "stages/pauldoom"


post_deploy_pauldoom:
  extends: .post_deploy_template
  environment:
    name: pauldoom
  allow_failure: true
  variables:
    RECYCLE_ENV_RUNNERS_ONLY: "true"
  resource_group: pauldoom
  tags:
    - pauldoom-env-runner
  rules:
    - if: $CI_SERVER_HOST != "gitlab.gitstaging.gitlab.login.gov"
      when: never
    - if: $CI_COMMIT_BRANCH == "stages/pauldoom"

test_pauldoom:
  extends: .test_template
  only:
    - stages/pauldoom
  tags:
    - pauldoom-env-runner
  variables:
    IDP_HOSTNAME: idp.pauldoom.identitysandbox.gov
    IDP_ORIGIN_HOSTNAME: idp.origin.pauldoom.identitysandbox.gov
    ENV_NAME: pauldoom

stop_pauldoom:
  extends: .stop_template
  only:
    - stages/pauldoom
  tags:
    - pauldoom-env-runner
  resource_group: pauldoom
  environment:
    name: pauldoom
    action: stop

# deploy jobs for ursula env here.
deploy_ursula:
  extends: .deploy_template
  environment:
    name: ursula
    url: https://idp.ursula.identitysandbox.gov/
    on_stop: stop_ursula
  resource_group: ursula
  tags:
    - ursula-env-runner
  rules:
    - if: $CI_SERVER_HOST != "gitlab.gitstaging.gitlab.login.gov"
      when: never
    - if: $CI_COMMIT_BRANCH == "main"


post_deploy_ursula:
  extends: .post_deploy_template
  environment:
    name: ursula
  allow_failure: true
  variables:
    RECYCLE_ENV_RUNNERS_ONLY: "true"
  resource_group: ursula
  tags:
    - ursula-env-runner
  rules:
    - if: $CI_SERVER_HOST != "gitlab.gitstaging.gitlab.login.gov"
      when: never
    - if: $CI_COMMIT_BRANCH == "main"

test_ursula:
  extends: .test_template
  only:
    - main
  tags:
    - ursula-env-runner
  variables:
    IDP_HOSTNAME: idp.ursula.identitysandbox.gov
    IDP_ORIGIN_HOSTNAME: idp.origin.ursula.identitysandbox.gov
    ENV_NAME: ursula

stop_ursula:
  extends: .stop_template
  only:
    - main
  tags:
    - ursula-env-runner
  resource_group: ursula
  environment:
    name: ursula
    action: stop

# deploy jobs for joy env here.
deploy_joy:
  extends: .deploy_template
  environment:
    name: joy
    url: https://idp.joy.identitysandbox.gov/
    on_stop: stop_joy
  resource_group: joy
  tags:
    - joy-env-runner
  rules:
    - if: $CI_SERVER_HOST != "gitlab.gitstaging.gitlab.login.gov"
      when: never
    - if: $CI_COMMIT_BRANCH == "main"


post_deploy_joy:
  extends: .post_deploy_template
  environment:
    name: joy
  allow_failure: true
  variables:
    RECYCLE_ENV_RUNNERS_ONLY: "true"
  resource_group: joy
  tags:
    - joy-env-runner
  rules:
    - if: $CI_SERVER_HOST != "gitlab.gitstaging.gitlab.login.gov"
      when: never
    - if: $CI_COMMIT_BRANCH == "main"

test_joy:
  extends: .test_template
  only:
    - stages/joy
  tags:
    - joy-env-runner
  variables:
    IDP_HOSTNAME: idp.joy.identitysandbox.gov
    IDP_ORIGIN_HOSTNAME: idp.origin.joy.identitysandbox.gov
    ENV_NAME: joy

stop_joy:
  extends: .stop_template
  only:
    - stages/joy
  tags:
    - joy-env-runner
  resource_group: joy
  environment:
    name: joy
    action: stop

# deploy job template for gitlab envs
.deploy_gitlab_template:
  tags:
    - $env-env-runner
  image:
    # these are hardcoded to make this deploy process more secure.
    # If you want to update this image, you will need to edit it here, and in
    # s3://login-gov.secrets.<account>-us-west-2/<env>/gitlab_env_runner_allowed_images,
    # or s3://login-gov.secrets.<account>-us-west-2/common/gitlab_env_runner_allowed_images.
    # If you are doing development work, you can override them for your env.
    name: $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/cd/gitlab_deploy@$GITDEPLOY_IMAGE_DIGEST
  stage: deploy
  artifacts:
    name: "$CI_ENVIRONMENT_NAME-$CI_COMMIT_SHA"
    paths:
      - terraform.plan
      - plan.txt
    expire_in: 1 year
    reports:
      terraform: plan.json
  script:
    - echo "Yay deploys!" ; exit 1

# test job template for gitlab envs
.test_gitlab_template:
  tags:
    - ${ENV_NAME}-env-runner
  image:
    # these are hardcoded to make this deploy process more secure.
    # If you want to update this image, you will need to edit it here, and in
    # s3://login-gov.secrets.<account>-us-west-2/<env>/gitlab_env_runner_allowed_images,
    # or s3://login-gov.secrets.<account>-us-west-2/common/gitlab_env_runner_allowed_images.
    name: $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/cd/gitlab_test@$GITTEST_IMAGE_DIGEST
  stage: test
  script:
    - echo "Somebody set us up the deploy" ; exit 1
  artifacts:
    paths:
      - gl-sast-report.json
      - report.xml
    reports:
      sast: gl-sast-report.json
      junit: report.xml
    when: always

# deploy jobs for gitstaging env here.
deploy_gitstaging:
  extends: .deploy_gitlab_template
  environment:
    name: gitstaging
    url: https://gitlab.gitstaging.gitlab.login.gov/
  resource_group: gitstaging
  variables:
    env: gitstaging
    url: https://gitlab.gitstaging.gitlab.login.gov/
    GIT_SUBMODULE_STRATEGY: normal
  rules:
    - if: $CI_SERVER_HOST != "gitlab.gitstaging.gitlab.login.gov"
      when: never
    - if: $CI_COMMIT_BRANCH == "stages/gitstaging"

test_gitstaging:
  extends: .test_gitlab_template
  environment:
    name: gitstaging
    url: https://gitlab.gitstaging.gitlab.login.gov/
  resource_group: gitstaging
  variables:
    ENV_NAME: gitstaging
    DOMAIN: gitlab.gitstaging.gitlab.login.gov
  rules:
    - if: $CI_SERVER_HOST != "gitlab.gitstaging.gitlab.login.gov"
      when: never
    - if: $CI_COMMIT_BRANCH == "stages/gitstaging"

# deploy jobs for dev env here.
deploy_dev:
  extends: .deploy_template
  environment:
    name: dev
    url: https://idp.dev.identitysandbox.gov/
  resource_group: dev
  tags:
    - dev-env-runner
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - if: $CI_SERVER_HOST != "gitlab.gitstaging.gitlab.login.gov"
      when: never
    - if: $CI_COMMIT_BRANCH == "main"

test_dev:
  extends: .test_template
  tags:
    - dev-env-runner
  variables:
    IDP_HOSTNAME: idp.dev.identitysandbox.gov
    IDP_ORIGIN_HOSTNAME: idp.origin.dev.identitysandbox.gov
    ENV_NAME: dev
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - if: $CI_COMMIT_BRANCH == "main"

deploy_charlie:
  extends: .deploy_gitlab_template
  environment:
    action: start
    name: charlie
    url: https://gitlab.charlie.gitlab.login.gov/
  resource_group: charlie
  variables:
    env: charlie
    url: https://gitlab.charlie.gitlab.identitysandbox.gov/
    GIT_SUBMODULE_STRATEGY: normal
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - if: $CI_SERVER_HOST != "gitlab.gitstaging.gitlab.login.gov"
      when: never
    - if: $CI_COMMIT_BRANCH == "stages/gitlabcharlie"

test_charlie:
  extends: .test_gitlab_template
  environment:
    action: verify
    name: charlie
    url: https://gitlab.charlie.gitlab.login.gov/
  resource_group: charlie
  variables:
    ENV_NAME: charlie
    DOMAIN: gitlab.charlie.gitlab.login.gov
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - if: $CI_SERVER_HOST != "gitlab.gitstaging.gitlab.login.gov"
      when: never
    - if: $CI_COMMIT_BRANCH == "stages/gitlabcharlie"

# deploy jobs for gitlabbravo env here.
deploy_bravo:
  extends: .deploy_gitlab_template
  environment:
    name: bravo
    url: https://gitlab.bravo.gitlab.login.gov/
  resource_group: bravo
  variables:
    env: bravo
    url: https://gitlab.bravo.gitlab.login.gov/
    GIT_SUBMODULE_STRATEGY: normal
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - if: $CI_SERVER_HOST != "gitlab.gitstaging.gitlab.login.gov"
      when: never
    - if: $CI_COMMIT_BRANCH == "main"

test_bravo:
  extends: .test_gitlab_template
  environment:
    name: bravo
    url: https://gitlab.bravo.gitlab.login.gov/
  resource_group: bravo
  variables:
    ENV_NAME: bravo
    DOMAIN: gitlab.bravo.gitlab.identitysandbox.gov
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - if: $CI_SERVER_HOST != "gitlab.gitstaging.gitlab.login.gov"
      when: never
    - if: $CI_COMMIT_BRANCH == "main"

deploy_alpha:
  extends: .deploy_gitlab_template
  environment:
    name: alpha
    url: https://gitlab.alpha.gitlab.login.gov/
  resource_group: alpha
  variables:
    env: alpha
    url: https://gitlab.alpha.gitlab.identitysandbox.gov
    GIT_SUBMODULE_STRATEGY: normal
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - if: $CI_COMMIT_BRANCH == "stages/gitlabalpha"

test_alpha:
  extends: .test_gitlab_template
  environment:
    name: alpha
    url: https://gitlab.alpha.gitlab.login.gov/
  resource_group: alpha
  variables:
    ENV_NAME: alpha
    DOMAIN: gitlab.alpha.gitlab.identitysandbox.gov
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - if: $CI_COMMIT_BRANCH == "stages/gitlabalpha"

# deploy jobs for henrydrich env here.
deploy_henrydrich:
  extends: .deploy_template
  environment: henrydrich
  resource_group: henrydrich
  tags:
    - henrydrich-env-runner
  only:
    - stages/henrydrich

post_deploy_henrydrich:
  extends: .post_deploy_template
  environment:
    name: henrydrich
  allow_failure: true
  variables:
    RECYCLE_ENV_RUNNERS_ONLY: "true"
  resource_group: henrydrich
  tags:
    - henrydrich-env-runner
  only:
    - stages/henrydrich

test_henrydrich:
  extends: .test_template
  only:
    - stages/henrydrich
  tags:
    - henrydrich-env-runner
  variables:
    IDP_HOSTNAME: idp.henrydrich.identitysandbox.gov
    IDP_ORIGIN_HOSTNAME: idp.origin.henrydrich.identitysandbox.gov
    ENV_NAME: henrydrich

stop_henrydrich:
  extends: .stop_template
  only:
    - stages/henrydrich
  tags:
    - henrydrich-env-runner
  resource_group: henrydrich
  environment:
    name: henrydrich
    action: stop

ping_cloudwatch:
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
  variables:
    S3: "s3://login-gov.secrets.${AWS_ACCOUNT_ID}-${AWS_REGION}/${MY_ENV}"
  script:
    - apk add aws-cli
    - NAMESPACE=$(aws s3 cp $S3/gitlab_metric_namespace -)
    - METRIC=$(aws s3 cp $S3/gitlab_ci_ping_metric_name -)
    - aws cloudwatch put-metric-data --region "$AWS_REGION" --namespace "$NAMESPACE" --metric-name "$METRIC" --value 1

include:
  - local: .gitlab-ci-rules.yml
  - local: kitchen/cookbooks/identity-gitlab/.gitlab-ci.yml
  - local: terraform/.gitlab-ci.yml
  - local: cloudlib/.gitlab-ci.yml
  - local: bin/users/.gitlab-ci.yml
  - template: Security/SAST-IaC.gitlab-ci.yml
  - template: Security/SAST.gitlab-ci.yml