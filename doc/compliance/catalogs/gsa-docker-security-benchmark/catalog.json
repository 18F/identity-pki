{
  "catalog": {
    "uuid": "2a23da4a-4834-4768-b890-a0052564c2ca",
    "metadata": {
      "title": "GSA Docker Security Benchmark",
      "last-modified": "2021-11-29T15:27:12.092084-08:00",
      "version": "0.0.1",
      "oscal-version": "1.0.0",
      "remarks": "This catalog is extracted from the GSA Docker Security Benchmark and may not fully comply with CIS baselines."
    },
    "groups": [
      {
        "id": "s1",
        "class": "section",
        "title": "General Configuration",
        "props": [
          {
            "name": "label",
            "value": "1"
          }
        ],
        "parts": [
          {
            "id": "s1_smt",
            "name": "objective",
            "prose": "This section contains general host recommendations for systems running Docker."
          }
        ],
        "controls": [
          {
            "id": "s1.1.1",
            "class": "section",
            "title": "Ensure the container host has been Hardened",
            "props": [
              {
                "name": "label",
                "value": "1.1.1"
              }
            ],
            "parts": [
              {
                "id": "s1.1.1_smt",
                "name": "objective",
                "prose": "You may consider various CIS Security Benchmarks for your container host. If you have other security guidelines or regulatory requirements to adhere to, please follow them as suitable in your environment."
              }
            ],
            "controls": []
          },
          {
            "id": "s1.1.2",
            "class": "section",
            "title": "Ensure that the version of Docker is up to date",
            "props": [
              {
                "name": "label",
                "value": "1.1.2"
              }
            ],
            "parts": [
              {
                "id": "s1.1.2_smt",
                "name": "objective",
                "prose": "You should monitor versions of Docker releases and make sure your software is updated as required."
              }
            ],
            "controls": []
          },
          {
            "id": "s1.2.1",
            "class": "section",
            "title": "Ensure a separate partition for containers has been created",
            "props": [
              {
                "name": "label",
                "value": "1.2.1"
              }
            ],
            "parts": [
              {
                "id": "s1.2.1_smt",
                "name": "objective",
                "prose": "For new installations, you should create a separate partition for the `/var/lib/docker` mount point. For systems which have already been installed, you should use the Logical Volume Manager (LVM) within Linux to create a new partition."
              }
            ],
            "controls": []
          },
          {
            "id": "s1.2.10",
            "class": "section",
            "title": "Ensure auditing is configured for Docker files and directories - /etc/docker/daemon.json",
            "props": [
              {
                "name": "label",
                "value": "1.2.10"
              }
            ],
            "parts": [
              {
                "id": "s1.2.10_smt",
                "name": "objective",
                "prose": "You should add a rule for the `/etc/docker/daemon.json` file.\n\nFor example:\n\nAdd the line below to the `/etc/audit/audit.rules` file:\n```\n-w /etc/docker/daemon.json -k docker \n```\nThen restart the audit daemon. \n\nFor example:\n```\nservice auditd restart\n```"
              }
            ],
            "controls": []
          },
          {
            "id": "s1.2.11",
            "class": "section",
            "title": "Ensure auditing is configured for Docker files and directories - /usr/bin/containerd",
            "props": [
              {
                "name": "label",
                "value": "1.2.11"
              }
            ],
            "parts": [
              {
                "id": "s1.2.11_smt",
                "name": "objective",
                "prose": "You should add a rule for the `/usr/bin/containerd` file.\n\nFor example:\n\nAdd the line below to the `/etc/audit/audit.rules` file:\n```\n-w /usr/bin/containerd -k docker \n```\nThen restart the audit daemon. \n\nFor example:\n```\nservice auditd restart\n```"
              }
            ],
            "controls": []
          },
          {
            "id": "s1.2.12",
            "class": "section",
            "title": "Ensure auditing is configured for Docker files and directories - /usr/sbin/runc",
            "props": [
              {
                "name": "label",
                "value": "1.2.12"
              }
            ],
            "parts": [
              {
                "id": "s1.2.12_smt",
                "name": "objective",
                "prose": "You should add a rule for `/usr/sbin/runc` file.\n\nFor example:\n\nAdd the line below to the `/etc/audit/audit.rules` file:\n```\n-w /usr/sbin/runc -k docker \n```\nThen restart the audit daemon. \n\nFor example:\n```\nservice auditd restart\n```"
              }
            ],
            "controls": []
          },
          {
            "id": "s1.2.2",
            "class": "section",
            "title": "Ensure only trusted users are allowed to control Docker daemon",
            "props": [
              {
                "name": "label",
                "value": "1.2.2"
              }
            ],
            "parts": [
              {
                "id": "s1.2.2_smt",
                "name": "objective",
                "prose": "You should remove any untrusted users from the `docker` group. Additionally, you should not create a mapping of sensitive directories from the host to container volumes."
              }
            ],
            "controls": []
          },
          {
            "id": "s1.2.3",
            "class": "section",
            "title": "Ensure auditing is configured for the Docker daemon",
            "props": [
              {
                "name": "label",
                "value": "1.2.3"
              }
            ],
            "parts": [
              {
                "id": "s1.2.3_smt",
                "name": "objective",
                "prose": "You should add rules for the Docker daemon.\n\nFor example:\n\nAdd the line below to the `/etc/audit/audit.rules` file:\n```\n-w /usr/bin/dockerd -k docker\n```\n\nThen, restart the audit daemon using the following command\n\n```\nservice auditd restart\n```"
              }
            ],
            "controls": []
          },
          {
            "id": "s1.2.4",
            "class": "section",
            "title": "Ensure auditing is configured for Docker files and directories - /var/lib/docker",
            "props": [
              {
                "name": "label",
                "value": "1.2.4"
              }
            ],
            "parts": [
              {
                "id": "s1.2.4_smt",
                "name": "objective",
                "prose": "You should add a rule for the `/var/lib/docker` directory.\n\nFor example,\n\nAdd the line as below to the `/etc/audit/audit.rules` file:\n```\n-w /var/lib/docker -k docker \n```\nThen restart the audit daemon. \n\nFor example,\n```\nservice auditd restart\n```"
              }
            ],
            "controls": []
          },
          {
            "id": "s1.2.5",
            "class": "section",
            "title": "Ensure auditing is configured for Docker files and directories - /etc/docker",
            "props": [
              {
                "name": "label",
                "value": "1.2.5"
              }
            ],
            "parts": [
              {
                "id": "s1.2.5_smt",
                "name": "objective",
                "prose": "You should add a rule for the `/etc/docker` directory.\n\nFor example:\n\nAdd the line below to the `/etc/audit/audit.rules` file:\n```\n-w /etc/docker -k docker \n```\nThen restart the audit daemon. For example:\n```\nservice auditd restart\n```"
              }
            ],
            "controls": []
          },
          {
            "id": "s1.2.6",
            "class": "section",
            "title": "Ensure auditing is configured for Docker files and directories - docker.service",
            "props": [
              {
                "name": "label",
                "value": "1.2.6"
              }
            ],
            "parts": [
              {
                "id": "s1.2.6_smt",
                "name": "objective",
                "prose": "If the file exists, a rule for it should be added.\n\nFor example:\n\nAdd the line as below in `/etc/audit/audit.rules` file:\n```\n-w /usr/lib/systemd/system/docker.service -k docker \n```\nThen restart the audit daemon. \n\nFor example:\n```\nservice auditd restart\n```"
              }
            ],
            "controls": []
          },
          {
            "id": "s1.2.7",
            "class": "section",
            "title": "Ensure auditing is configured for Docker files and directories - docker.socket",
            "props": [
              {
                "name": "label",
                "value": "1.2.7"
              }
            ],
            "parts": [
              {
                "id": "s1.2.7_smt",
                "name": "objective",
                "prose": "If the file exists, you should add a rule for it.\n\nFor example:\n\nAdd the line below to the `/etc/audit/audit.rules` file:\n```\n-w /usr/lib/systemd/system/docker.socket -k docker \n```\nThen restart the audit daemon. \n\nFor example:\n```\nservice auditd restart\n```"
              }
            ],
            "controls": []
          },
          {
            "id": "s1.2.8",
            "class": "section",
            "title": "Ensure auditing is configured for Docker files and directories - /etc/default/docker",
            "props": [
              {
                "name": "label",
                "value": "1.2.8"
              }
            ],
            "parts": [
              {
                "id": "s1.2.8_smt",
                "name": "objective",
                "prose": "You should add a rule for the `/etc/default/docker` file.\n\nFor example:\n\nAdd the line below to the `/etc/audit/audit.rules` file:\n```\n-w /etc/default/docker -k docker \n```\nThen restart the audit daemon. \n\nFor example:\n```\nservice auditd restart\n```"
              }
            ],
            "controls": []
          },
          {
            "id": "s1.2.9",
            "class": "section",
            "title": "Ensure auditing is configured for Docker files and directories - /etc/sysconfig/docker",
            "props": [
              {
                "name": "label",
                "value": "1.2.9"
              }
            ],
            "parts": [
              {
                "id": "s1.2.9_smt",
                "name": "objective",
                "prose": "You should add a rule for `/etc/sysconfig/docker` file.\n\nFor example:\n\nAdd the line below to the `/etc/audit/audit.rules` file:\n```\n-w /etc/sysconfig/docker -k docker \n```\nThen restart the audit daemon. \n\nFor example:\n```\nservice auditd restart\n```"
              }
            ],
            "controls": []
          }
        ]
      },
      {
        "id": "s2",
        "class": "section",
        "title": "Docker daemon configuration",
        "props": [
          {
            "name": "label",
            "value": "2"
          }
        ],
        "parts": [
          {
            "id": "s2_smt",
            "name": "objective",
            "prose": "This section lists the recommendations that alter and secure the behavior of the Docker daemon. The settings that are under this section affect ALL container instances."
          }
        ],
        "controls": [
          {
            "id": "s2.1",
            "class": "section",
            "title": "Ensure network traffic is restricted between containers on the default bridge",
            "props": [
              {
                "name": "label",
                "value": "2.1"
              }
            ],
            "parts": [
              {
                "id": "s2.1_smt",
                "name": "objective",
                "prose": "Edit the Docker daemon configuration file to ensure that icc is disabled. It should include the following setting \n\n```\n\"icc\": false\n```\n\nAlernatively, run the docker daemon directly and pass `--icc=false` as an argument.\n\nFor Example,\n```\ndockerd --icc=false\n```\n\nAlternatively, you can follow the Docker documentation and create a custom network and only join containers that need to communicate to that custom network. The `--icc` parameter only applies to the default docker bridge, if custom networks are used then the approach of segmenting networks should be adopted instead."
              }
            ],
            "controls": []
          },
          {
            "id": "s2.10",
            "class": "section",
            "title": "Ensure base device size is not changed until needed",
            "props": [
              {
                "name": "label",
                "value": "2.10"
              }
            ],
            "parts": [
              {
                "id": "s2.10_smt",
                "name": "objective",
                "prose": "Do not set `--storage-opt dm.basesize` until needed."
              }
            ],
            "controls": []
          },
          {
            "id": "s2.11",
            "class": "section",
            "title": "Ensure that authorization for Docker client commands is enabled",
            "props": [
              {
                "name": "label",
                "value": "2.11"
              }
            ],
            "parts": [
              {
                "id": "s2.11_smt",
                "name": "objective",
                "prose": "**Step 1**: Install/Create an authorization plugin.\n\n**Step 2**: Configure the authorization policy as desired.\n\n**Step 3**: Start the docker daemon as below:\n```\ndockerd --authorization-plugin=\n\n```"
              }
            ],
            "controls": []
          },
          {
            "id": "s2.12",
            "class": "section",
            "title": "Ensure centralized and remote logging is configured",
            "props": [
              {
                "name": "label",
                "value": "2.12"
              }
            ],
            "parts": [
              {
                "id": "s2.12_smt",
                "name": "objective",
                "prose": "**Step 1**: Set up the desired log driver following its documentation.\n\n**Step 2**: Start the docker daemon using that logging driver.\n\nFor example:\n```\ndockerd --log-driver=syslog --log-opt syslog-address=tcp://192.xxx.xxx.xxx\n```"
              }
            ],
            "controls": []
          },
          {
            "id": "s2.13",
            "class": "section",
            "title": "Ensure live restore is enabled",
            "props": [
              {
                "name": "label",
                "value": "2.13"
              }
            ],
            "parts": [
              {
                "id": "s2.13_smt",
                "name": "objective",
                "prose": "Run Docker in daemon mode and pass `--live-restore` to it as an argument.\n\nFor Example,\n```\ndockerd --live-restore\n```"
              }
            ],
            "controls": []
          },
          {
            "id": "s2.14",
            "class": "section",
            "title": "Ensure Userland Proxy is Disabled",
            "props": [
              {
                "name": "label",
                "value": "2.14"
              }
            ],
            "parts": [
              {
                "id": "s2.14_smt",
                "name": "objective",
                "prose": "You should run the Docker daemon as below:\n```\ndockerd --userland-proxy=false\n```"
              }
            ],
            "controls": []
          },
          {
            "id": "s2.15",
            "class": "section",
            "title": "Ensure that a daemon-wide custom seccomp profile is applied if appropriate",
            "props": [
              {
                "name": "label",
                "value": "2.15"
              }
            ],
            "parts": [
              {
                "id": "s2.15_smt",
                "name": "objective",
                "prose": "By default, Docker's default seccomp profile is applied. If this is adequate for your environment, no action is necessary. Alternatively, if you choose to apply your own seccomp profile, use the `--seccomp-profile` flag at daemon start or put it in the daemon runtime parameters file.\n\n```\ndockerd --seccomp-profile \n```"
              }
            ],
            "controls": []
          },
          {
            "id": "s2.16",
            "class": "section",
            "title": "Ensure that experimental features are not implemented in production",
            "props": [
              {
                "name": "label",
                "value": "2.16"
              }
            ],
            "parts": [
              {
                "id": "s2.16_smt",
                "name": "objective",
                "prose": "You should not pass `--experimental` as a runtime parameter to the Docker daemon on production systems."
              }
            ],
            "controls": []
          },
          {
            "id": "s2.17",
            "class": "section",
            "title": "Ensure containers are restricted from acquiring new privileges",
            "props": [
              {
                "name": "label",
                "value": "2.17"
              }
            ],
            "parts": [
              {
                "id": "s2.17_smt",
                "name": "objective",
                "prose": "You should run the Docker daemon as below:\n```\ndockerd --no-new-privileges\n```"
              }
            ],
            "controls": []
          },
          {
            "id": "s2.2",
            "class": "section",
            "title": "Ensure the logging level is set to 'info'",
            "props": [
              {
                "name": "label",
                "value": "2.2"
              }
            ],
            "parts": [
              {
                "id": "s2.2_smt",
                "name": "objective",
                "prose": "Ensure that the Docker daemon configuration file has the following configuration included\n\n```\n\"log-level\": \"info\"\n```\n\nAlternatively, run the Docker daemon as below:\n```\ndockerd --log-level=\"info\"\n```"
              }
            ],
            "controls": []
          },
          {
            "id": "s2.3",
            "class": "section",
            "title": "Ensure Docker is allowed to make changes to iptables",
            "props": [
              {
                "name": "label",
                "value": "2.3"
              }
            ],
            "parts": [
              {
                "id": "s2.3_smt",
                "name": "objective",
                "prose": "Do not run the Docker daemon with `--iptables=false` parameter. For example, do not start the Docker daemon as below:\n```\ndockerd --iptables=false\n```"
              }
            ],
            "controls": []
          },
          {
            "id": "s2.4",
            "class": "section",
            "title": "Ensure insecure registries are not used",
            "props": [
              {
                "name": "label",
                "value": "2.4"
              }
            ],
            "parts": [
              {
                "id": "s2.4_smt",
                "name": "objective",
                "prose": "You should ensure that no insecure registries are in use."
              }
            ],
            "controls": []
          },
          {
            "id": "s2.5",
            "class": "section",
            "title": "Ensure aufs storage driver is not used",
            "props": [
              {
                "name": "label",
                "value": "2.5"
              }
            ],
            "parts": [
              {
                "id": "s2.5_smt",
                "name": "objective",
                "prose": "Do not explicitly use `aufs` as storage driver.\n\nFor example, do not start Docker daemon as below:\n```\ndockerd --storage-driver aufs\n```"
              }
            ],
            "controls": []
          },
          {
            "id": "s2.6",
            "class": "section",
            "title": "Ensure TLS authentication for Docker daemon is configured",
            "props": [
              {
                "name": "label",
                "value": "2.6"
              }
            ],
            "parts": [
              {
                "id": "s2.6_smt",
                "name": "objective",
                "prose": "Follow the steps mentioned in the Docker documentation or other references."
              }
            ],
            "controls": []
          },
          {
            "id": "s2.7",
            "class": "section",
            "title": "Ensure the default ulimit is configured appropriately",
            "props": [
              {
                "name": "label",
                "value": "2.7"
              }
            ],
            "parts": [
              {
                "id": "s2.7_smt",
                "name": "objective",
                "prose": "Run Docker in daemon mode and pass `--default-ulimit` as argument with respective ulimits as appropriate in your environment and in line with your security policy.\n\nFor Example,\n```\ndockerd --default-ulimit nproc=1024:2048 --default-ulimit nofile=100:200\n```"
              }
            ],
            "controls": []
          },
          {
            "id": "s2.8",
            "class": "section",
            "title": "Enable user namespace support",
            "props": [
              {
                "name": "label",
                "value": "2.8"
              }
            ],
            "parts": [
              {
                "id": "s2.8_smt",
                "name": "objective",
                "prose": "Please consult the Docker documentation for various ways in which this can be configured depending upon your requirements. Your steps might also vary based on platform - For example, on Red Hat, sub-UIDs and sub-GIDs mapping creation do not work automatically. You might have to create your own mapping.\n\nThe high-level steps are as below:\n\n**Step 1:** Ensure that the files `/etc/subuid` and `/etc/subgid` exist.\n```\ntouch /etc/subuid /etc/subgid \n```\n**Step 2:** Start the docker daemon with `--userns-remap` flag\n```\ndockerd --userns-remap=default\n```"
              }
            ],
            "controls": []
          },
          {
            "id": "s2.9",
            "class": "section",
            "title": "Ensure the default cgroup usage has been confirmed",
            "props": [
              {
                "name": "label",
                "value": "2.9"
              }
            ],
            "parts": [
              {
                "id": "s2.9_smt",
                "name": "objective",
                "prose": "The default setting is in line with good security practice and can be left in situ. If you wish to specifically set a non-default cgroup, pass the `--cgroup-parent` parameter to the Docker daemon when starting it.\n\nFor example,\n```\ndockerd --cgroup-parent=/foobar\n```"
              }
            ],
            "controls": []
          }
        ]
      },
      {
        "id": "s3",
        "class": "section",
        "title": "Docker daemon configuration files",
        "props": [
          {
            "name": "label",
            "value": "3"
          }
        ],
        "parts": [
          {
            "id": "s3_smt",
            "name": "objective",
            "prose": "This section covers Docker related files and directory permissions and ownership. Keeping the files and directories, that may contain sensitive parameters, secure is important for correct and secure functioning of Docker daemon."
          }
        ],
        "controls": [
          {
            "id": "s3.1",
            "class": "section",
            "title": "Ensure that the docker.service file ownership is set to root:root",
            "props": [
              {
                "name": "label",
                "value": "3.1"
              }
            ],
            "parts": [
              {
                "id": "s3.1_smt",
                "name": "objective",
                "prose": "**Step 1**: Find out the file location:\n```\nsystemctl show -p FragmentPath docker.service\n```\n\n**Step 2**: If the file does not exist, this recommendation is not applicable. If the file does exist, you should execute the command below, including the correct file path, in order to set the ownership and group ownership for the file to `root`.\n\nFor example,\n```\nchown root:root /usr/lib/systemd/system/docker.service\n```"
              }
            ],
            "controls": []
          },
          {
            "id": "s3.10",
            "class": "section",
            "title": "Ensure that TLS CA certificate file permissions are set to 444 or more restrictively",
            "props": [
              {
                "name": "label",
                "value": "3.10"
              }
            ],
            "parts": [
              {
                "id": "s3.10_smt",
                "name": "objective",
                "prose": "You should execute the following command:\n\n```\nchmod 444 \n\n```\nThis sets the file permissions on the TLS CA file to `444`."
              }
            ],
            "controls": []
          },
          {
            "id": "s3.11",
            "class": "section",
            "title": "Ensure that Docker server certificate file ownership is set to root:root",
            "props": [
              {
                "name": "label",
                "value": "3.11"
              }
            ],
            "parts": [
              {
                "id": "s3.11_smt",
                "name": "objective",
                "prose": "You should run the following command:\n```\nchown root:root \n\n```\nThis sets the individual ownership and the group ownership for the Docker server certificate file to `root`."
              }
            ],
            "controls": []
          },
          {
            "id": "s3.12",
            "class": "section",
            "title": "Ensure that the Docker server certificate file permissions are set to 444 or more restrictively",
            "props": [
              {
                "name": "label",
                "value": "3.12"
              }
            ],
            "parts": [
              {
                "id": "s3.12_smt",
                "name": "objective",
                "prose": "You should execute the command below:\n```\nchmod 444 \n\n```\nThis sets the file permissions of the Docker server certificate file to `444`."
              }
            ],
            "controls": []
          },
          {
            "id": "s3.13",
            "class": "section",
            "title": "Ensure that the Docker server certificate key file ownership is set to root:root",
            "props": [
              {
                "name": "label",
                "value": "3.13"
              }
            ],
            "parts": [
              {
                "id": "s3.13_smt",
                "name": "objective",
                "prose": "You should execute the following command:\n\n```\nchown root:root \n\n```\nThis sets the individual ownership and group ownership for the Docker server certificate key file to `root`."
              }
            ],
            "controls": []
          },
          {
            "id": "s3.14",
            "class": "section",
            "title": "Ensure that the Docker server certificate key file permissions are set to 400",
            "props": [
              {
                "name": "label",
                "value": "3.14"
              }
            ],
            "parts": [
              {
                "id": "s3.14_smt",
                "name": "objective",
                "prose": "You should execute the following command:\n\n```\nchmod 400 \n\n```\nThis sets the Docker server certificate key file permissions to `400`."
              }
            ],
            "controls": []
          },
          {
            "id": "s3.15",
            "class": "section",
            "title": "Ensure that the Docker socket file ownership is set to root:docker",
            "props": [
              {
                "name": "label",
                "value": "3.15"
              }
            ],
            "parts": [
              {
                "id": "s3.15_smt",
                "name": "objective",
                "prose": "You should execute the following command:\n```\nchown root:docker /var/run/docker.sock\n```\nThis sets the ownership to `root` and group ownership to `docker` for the default Docker socket file."
              }
            ],
            "controls": []
          },
          {
            "id": "s3.16",
            "class": "section",
            "title": "Ensure that the Docker socket file permissions are set to 660 or more restrictively",
            "props": [
              {
                "name": "label",
                "value": "3.16"
              }
            ],
            "parts": [
              {
                "id": "s3.16_smt",
                "name": "objective",
                "prose": "You should execute the command below.\n\n```\nchmod 660 /var/run/docker.sock\n```\nThis sets the file permissions of the Docker socket file to `660`."
              }
            ],
            "controls": []
          },
          {
            "id": "s3.17",
            "class": "section",
            "title": "Ensure that the daemon.json file ownership is set to root:root",
            "props": [
              {
                "name": "label",
                "value": "3.17"
              }
            ],
            "parts": [
              {
                "id": "s3.17_smt",
                "name": "objective",
                "prose": "You should execute the command below:\n```\nchown root:root /etc/docker/daemon.json\n```\nThis sets the ownership and group ownership for the file to `root`."
              }
            ],
            "controls": []
          },
          {
            "id": "s3.18",
            "class": "section",
            "title": "Ensure that daemon.json file permissions are set to 644 or more restrictive",
            "props": [
              {
                "name": "label",
                "value": "3.18"
              }
            ],
            "parts": [
              {
                "id": "s3.18_smt",
                "name": "objective",
                "prose": "You should execute the command below\n```\nchmod 644 /etc/docker/daemon.json\n```\nThis sets the file permissions for this file to `644`."
              }
            ],
            "controls": []
          },
          {
            "id": "s3.19",
            "class": "section",
            "title": "Ensure that the /etc/default/docker file ownership is set to root:root",
            "props": [
              {
                "name": "label",
                "value": "3.19"
              }
            ],
            "parts": [
              {
                "id": "s3.19_smt",
                "name": "objective",
                "prose": "You should execute the following command\n```\nchown root:root /etc/default/docker\n```\nThis sets the ownership and group ownership of the file to `root`."
              }
            ],
            "controls": []
          },
          {
            "id": "s3.2",
            "class": "section",
            "title": "Ensure that docker.service file permissions are appropriately set",
            "props": [
              {
                "name": "label",
                "value": "3.2"
              }
            ],
            "parts": [
              {
                "id": "s3.2_smt",
                "name": "objective",
                "prose": "**Step 1**: Find out the file location:\n```\nsystemctl show -p FragmentPath docker.service\n```\n\n**Step 2**: If the file does not exist, this recommendation is not applicable. If the file exists, execute the command below including the correct file path to set the file permissions to `644`.\n\nFor example,\n```\nchmod 644 /usr/lib/systemd/system/docker.service\n```"
              }
            ],
            "controls": []
          },
          {
            "id": "s3.20",
            "class": "section",
            "title": "Ensure that the /etc/sysconfig/docker file ownership is set to root:root",
            "props": [
              {
                "name": "label",
                "value": "3.20"
              }
            ],
            "parts": [
              {
                "id": "s3.20_smt",
                "name": "objective",
                "prose": "You should execute the following command:\n```\nchown root:root /etc/sysconfig/docker\n```\nThis sets the ownership and group ownership for the file to `root`."
              }
            ],
            "controls": []
          },
          {
            "id": "s3.21",
            "class": "section",
            "title": "Ensure that the /etc/sysconfig/docker file permissions are set to 644 or more restrictively",
            "props": [
              {
                "name": "label",
                "value": "3.21"
              }
            ],
            "parts": [
              {
                "id": "s3.21_smt",
                "name": "objective",
                "prose": "You should execute the following command:\n```\nchmod 644 /etc/sysconfig/docker\n```\nThis sets the file permissions for this file to `644`."
              }
            ],
            "controls": []
          },
          {
            "id": "s3.22",
            "class": "section",
            "title": "Ensure that the /etc/default/docker file permissions are set to 644 or more restrictively",
            "props": [
              {
                "name": "label",
                "value": "3.22"
              }
            ],
            "parts": [
              {
                "id": "s3.22_smt",
                "name": "objective",
                "prose": "You should execute the following command:\n```\nchmod 644 /etc/default/docker\n```\nThis sets the file permissions for this file to `644`."
              }
            ],
            "controls": []
          },
          {
            "id": "s3.3",
            "class": "section",
            "title": "Ensure that docker.socket file ownership is set to root:root",
            "props": [
              {
                "name": "label",
                "value": "3.3"
              }
            ],
            "parts": [
              {
                "id": "s3.3_smt",
                "name": "objective",
                "prose": "**Step 1**: Find out the file location:\n```\nsystemctl show -p FragmentPath docker.socket\n```\n\n**Step 2**: If the file does not exist, this recommendation is not applicable. If the file exists, execute the command below, including the correct file path to set the ownership and group ownership for the file to `root`.\n\nFor example,\n```\nchown root:root /usr/lib/systemd/system/docker.socket\n```"
              }
            ],
            "controls": []
          },
          {
            "id": "s3.4",
            "class": "section",
            "title": "Ensure that docker.socket file permissions are set to 644 or more restrictive",
            "props": [
              {
                "name": "label",
                "value": "3.4"
              }
            ],
            "parts": [
              {
                "id": "s3.4_smt",
                "name": "objective",
                "prose": "**Step 1**: Find out the file location:\n```\nsystemctl show -p FragmentPath docker.socket\n```\n\n**Step 2**: If the file does not exist, this recommendation is not applicable. If the file does exist, you should execute the command below, including the correct file path to set the file permissions to `644`.\n\nFor example,\n```\nchmod 644 /usr/lib/systemd/system/docker.socket\n```"
              }
            ],
            "controls": []
          },
          {
            "id": "s3.5",
            "class": "section",
            "title": "Ensure that the /etc/docker directory ownership is set to root:root",
            "props": [
              {
                "name": "label",
                "value": "3.5"
              }
            ],
            "parts": [
              {
                "id": "s3.5_smt",
                "name": "objective",
                "prose": "To resolve this issue you should run the following command:\n\n```\nchown root:root /etc/docker\n```\nThis sets the ownership and group ownership for the directory to `root`."
              }
            ],
            "controls": []
          },
          {
            "id": "s3.6",
            "class": "section",
            "title": "Ensure that /etc/docker directory permissions are set to 755 or more restrictively",
            "props": [
              {
                "name": "label",
                "value": "3.6"
              }
            ],
            "parts": [
              {
                "id": "s3.6_smt",
                "name": "objective",
                "prose": "You should run the following command:\n```\nchmod 755 /etc/docker\n```\nThis sets the permissions for the directory to `755`."
              }
            ],
            "controls": []
          },
          {
            "id": "s3.7",
            "class": "section",
            "title": "Ensure that registry certificate file ownership is set to root:root",
            "props": [
              {
                "name": "label",
                "value": "3.7"
              }
            ],
            "parts": [
              {
                "id": "s3.7_smt",
                "name": "objective",
                "prose": "The following command could be executed:\n```\nchown root:root /etc/docker/certs.d//* \n```\nThis would set the individual ownership and group ownership for the registry certificate files to `root`."
              }
            ],
            "controls": []
          },
          {
            "id": "s3.8",
            "class": "section",
            "title": "Ensure that registry certificate file permissions are set to 444 or more restrictively",
            "props": [
              {
                "name": "label",
                "value": "3.8"
              }
            ],
            "parts": [
              {
                "id": "s3.8_smt",
                "name": "objective",
                "prose": "You should execute the following command:\n```\nchmod 444 /etc/docker/certs.d//* \n```\nThis would set the permissions for the registry certificate files to `444`."
              }
            ],
            "controls": []
          },
          {
            "id": "s3.9",
            "class": "section",
            "title": "Ensure that TLS CA certificate file ownership is set to root:root",
            "props": [
              {
                "name": "label",
                "value": "3.9"
              }
            ],
            "parts": [
              {
                "id": "s3.9_smt",
                "name": "objective",
                "prose": "You should execute the following command:\n\n```\nchown root:root \n\n```\nThis sets the individual ownership and group ownership for the TLS CA certificate file to `root`."
              }
            ],
            "controls": []
          }
        ]
      },
      {
        "id": "s4",
        "class": "section",
        "title": "Container Images and Build File Configuration",
        "props": [
          {
            "name": "label",
            "value": "4"
          }
        ],
        "parts": [
          {
            "id": "s4_smt",
            "name": "objective",
            "prose": "Container base images and build files govern the fundamentals of how a container instance from a particular image would behave. Ensuring that you are using proper base images and appropriatebuild files can be very important for building your containerized infrastructure. Below are some of the recommendations that you should follow for container base images and build files to ensure that your containerized infrastructure is secure."
          }
        ],
        "controls": [
          {
            "id": "s4.1",
            "class": "section",
            "title": "Ensure that a user for the container has been created",
            "props": [
              {
                "name": "label",
                "value": "4.1"
              }
            ],
            "parts": [
              {
                "id": "s4.1_smt",
                "name": "objective",
                "prose": "You should ensure that the Dockerfile for each container image contains the information below:\n```\nUSER \n```\nIn this case, the user name or ID refers to the user that was found in the container base image. If there is no specific user created in the container base image, then make use of the `useradd` command to add a specific user before the `USER` instruction in the Dockerfile.\n\nFor example, add the below lines in the Dockerfile to create a user in the container:\n```\nRUN useradd -d /home/username -m -s /bin/bash username\nUSER username \n```\nNote: If there are users in the image that are not needed, you should consider deleting them. After deleting those users, commit the image and then generate new instances of the containers.\n\nAlternatively, if it is not possible to set the `USER` directive in the Dockerfile, a script running as part of the `CMD` or `ENTRYPOINT` sections of the Dockerfile should be used to ensure that the container process switches to a non-root user."
              }
            ],
            "controls": []
          },
          {
            "id": "s4.10",
            "class": "section",
            "title": "Ensure secrets are not stored in Dockerfiles",
            "props": [
              {
                "name": "label",
                "value": "4.10"
              }
            ],
            "parts": [
              {
                "id": "s4.10_smt",
                "name": "objective",
                "prose": "Do not store any kind of secrets within Dockerfiles. Where secrets are required during the build process, make use of a secrets management tool, such as the buildkit builder included with Docker."
              }
            ],
            "controls": []
          },
          {
            "id": "s4.2",
            "class": "section",
            "title": "Ensure that containers use only trusted base images",
            "props": [
              {
                "name": "label",
                "value": "4.2"
              }
            ],
            "parts": [
              {
                "id": "s4.2_smt",
                "name": "objective",
                "prose": "The following procedures are useful for establishing trust for a specific image.\n\n- Configure and use Docker Content trust.\n- View the history of each Docker image to evaluate its risk, dependent on the sensitivity of the application you wish to deploy using it.\n- Scan Docker images for vulnerabilities at regular intervals."
              }
            ],
            "controls": []
          },
          {
            "id": "s4.3",
            "class": "section",
            "title": "Ensure that unnecessary packages are not installed in the container",
            "props": [
              {
                "name": "label",
                "value": "4.3"
              }
            ],
            "parts": [
              {
                "id": "s4.3_smt",
                "name": "objective",
                "prose": "You should not install anything within the container that is not required. \n\nYou should consider using a minimal base image rather than the standard Redhat/Centos/Debian images if you can. Some of the options available include BusyBox and Alpine.\n\nNot only can this trim your image size considerably, but there would also be fewer pieces of software which could contain vectors for attack."
              }
            ],
            "controls": []
          },
          {
            "id": "s4.4",
            "class": "section",
            "title": "Ensure images are scanned and rebuilt to include security patches",
            "props": [
              {
                "name": "label",
                "value": "4.4"
              }
            ],
            "parts": [
              {
                "id": "s4.4_smt",
                "name": "objective",
                "prose": "Images should be re-built ensuring that the latest version of the base images are used, to keep the operating system patch level at an appropriate level. Once the images have been re-built, containers should be re-started making use of the updated images."
              }
            ],
            "controls": []
          },
          {
            "id": "s4.6",
            "class": "section",
            "title": "Ensure that HEALTHCHECK instructions have been added to container images",
            "props": [
              {
                "name": "label",
                "value": "4.6"
              }
            ],
            "parts": [
              {
                "id": "s4.6_smt",
                "name": "objective",
                "prose": "You should follow the Docker documentation and rebuild your container images to include the `HEALTHCHECK` instruction."
              }
            ],
            "controls": []
          },
          {
            "id": "s4.7",
            "class": "section",
            "title": "Ensure update instructions are not used alone in Dockerfiles",
            "props": [
              {
                "name": "label",
                "value": "4.7"
              }
            ],
            "parts": [
              {
                "id": "s4.7_smt",
                "name": "objective",
                "prose": "You should use update instructions together with install instructions and version pinning for packages while installing them. This will prevent caching and force the extraction of the required versions.\n\nAlternatively, you could use the `--no-cache` flag during the `docker build` process to avoid using cached layers."
              }
            ],
            "controls": []
          },
          {
            "id": "s4.8",
            "class": "section",
            "title": "Ensure setuid and setgid permissions are removed",
            "props": [
              {
                "name": "label",
                "value": "4.8"
              }
            ],
            "parts": [
              {
                "id": "s4.8_smt",
                "name": "objective",
                "prose": "You should allow setuid and setgid permissions only on executables which require them. You could remove these permissions at build time by adding the following command in your Dockerfile, preferably towards the end of the Dockerfile:\n```\nRUN find / -perm /6000 -type f -exec chmod a-s {} \\; || true \n```"
              }
            ],
            "controls": []
          },
          {
            "id": "s4.9",
            "class": "section",
            "title": "Ensure that COPY is used instead of ADD in Dockerfiles",
            "props": [
              {
                "name": "label",
                "value": "4.9"
              }
            ],
            "parts": [
              {
                "id": "s4.9_smt",
                "name": "objective",
                "prose": "You should use `COPY` rather than `ADD` instructions in Dockerfiles."
              }
            ],
            "controls": []
          }
        ]
      },
      {
        "id": "s5",
        "class": "section",
        "title": "Container Runtime Configuration",
        "props": [
          {
            "name": "label",
            "value": "5"
          }
        ],
        "parts": [
          {
            "id": "s5_smt",
            "name": "objective",
            "prose": "There are many security implications associated with the ways that containers are started. Some runtime parameters can be supplied that have security consequences that could compromise the host and the containers running on it. It is therefore very important to verify the way in which containers are started, and which parameters are associated with them. Container runtime configuration should be reviewed in line with organizational security policy."
          }
        ],
        "controls": [
          {
            "id": "s5.1",
            "class": "section",
            "title": "Ensure that, if applicable, an AppArmor Profile is enabled",
            "props": [
              {
                "name": "label",
                "value": "5.1"
              }
            ],
            "parts": [
              {
                "id": "s5.1_smt",
                "name": "objective",
                "prose": "If AppArmor is applicable for your Linux OS, you should enable it.\n\n1. Verify AppArmor is installed.\n2. Create or import a AppArmor profile for Docker containers.\n3. Enable enforcement of the policy.\n4. Start your Docker container using the customized AppArmor profile. For example:\n\n```\ndocker run --interactive --tty --security-opt=\"apparmor:PROFILENAME\" ubuntu /bin/bash\n```\nAlternatively, Docker's default AppArmor policy can be used."
              }
            ],
            "controls": []
          },
          {
            "id": "s5.10",
            "class": "section",
            "title": "Ensure that the memory usage for containers is limited",
            "props": [
              {
                "name": "label",
                "value": "5.10"
              }
            ],
            "parts": [
              {
                "id": "s5.10_smt",
                "name": "objective",
                "prose": "You should run the container with only as much memory as it requires by using the `--memory` argument. \n\nFor example, you could run a container using the command below:\n```\ndocker run --interactive --tty --memory 256m centos /bin/bash\n```\nIn the example above, the container is started with a memory limit of 256 MB.\n\nNote that the output of the command below returns values in scientific notation if memory limits are in place.\n```\ndocker inspect --format='<.Config.Memory>' 7c5a2d4c7fe0\n```\n\nFor example, if the memory limit is set to `256 MB` for a container instance, the output of the command above would be `2.68435456e+08` and NOT 256m. You should convert this value using a scientific calculator."
              }
            ],
            "controls": []
          },
          {
            "id": "s5.11",
            "class": "section",
            "title": "Ensure that CPU priority is set appropriately on containers",
            "props": [
              {
                "name": "label",
                "value": "5.11"
              }
            ],
            "parts": [
              {
                "id": "s5.11_smt",
                "name": "objective",
                "prose": "You should manage the CPU runtime between your containers dependent on their priority within your organization. To do so start the container using the `--cpu-shares` argument. \n\nFor example, you could run a container as below:\n```\ndocker run --interactive --tty --cpu-shares 512 centos /bin/bash\n```\n\nIn the example above, the container is started with CPU shares of 50% of what other containers use. So if the other container has CPU shares of 80%, this container will have CPU shares of 40%.\n\nEvery new container will have `1024` shares of CPU by default. However, this value is shown as `0` if you run the command mentioned in the audit section.\n\nAlternatively:\n\n1. Navigate to the `/sys/fs/cgroup/cpu/system.slice/` directory.\n2. Check your container instance ID using `docker ps`.\n3. Inside the above directory (in step 1), you could have a directory called, for example: `docker-.scope`. For example, `docker-4acae729e8659c6be696ee35b2237cc1fe4edd2672e9186434c5116e1a6fbed6.scope`. Navigate to this directory.\n4. You will find a file named `cpu.shares`. Execute `cat cpu.shares`. This will always give you the CPU share value based on the system. Even if there are no CPU shares configured using the `-c` or `--cpu-shares` argument in the `docker run` command, this file will have a value of `1024`.\n\nIf you set one container’s CPU shares to `512` it will receive half of the CPU time compared to the other containers. So if you take `1024` as 100% you can then derive the number that you should set for respective CPU shares. For example, use `512` if you want to set it to 50% and `256` if you want to set it 25%."
              }
            ],
            "controls": []
          },
          {
            "id": "s5.12",
            "class": "section",
            "title": "Ensure that the container's root filesystem is mounted as read only",
            "props": [
              {
                "name": "label",
                "value": "5.12"
              }
            ],
            "parts": [
              {
                "id": "s5.12_smt",
                "name": "objective",
                "prose": "You should add a `--read-only` flag at a container's runtime to enforce the container's root filesystem being mounted as read only. \n\n```\ndocker run  --read-only  \n```\n\nEnabling the `--read-only` option at a container's runtime should be used by administrators to force a container's executable processes to only write container data to explicit storage locations during its lifetime.\n\nExamples of explicit storage locations during a container's runtime include, but are not limited to: \n\n1. Using the `--tmpfs` option to mount a temporary file system for non-persistent data writes. \n\n```\ndocker run --interactive --tty --read-only --tmpfs \"/run\" --tmpfs \"/tmp\" centos /bin/bash\n``` \n\n2. Enabling Docker `rw` mounts at a container's runtime to persist container data directly on the Docker host filesystem. \n\n```\ndocker run --interactive --tty --read-only -v /opt/app/data:/run/app/data:rw centos /bin/bash\n``` \n\n3. Utilizing the Docker shared-storage volume plugin for Docker data volume to persist container data. \n\n```\ndocker volume create -d convoy --opt o=size=20GB my-named-volume\n```\n\n```\ndocker run --interactive --tty --read-only -v my-named-volume:/run/app/data centos /bin/bash\n```\n\n3. Transmitting container data outside of the Docker controlled area during the container's runtime for container data in order to ensure that it is persistent. Examples include hosted databases, network file shares and APIs."
              }
            ],
            "controls": []
          },
          {
            "id": "s5.13",
            "class": "section",
            "title": "Ensure that incoming container traffic is bound to a specific host interface",
            "props": [
              {
                "name": "label",
                "value": "5.13"
              }
            ],
            "parts": [
              {
                "id": "s5.13_smt",
                "name": "objective",
                "prose": "You should bind the container port to a specific host interface on the desired host port.\n\nFor example,\n```\ndocker run --detach --publish 10.2.3.4:49153:80 nginx\n```\nIn the example above, the container port `80` is bound to the host port on `49153` and would accept incoming connection only from the `10.2.3.4` external interface."
              }
            ],
            "controls": []
          },
          {
            "id": "s5.14",
            "class": "section",
            "title": "Ensure that the 'on-failure' container restart policy is set to '5'",
            "props": [
              {
                "name": "label",
                "value": "5.14"
              }
            ],
            "parts": [
              {
                "id": "s5.14_smt",
                "name": "objective",
                "prose": "If you wish a container to be automatically restarted, a sample command is as below:\n```\ndocker run --detach --restart=on-failure:5 nginx\n```"
              }
            ],
            "controls": []
          },
          {
            "id": "s5.15",
            "class": "section",
            "title": "Ensure that the host's process namespace is not shared",
            "props": [
              {
                "name": "label",
                "value": "5.15"
              }
            ],
            "parts": [
              {
                "id": "s5.15_smt",
                "name": "objective",
                "prose": "You should not start a container with the `--pid=host` argument.\n\nFor example, do not start a container with the command below:\n```\ndocker run --interactive --tty --pid=host centos /bin/bash\n```"
              }
            ],
            "controls": []
          },
          {
            "id": "s5.16",
            "class": "section",
            "title": "Ensure that the host's IPC namespace is not shared",
            "props": [
              {
                "name": "label",
                "value": "5.16"
              }
            ],
            "parts": [
              {
                "id": "s5.16_smt",
                "name": "objective",
                "prose": "You should not start a container with the `--ipc=host` argument. For example, do not start a container as below:\n\n```\ndocker run --interactive --tty --ipc=host centos /bin/bash\n```"
              }
            ],
            "controls": []
          },
          {
            "id": "s5.17",
            "class": "section",
            "title": "Ensure that host devices are not directly exposed to containers",
            "props": [
              {
                "name": "label",
                "value": "5.17"
              }
            ],
            "parts": [
              {
                "id": "s5.17_smt",
                "name": "objective",
                "prose": "You should not directly expose host devices to containers. If you do need to expose host devices to containers, you should use granular permissions as appropriate to your organization:\n\nFor example, do not start a container using the command below:\n```\ndocker run --interactive --tty --device=/dev/tty0:/dev/tty0:rwm --device=/dev/temp_sda:/dev/temp_sda:rwm centos bash\n```\n\nYou should only share the host device using appropriate permissions:\n```\ndocker run --interactive --tty --device=/dev/tty0:/dev/tty0:rw --device=/dev/temp_sda:/dev/temp_sda:r centos bash\n```"
              }
            ],
            "controls": []
          },
          {
            "id": "s5.18",
            "class": "section",
            "title": "Ensure that the default ulimit is overwritten at runtime if needed",
            "props": [
              {
                "name": "label",
                "value": "5.18"
              }
            ],
            "parts": [
              {
                "id": "s5.18_smt",
                "name": "objective",
                "prose": "You should only override the default ulimit settings if needed in a specific case.\n\nFor example, to override default ulimit settings start a container as below:\n\n```\ndocker run --ulimit nofile=1024:1024 --interactive --tty centos /bin/bash\n```"
              }
            ],
            "controls": []
          },
          {
            "id": "s5.19",
            "class": "section",
            "title": "Ensure mount propagation mode is not set to shared",
            "props": [
              {
                "name": "label",
                "value": "5.19"
              }
            ],
            "parts": [
              {
                "id": "s5.19_smt",
                "name": "objective",
                "prose": "Do not mount volumes in shared mode propagation.\n\nFor example, do not start a container as below:\n\n```\ndocker run  --volume=/hostPath:/containerPath:shared   \n```"
              }
            ],
            "controls": []
          },
          {
            "id": "s5.2",
            "class": "section",
            "title": "Ensure that, if applicable, SELinux security options are set",
            "props": [
              {
                "name": "label",
                "value": "5.2"
              }
            ],
            "parts": [
              {
                "id": "s5.2_smt",
                "name": "objective",
                "prose": "If SELinux is applicable for your Linux OS, you should use it.\n\n1. Set the SELinux State.\n2. Set the SELinux Policy.\n3. Create or import a SELinux policy template for Docker containers.\n4. Start Docker in daemon mode with SELinux enabled. For example:\n\n```\ndocker daemon --selinux-enabled\n```\n\n5. Start your Docker container using the security options. For example, \n\n```\ndocker run --interactive --tty --security-opt label=level:TopSecret centos /bin/bash\n```"
              }
            ],
            "controls": []
          },
          {
            "id": "s5.20",
            "class": "section",
            "title": "Ensure that the host's UTS namespace is not shared",
            "props": [
              {
                "name": "label",
                "value": "5.20"
              }
            ],
            "parts": [
              {
                "id": "s5.20_smt",
                "name": "objective",
                "prose": "You should not start a container with the `--uts=host` argument.\n\nFor example, do not start a container using the command below:\n```\ndocker run --rm --interactive --tty --uts=host rhel7.2\n```"
              }
            ],
            "controls": []
          },
          {
            "id": "s5.21",
            "class": "section",
            "title": "Ensure the default seccomp profile is not Disabled",
            "props": [
              {
                "name": "label",
                "value": "5.21"
              }
            ],
            "parts": [
              {
                "id": "s5.21_smt",
                "name": "objective",
                "prose": "By default, seccomp profiles are enabled. You do not need to do anything unless you want to modify and use a modified seccomp profile."
              }
            ],
            "controls": []
          },
          {
            "id": "s5.22",
            "class": "section",
            "title": "Ensure that  docker exec commands are not used with the privileged option",
            "props": [
              {
                "name": "label",
                "value": "5.22"
              }
            ],
            "parts": [
              {
                "id": "s5.22_smt",
                "name": "objective",
                "prose": "You should not use the `--privileged` option in `docker exec` commands."
              }
            ],
            "controls": []
          },
          {
            "id": "s5.23",
            "class": "section",
            "title": "Ensure that docker exec commands are not used with the user=root option",
            "props": [
              {
                "name": "label",
                "value": "5.23"
              }
            ],
            "parts": [
              {
                "id": "s5.23_smt",
                "name": "objective",
                "prose": "You should not use the `--user=root` option in `docker exec` commands."
              }
            ],
            "controls": []
          },
          {
            "id": "s5.24",
            "class": "section",
            "title": "Ensure that cgroup usage is confirmed",
            "props": [
              {
                "name": "label",
                "value": "5.24"
              }
            ],
            "parts": [
              {
                "id": "s5.24_smt",
                "name": "objective",
                "prose": "You should not use the `--cgroup-parent` option within the `docker run` command unless strictly required."
              }
            ],
            "controls": []
          },
          {
            "id": "s5.25",
            "class": "section",
            "title": "Ensure that  the container is restricted from acquiring additional privileges",
            "props": [
              {
                "name": "label",
                "value": "5.25"
              }
            ],
            "parts": [
              {
                "id": "s5.25_smt",
                "name": "objective",
                "prose": "You should start your container with the options below:\n```\ndocker run --rm -it --security-opt=no-new-privileges ubuntu bash\n```"
              }
            ],
            "controls": []
          },
          {
            "id": "s5.26",
            "class": "section",
            "title": "Ensure that container health is checked at runtime",
            "props": [
              {
                "name": "label",
                "value": "5.26"
              }
            ],
            "parts": [
              {
                "id": "s5.26_smt",
                "name": "objective",
                "prose": "You should run the container using the `--health-cmd` parameter.\n\nFor example:\n```\ndocker run -d --health-cmd='stat /etc/passwd || exit 1' nginx\n```"
              }
            ],
            "controls": []
          },
          {
            "id": "s5.27",
            "class": "section",
            "title": "Ensure that Docker commands always make use of the latest version of their image",
            "props": [
              {
                "name": "label",
                "value": "5.27"
              }
            ],
            "parts": [
              {
                "id": "s5.27_smt",
                "name": "objective",
                "prose": "You should use proper version pinning mechanisms (the \"latest\" tag which is assigned by default is still vulnerable to caching attacks) to avoid extracting cached older versions. Version pinning mechanisms should be used for base images, packages, and entire images. You can customize version pinning rules according to your requirements."
              }
            ],
            "controls": []
          },
          {
            "id": "s5.28",
            "class": "section",
            "title": "Ensure that the PIDs cgroup limit is used",
            "props": [
              {
                "name": "label",
                "value": "5.28"
              }
            ],
            "parts": [
              {
                "id": "s5.28_smt",
                "name": "objective",
                "prose": "Use `--pids-limit` flag with an appropriate value when launching the container.\n\nFor example:\n```\ndocker run -it --pids-limit 100 \n```\nIn the above example, the number of processes allowed to run at any given time is set to 100. After a limit of 100 concurrently running processes is reached, Docker would restrict any new process creation."
              }
            ],
            "controls": []
          },
          {
            "id": "s5.29",
            "class": "section",
            "title": "Ensure that Docker's default bridge \"docker0\" is not used",
            "props": [
              {
                "name": "label",
                "value": "5.29"
              }
            ],
            "parts": [
              {
                "id": "s5.29_smt",
                "name": "objective",
                "prose": "You should follow the Docker documentation and set up a user-defined network. All the containers should be run in this network."
              }
            ],
            "controls": []
          },
          {
            "id": "s5.3",
            "class": "section",
            "title": "Ensure that Linux kernel capabilities are restricted within containers",
            "props": [
              {
                "name": "label",
                "value": "5.3"
              }
            ],
            "parts": [
              {
                "id": "s5.3_smt",
                "name": "objective",
                "prose": "You should execute the command below to add required capabilities:\n\n```\ndocker run --cap-add={\"Capability 1\",\"Capability 2\"}   \n```\n\nYou should execute the command below to remove unneeded capabilities:\n```\ndocker run --cap-drop={\"Capability 1\",\"Capability 2\"}   \n```\nAlternatively, you could remove all the currently configured capabilities and then restore only the ones you specifically use:\n```\ndocker run --cap-drop=all --cap-add={\"Capability 1\",\"Capability 2\"}   \n```"
              }
            ],
            "controls": []
          },
          {
            "id": "s5.30",
            "class": "section",
            "title": "Ensure that the host's user namespaces are not shared",
            "props": [
              {
                "name": "label",
                "value": "5.30"
              }
            ],
            "parts": [
              {
                "id": "s5.30_smt",
                "name": "objective",
                "prose": "You should not share user namespaces between host and containers.\n\nFor example, you should not run the command below:\n```\ndocker run --rm -it --userns=host ubuntu bash\n```"
              }
            ],
            "controls": []
          },
          {
            "id": "s5.31",
            "class": "section",
            "title": "Ensure that the Docker socket is not mounted inside any containers",
            "props": [
              {
                "name": "label",
                "value": "5.31"
              }
            ],
            "parts": [
              {
                "id": "s5.31_smt",
                "name": "objective",
                "prose": "You should ensure that no containers mount `docker.sock` as a volume."
              }
            ],
            "controls": []
          },
          {
            "id": "s5.4",
            "class": "section",
            "title": "Ensure that privileged containers are not used",
            "props": [
              {
                "name": "label",
                "value": "5.4"
              }
            ],
            "parts": [
              {
                "id": "s5.4_smt",
                "name": "objective",
                "prose": "You should not run containers with the `--privileged` flag.\n\nFor example, do not start a container using the command below:\n```\ndocker run --interactive --tty --privileged centos /bin/bash\n```"
              }
            ],
            "controls": []
          },
          {
            "id": "s5.5",
            "class": "section",
            "title": "Ensure sensitive host system directories are not mounted on containers",
            "props": [
              {
                "name": "label",
                "value": "5.5"
              }
            ],
            "parts": [
              {
                "id": "s5.5_smt",
                "name": "objective",
                "prose": "You should not mount directories which are security sensitive on the host within containers, especially in read-write mode."
              }
            ],
            "controls": []
          },
          {
            "id": "s5.6",
            "class": "section",
            "title": "Ensure sshd is not run within containers",
            "props": [
              {
                "name": "label",
                "value": "5.6"
              }
            ],
            "parts": [
              {
                "id": "s5.6_smt",
                "name": "objective",
                "prose": "Uninstall the SSH daemon from the container and use and use `docker exec` to enter a container on the remote host.\n\n```\ndocker exec --interactive --tty $INSTANCE_ID sh\n```\nOR\n```\ndocker attach $INSTANCE_ID\n```"
              }
            ],
            "controls": []
          },
          {
            "id": "s5.7",
            "class": "section",
            "title": "Ensure privileged ports are not mapped within containers",
            "props": [
              {
                "name": "label",
                "value": "5.7"
              }
            ],
            "parts": [
              {
                "id": "s5.7_smt",
                "name": "objective",
                "prose": "You should not map container ports to privileged host ports when starting a container. You should also, ensure that there is no such container to host privileged port mapping declarations in the Dockerfile."
              }
            ],
            "controls": []
          },
          {
            "id": "s5.8",
            "class": "section",
            "title": "Ensure that only needed ports are open on the container",
            "props": [
              {
                "name": "label",
                "value": "5.8"
              }
            ],
            "parts": [
              {
                "id": "s5.8_smt",
                "name": "objective",
                "prose": "You should ensure that the Dockerfile for each container image only exposes needed ports. You can also completely ignore the list of ports defined in the Dockerfile by **NOT** using `-P` (UPPERCASE) or the `--publish-all` flag when starting the container. Instead, use the `-p` (lowercase) or `--publish` flag to explicitly define the ports that you need for a particular container instance.\n\nFor example:\n```\ndocker run --interactive --tty --publish 5000 --publish 5001 --publish 5002 centos /bin/bash\n```"
              }
            ],
            "controls": []
          },
          {
            "id": "s5.9",
            "class": "section",
            "title": "Ensure that the host's network namespace is not shared",
            "props": [
              {
                "name": "label",
                "value": "5.9"
              }
            ],
            "parts": [
              {
                "id": "s5.9_smt",
                "name": "objective",
                "prose": "You should not pass the `--net=host` option when starting any container."
              }
            ],
            "controls": []
          }
        ]
      },
      {
        "id": "s6",
        "class": "section",
        "title": "Docker Security Operations",
        "props": [
          {
            "name": "label",
            "value": "6"
          }
        ],
        "parts": [
          {
            "id": "s6_smt",
            "name": "objective",
            "prose": "This section covers some of the operational security issues associated with Docker deployments. These are best practices that should be followed where possible. Most of the recommendations in this section simply act as reminders that organizations should extend their current security best practices and policies to include containers."
          }
        ],
        "controls": [
          {
            "id": "s6.1",
            "class": "section",
            "title": "Ensure that image sprawl is avoided",
            "props": [
              {
                "name": "label",
                "value": "6.1"
              }
            ],
            "parts": [
              {
                "id": "s6.1_smt",
                "name": "objective",
                "prose": "You should keep only the images that you actually need and establish a workflow to remove old or stale images from the host. Additionally, you should use features such as pull-by-digest to get specific images from the registry.\n\nYou can follow the steps below to find unused images on the system so they can be deleted.\n\n**Step 1** Make a list of all image IDs that are currently instantiated by executing the command below:\n\n```\ndocker images --quiet | xargs docker inspect --format '< .Id >: Image=< .Config.Image >'\n```\n\n**Step 2**: List all the images present on the system by executing the command below:\n```\ndocker images\n```\n\n**Step 3**: Compare the list of image IDs created from Step 1 and Step 2 to find out images which are currently not being instantiated.\n\n**Step 4**: Decide if you want to keep the images that are not currently in use. If they are not needed, delete them by executing the following command:\n```\ndocker rmi $IMAGE_ID\n```\n\nAlternatively, the `docker system prune` command can be used to remove dangling images which are not tagged or, if necessary, all images that are not currently used by a running container when used with the `-a` option."
              }
            ],
            "controls": []
          },
          {
            "id": "s6.2",
            "class": "section",
            "title": "Ensure that container sprawl is avoided",
            "props": [
              {
                "name": "label",
                "value": "6.2"
              }
            ],
            "parts": [
              {
                "id": "s6.2_smt",
                "name": "objective",
                "prose": "You should periodically check your container inventory on each host and clean up containers which are not in active use with the command below:\n\n```\ndocker container prune\n```"
              }
            ],
            "controls": []
          }
        ]
      },
      {
        "id": "s7",
        "class": "section",
        "title": "Docker Swarm Configuration",
        "props": [
          {
            "name": "label",
            "value": "7"
          }
        ],
        "parts": [
          {
            "id": "s7_smt",
            "name": "objective",
            "prose": "This section lists the recommendations that alter and secure the behavior of the Docker Swarm. If you are not using Docker Swarm then the recommendations in this section do not apply."
          }
        ],
        "controls": [
          {
            "id": "s7.1",
            "class": "section",
            "title": "Ensure swarm mode is not Enabled, if not needed",
            "props": [
              {
                "name": "label",
                "value": "7.1"
              }
            ],
            "parts": [
              {
                "id": "s7.1_smt",
                "name": "objective",
                "prose": "If swarm mode has been enabled on a system in error, you should run the command below:\n```\ndocker swarm leave\n```"
              }
            ],
            "controls": []
          },
          {
            "id": "s7.10",
            "class": "section",
            "title": "Ensure that management plane traffic is separated from data plane traffic",
            "props": [
              {
                "name": "label",
                "value": "7.10"
              }
            ],
            "parts": [
              {
                "id": "s7.10_smt",
                "name": "objective",
                "prose": "You should initialize the swarm with dedicated interfaces for management and data planes respectively. \n\nFor example,\n```\ndocker swarm init --advertise-addr=192.168.0.1 --data-path-addr=17.1.0.3\n```"
              }
            ],
            "controls": []
          },
          {
            "id": "s7.10",
            "class": "section",
            "title": "Ensure that management plane traffic is separated from data plane traffic",
            "props": [
              {
                "name": "label",
                "value": "7.10"
              }
            ],
            "parts": [
              {
                "id": "s7.10_smt",
                "name": "objective",
                "prose": "You should initialize the swarm with dedicated interfaces for management and data planes respectively. \n\nFor example,\n```\ndocker swarm init --advertise-addr=192.168.0.1 --data-path-addr=17.1.0.3\n```"
              }
            ],
            "controls": []
          },
          {
            "id": "s7.2",
            "class": "section",
            "title": "Ensure that the minimum number of manager nodes have been created in a swarm",
            "props": [
              {
                "name": "label",
                "value": "7.2"
              }
            ],
            "parts": [
              {
                "id": "s7.2_smt",
                "name": "objective",
                "prose": "If an excessive number of managers is configured, the excess nodes can be demoted to workers using the following command:\n```\ndocker node demote <ID>\n```\nWhere <ID> is the node ID value of the manager to be demoted."
              }
            ],
            "controls": []
          },
          {
            "id": "s7.3",
            "class": "section",
            "title": "Ensure that swarm services are bound to a specific host interface",
            "props": [
              {
                "name": "label",
                "value": "7.3"
              }
            ],
            "parts": [
              {
                "id": "s7.3_smt",
                "name": "objective",
                "prose": "Resolving this issues requires re-initialization of the swarm, specifying a specific interface for the `--listen-addr` parameter."
              }
            ],
            "controls": []
          },
          {
            "id": "s7.4",
            "class": "section",
            "title": "Ensure that all Docker swarm overlay networks are encrypted",
            "props": [
              {
                "name": "label",
                "value": "7.4"
              }
            ],
            "parts": [
              {
                "id": "s7.4_smt",
                "name": "objective",
                "prose": "You should create overlay networks with the `--opt encrypted` flag."
              }
            ],
            "controls": []
          },
          {
            "id": "s7.5",
            "class": "section",
            "title": "Ensure that Docker's secret management commands are used for managing secrets in a swarm cluster",
            "props": [
              {
                "name": "label",
                "value": "7.5"
              }
            ],
            "parts": [
              {
                "id": "s7.5_smt",
                "name": "objective",
                "prose": "You should follow the `docker secret` documentation and use it to manage secrets effectively."
              }
            ],
            "controls": []
          },
          {
            "id": "s7.7",
            "class": "section",
            "title": "Ensure that the swarm manager auto-lock key is rotated periodically",
            "props": [
              {
                "name": "label",
                "value": "7.7"
              }
            ],
            "parts": [
              {
                "id": "s7.7_smt",
                "name": "objective",
                "prose": "You should run the command below to rotate the keys.\n```\ndocker swarm unlock-key --rotate\n```\nAdditionally, to facilitate auditing of this recommendation, you should maintain key rotation records and ensure that you establish a pre-defined frequency for key rotation."
              }
            ],
            "controls": []
          },
          {
            "id": "s7.8",
            "class": "section",
            "title": "Ensure that node certificates are rotated as appropriate",
            "props": [
              {
                "name": "label",
                "value": "7.8"
              }
            ],
            "parts": [
              {
                "id": "s7.8_smt",
                "name": "objective",
                "prose": "You should run the command to set the desired expiry time on the node certificate.\n\nFor example:\n```\ndocker swarm update --cert-expiry 48h\n```"
              }
            ],
            "controls": []
          },
          {
            "id": "s7.9",
            "class": "section",
            "title": "Ensure that CA certificates are rotated as appropriate",
            "props": [
              {
                "name": "label",
                "value": "7.9"
              }
            ],
            "parts": [
              {
                "id": "s7.9_smt",
                "name": "objective",
                "prose": "You should run the command below to rotate a certificate.\n\n```\ndocker swarm ca --rotate\n```"
              }
            ],
            "controls": []
          }
        ]
      },
      {
        "id": "s8",
        "class": "section",
        "title": "Docker Enterprise Configuration",
        "props": [
          {
            "name": "label",
            "value": "8"
          }
        ],
        "parts": [
          {
            "id": "s8_smt",
            "name": "objective",
            "prose": "This section contains recommendations for securing Docker Enterprise components."
          }
        ],
        "controls": [
          {
            "id": "s8.1.1",
            "class": "section",
            "title": "Configure the LDAP authentication service",
            "props": [
              {
                "name": "label",
                "value": "8.1.1"
              }
            ],
            "parts": [
              {
                "id": "s8.1.1_smt",
                "name": "objective",
                "prose": "You can configure LDAP integration via the UCP \"Admin Settings\" UI by following the instructions [here](https://docs.docker.com/datacenter/ucp/2.2/guides/admin/configure/external-auth/). LDAP integration can also be enabled via a configuration file by following the instructions [here](https://docs.docker.com/datacenter/ucp/2.2/guides/admin/configure/external-auth/enable-ldap-config-file/)."
              }
            ],
            "controls": []
          },
          {
            "id": "s8.1.2",
            "class": "section",
            "title": "Use external certificates",
            "props": [
              {
                "name": "label",
                "value": "8.1.2"
              }
            ],
            "parts": [
              {
                "id": "s8.1.2_smt",
                "name": "objective",
                "prose": "You can configure your own certificates for UCP either during installation or after installation via the UCP \"Admin Settings\" user interface.\n\n**Customize certificates during installation:**\n\n1. Create a volume named `ucp-controller-server-certs` on your primary UCP Manager installation node:\n\n ```\n docker volume create ucp-controller-server-certs\n ```\n\n2. Copy your external certificate authority's public certificate file (ca.pem) and your signed certificate (cert.pem) and key (key.pem) files to the root directory of the volume\n\n ```\n cp ca.pem cert.pem key.pem $(docker volume inspect --format '< .Mountpoint >' ucp-controller-server-certs)/\n ```\n\n3. Run the UCP installation command with the `--external-server-cert` flag\n\n**Customize certificates post-installation via the \"Admin Settings\" UI:**\n\nRefer to the instructions at [https://docs.docker.com/datacenter/ucp/2.2/guides/admin/configure/use-your-own-tls-certificates/#configure-ucp-to-use-your-own-tls-certificates-and-keys](https://docs.docker.com/datacenter/ucp/2.2/guides/admin/configure/use-your-own-tls-certificates/#configure-ucp-to-use-your-own-tls-certificates-and-keys) for configuring your own certificates via the UCP UI."
              }
            ],
            "controls": []
          },
          {
            "id": "s8.1.3",
            "class": "section",
            "title": "Enforce the use of client certificate bundles for unprivileged users",
            "props": [
              {
                "name": "label",
                "value": "8.1.3"
              }
            ],
            "parts": [
              {
                "id": "s8.1.3_smt",
                "name": "objective",
                "prose": "Client certificate bundles can be created in one of two ways:\n\n**User Management UI**\n\nUCP Administrators can provision client certificate bundles on behalf of users by navigating to the USER MANAGEMENT | USERS interface in UCP, selecting the user from the list, clicking on the \"Configure\" button from the right-hand navigation, and selecting \"Client Bundle\" from the drop-down. The \"New Client Bundle\" link can be selected to create a client bundle. This will trigger a download of the bundle as a .zip file. \n\n**Self-Provision**\n\nUsers with access to the UCP console can create client certificate bundles themselves. After logging into the console, the user can select their username drop-down from the top-left corner of the navigation page and select the \"My Profile\" option. From there, the \"New Client Bundle\" link can be selected to create a client bundle and this will trigger a download of the bundle as a .zip file."
              }
            ],
            "controls": []
          },
          {
            "id": "s8.1.4",
            "class": "section",
            "title": "Configure applicable cluster role-based access control policies",
            "props": [
              {
                "name": "label",
                "value": "8.1.4"
              }
            ],
            "parts": [
              {
                "id": "s8.1.4_smt",
                "name": "objective",
                "prose": "UCP RBAC components can be configured as required via the UCP \"User Management\" UI."
              }
            ],
            "controls": []
          },
          {
            "id": "s8.1.4",
            "class": "section",
            "title": "Configure applicable cluster role-based access control policies",
            "props": [
              {
                "name": "label",
                "value": "8.1.4"
              }
            ],
            "parts": [
              {
                "id": "s8.1.4_smt",
                "name": "objective",
                "prose": "UCP RBAC components can be configured as required via the UCP \"User Management\" UI."
              }
            ],
            "controls": []
          },
          {
            "id": "s8.1.5",
            "class": "section",
            "title": "Enable signed image enforcement",
            "props": [
              {
                "name": "label",
                "value": "8.1.5"
              }
            ],
            "parts": [
              {
                "id": "s8.1.5_smt",
                "name": "objective",
                "prose": "Running untrusted containers poses a risk to the operation of your Docker platform. Combined with the Docker Content Trust recommendations in Section 4, signed image enforcement in UCP gives you more control over the validity and origination of your Docker images prior to deployment. Signed image enforcement can prohibit images that are unsigned, have malformed signatures, and/or compromised signatures from being deployed."
              }
            ],
            "controls": []
          },
          {
            "id": "s8.1.6",
            "class": "section",
            "title": "Set the Per-User Session Limit to a value of '3' or lower",
            "props": [
              {
                "name": "label",
                "value": "8.1.6"
              }
            ],
            "parts": [
              {
                "id": "s8.1.6_smt",
                "name": "objective",
                "prose": "As a Docker Enterprise Administrator, execute the following commands from a machine with connectivity to the UCP management console. Replace `[ucp_url]` with your UCP URL, `[ucp_username]` with the username of a Docker Enterprise Administrator and `[ucp_password]` with the password of a Docker Enterprise Administrator.\n\n**Step 1:** Retrieve a UCP API token\n\nLinux (requires curl and jq):\n\n $ AUTHTOKEN=$(curl -sk -d '{\"username\":\"[ucp_username]\",\"password\":\"[ucp_password]\"}' https://[ucp_url]/auth/login | jq -r .auth_token)\n\n**Step 2:** Retrieve and save UCP config\n\nLinux (requires curl):\n\n $ curl -sk -H \"Authorization: Bearer $AUTHTOKEN\" https://[ucp_url]/api/ucp/config-toml > ucp-config.toml\n\n**Step 3:** Open the `ucp-config.toml` file, set the `per_user_limit` entry under the `[auth.sessions]` section to a value of '3' or lower, but greater than '0'. Save the file.\n\n**Step 4:** Execute the following command to update UCP with the new configuration:\n\nLinux (requires curl):\n\n $ curl -sk -H \"Authorization: Bearer $AUTHTOKEN\" --upload-file ucp-config.toml https://[ucp_url]/api/ucp/config-toml"
              }
            ],
            "controls": []
          },
          {
            "id": "s8.1.7",
            "class": "section",
            "title": "Set the \"Lifetime Minutes\" and \"Renewal Threshold Minutes\" values to '15' or lower and '0' respectively",
            "props": [
              {
                "name": "label",
                "value": "8.1.7"
              }
            ],
            "parts": [
              {
                "id": "s8.1.7_smt",
                "name": "objective",
                "prose": "As a Docker Enterprise Administrator, execute the following commands from a machine with connectivity to the UCP management console. Replace `[ucp_url]` with your UCP URL, `[ucp_username]` with the username of a Docker Enterprise Administrator and `[ucp_password]` with the password of a Docker Enterprise Administrator.\n\n**Step 1:** Retrieve a UCP API token\n\nLinux (requires curl and jq):\n\n $ AUTHTOKEN=$(curl -sk -d '{\"username\":\"[ucp_username]\",\"password\":\"[ucp_password]\"}' https://[ucp_url]/auth/login | jq -r .auth_token)\n\n**Step 2:** Retrieve and save UCP config\n\nLinux (requires curl):\n\n $ curl -sk -H \"Authorization: Bearer $AUTHTOKEN\" https://[ucp_url]/api/ucp/config-toml > ucp-config.toml\n\n**Step 3:** Open the `ucp-config.toml` file, set the `lifetime_minutes` and `renewal_threshold_minutes` entries under the `[auth.sessions]` section to values of '15' or lower and '0' respectively. Save the file.\n\n**Step 4:** Execute the following command to update UCP with the new configuration:\n\nLinux (requires curl):\n\n $ curl -sk -H \"Authorization: Bearer $AUTHTOKEN\" --upload-file ucp-config.toml https://[ucp_url]/api/ucp/config-toml"
              }
            ],
            "controls": []
          },
          {
            "id": "s8.2.1",
            "class": "section",
            "title": "Enable image vulnerability scanning",
            "props": [
              {
                "name": "label",
                "value": "8.2.1"
              }
            ],
            "parts": [
              {
                "id": "s8.2.1_smt",
                "name": "objective",
                "prose": "You can navigate to DTR \"Settings\" UI and select the \"Security\" tab to access the image scanning configuration. Select the \"Enable Scanning\" slider to enable this functionality. You can also enable the Image Scanning capability via the DTR API using the cURL command as follows:\n\n $ curl -X POST \"https:///api/v0/meta/settings\" -H \"accept: application/json\" -H \"content-type: application/json\" -d \"{ \\\"scanningEnabled\\\": true}\""
              }
            ],
            "controls": []
          }
        ]
      }
    ]
  }
}